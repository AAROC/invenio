## $Id$

## This file is part of CDS Invenio.
## Copyright (C) 2002, 2003, 2004, 2005, 2006 CERN.
##
## CDS Invenio is free software; you can redistribute it and/or
## modify it under the terms of the GNU General Public License as
## published by the Free Software Foundation; either version 2 of the
## License, or (at your option) any later version.
##
## CDS Invenio is distributed in the hope that it will be useful, but
## WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
## General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with CDS Invenio; if not, write to the Free Software Foundation, Inc.,
## 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

#include "config.wml"
<?
  Header("Location: <WEBURL>/admin/bibformat/bibformatadmin.py");
  exit();
  include("localconf.inc.php");
?>

#include "cdspage.wml" \
    title="BibFormat Admin" \
    navtrail_previous_links="<a class=navtrail href=<WEBURL>/admin/<lang:star: index.*.html>>_(Admin Area)_</a>" \ 
    navbar_name="admin" \
    navbar_select="bibformat"
	    
<?
  include("security.inc.php");
<protect>
## $Id$
## DO NOT EDIT THIS FILE!  IT WAS AUTOMATICALLY GENERATED FROM CDS Invenio WML SOURCES.
</protect>
?>

<p>The BibFormat admin interface enables you to specify how the
bibliographic data is presented to the end user in the search
interface and search results pages.  For example, you may specify that
titles should be printed in bold font, the abstract in small italic,
etc.  Moreover, the BibFormat is not only a simple bibliographic data
<em>output formatter</em>, but also an automated <em>link
constructor</em>.  For example, from the information on journal name
and pages, it may automatically create links to publisher's site based
on some configuration rules.

<h2>Configuring BibFormat</h2>

<p>By default, a simple HTML format based on the most common fields
(title, author, abstract, keywords, fulltext link, etc) is defined.
You certainly want to define your own ouput formats in case you have a
specific metadata structure.

<p>Here is a short guide of what you can configure:

<blockquote>
<dl>

<dt><a href="BEH_display.php">Behaviours</a>

<dd>Define one or more output BibFormat behaviours.  These are then
passed as parameters to the BibFormat modules while executing
formatting. 

<br><em>Example:</em> You can tell BibFormat that is has to enrich the
incoming metadata file by the created format, or that it only has to
print the format out.

<dt><a href="OAIER_display.php">Extraction Rules</a>

<dd>Define how the metadata tags from input are mapped into internal
BibFormat variable names.  The variable names can afterwards be used
in formatting and linking rules.

<br><em>Example:</em> You can tell that <code>100 $a</code> field
should be mapped into <code>$100.a</code> internal variable that you
could use later.

<dt><a href="LINK_display.php">Link Rules</a> 

<dd>Define rules for automated creation of URI links from mapped
internal variables.

<br><em>Example:</em> You can tell a rule how to create a link to
People database out of the <code>$100.a</code> internal variable
repesenting author's name.  (The <code>$100.a</code> variable was mapped
in the previous step, see the Extraction Rules.)

<dt><a href="LINK_FORMAT_display.php">File Formats</a>

<dd>Define file format types based on file extensions.  This will be
used when proposing various fulltext services.

<br><em>Example:</em> You can tell that <code>*.pdf</code> files will
be treated as PDF files.  

<dt><a href="UDF_display.php">User Defined Functions (UDFs)</a>

<dd>Define your own functions that you can reuse when creating your
own output formats.  This enables you to do complex formatting without
ever touching the BibFormat core code.

<br><em>Example:</em> You can define a function how to match and
extract email addresses out of a text file.

<dt><a href="FORMAT_display.php">Formats</a>

<dd>Define the output formats, i.e. how to create the output out of
internal BibFormat variables that were extracted in a previous step.
This is the functionality you would want to configure most of the
time.  It may reuse formats, user defined functions, knowledge bases,
etc.

<br><em>Example:</em> You can tell that authors should be printed in
italic, that if there are more than 10 authors only the first three
should be printed, etc.

<dt><a href="KB_display.php">Knowledge Bases (KBs)</a>

<dd>Define one or more knowledge bases that enables you to transform
various forms of input data values into the unique standard form on
the output.

<br><em>Example:</em> You can tell that <em>Phys Rev D</em> and
<em>Physical Review D</em> are both the same journal and that these
names should be standardized to <em>Phys Rev : D</em>.

<dt><a href="test.php">Execution Test</a>

<dd>Enables you to test your formats on your sample data file.  Useful
when debugging newly created formats.

</dl>
</blockquote>

<p>To learn more on BibFormat configuration, you can consult the <a
href="guide.html">BibFormat Admin Guide</a>.</small>

<h2>Running BibFormat</h2>

<h3>From the Web interface</h3>
<p>
Run <a href="BIBREFORMAT_display.php">Reformat Records</a> tool.
This tool permits you to update stored formats for bibliographic records.
<br>
It should normally be used after configuring BibFormat's
<a href="BEH_display.php">Behaviours</a> and
<a href="FORMAT_display.php">Formats</a>.
When these are ready, you can choose to rebuild formats for selected
collections or you can manually enter a search query and the web interface
will accomplish all necessary formatting steps.
<br>
<i>Example:</i> You can request Photo collections to have their HTML 
brief formats rebuilt, or you can reformat all the records written by Ellis.

<h3>From the command-line interface</h3>

<p>Consider having an XML MARC data file that is to be uploaded into
the CDS Invenio.  (For example, it might have been harvested from other
sources and processed via <a href="../bibconvert/">BibConvert</a>.)
Having configured BibFormat and its default output type behaviour, you
would then run this file throught BibFormat as follows:

<blockquote>
<pre>
$ bibformat < /tmp/sample.xml > /tmp/sample_with_fmt.xml
<pre>
</blockquote>

that would create default HTML formats and would "enrich" the input
XML data file by this format.  (You would then continue the upload
procedure by calling successively <a
href="../bibupload/">BibUpload</a> and <a
href="../bibwords/">BibWords</a>.)

<p>Now consider a different situation.  You would like to add a new
possible format, say "HTML portfolio" and "HTML captions" in order to
nicely format multiple photographs in one page.  Let us suppose that
these two formats are called <code>hp</code> and <code>hc</code> and
are already loaded in the <code>collection_format</code> table.
(TODO: describe how this is done via WebAdmin.)  You would then
proceed as follows: firstly, you would prepare the corresponding <a
href="BEH_display.php">output behaviours</a> called <code>HP</code>
and <code>HC</code> (TODO: note the uppercase!) that would not enrich
the input file but that would produce an XML file with only
<code>001</code> and <code>FMT</code> tags.  (This is in order not to
update the bibliographic information but the formats only.)  You would
also prepare corresponding <a href="FORMAT_display.php">formats</a>
at the same time.  Secondly, you would launch the formatting as
follows:

<blockquote>
<pre>
$ bibformat otype=HP,HC < /tmp/sample.xml > /tmp/sample_fmts_only.xml
<pre>
</blockquote>

that should give you an XML file containing only 001 and FMT tags.
Finally, you would upload the formats:

<blockquote>
<pre>
$ bibupload < /tmp/sample_fmts_only.xml
<pre>
</blockquote>

and that's it. The new formats should now appear in <a
href="<WEBURL>">WebSearch</a>.
