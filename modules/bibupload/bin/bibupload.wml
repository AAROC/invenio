## $Id$
## Script that uploades LoC MARC XML file into the BIB database.

## This file is part of the CERN Document Server Software (CDSware).
## Copyright (C) 2002 CERN.
##
## The CDSware is free software; you can redistribute it and/or
## modify it under the terms of the GNU General Public License as
## published by the Free Software Foundation; either version 2 of the
## License, or (at your option) any later version.
##
## The CDSware is distributed in the hope that it will be useful, but
## WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
## General Public License for more details.  
##
## You should have received a copy of the GNU General Public License
## along with CDSware; if not, write to the Free Software Foundation, Inc.,
## 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

## read config variables:
#include "config.wml"
#include "configbis.wml"

## start PHP:
<protect>#!</protect><PHP> -q
<?
<protect>#$Id$</protect>
<protect>## DO NOT EDIT THIS FILE!  IT WAS AUTOMATICALLY GENERATED FROM CDSware WML SOURCES.</protect>

   define( DOCS_DATABASE, "<DBNAME>");
   $mysql_machine = "<DBHOST>";
   $mysql_docid = "<DBUSER>";
   $mysql_docpw = "<DBPASS>";
   $supportemail = "<SUPPORTEMAIL>";
   $WORDFILEJOB = "<BINDIR>/bibwords";

### okay, config read, from now on the script can continue ###

<protect>

   ##########################################################################
   # file: 	  bibupload
   # created by:  T. Baron
   # revision: $Id$
   # parameters:  Usage: bibupload [options] file1.xml [file2.xml ...]
   #              Options: 
   #              -h, --help      print this help
   #              -d, --display   display records analysis - no integration
   #              -b, --database  display integration requests - integration
   #              -m, --mute      Silent mode.
   # description: this program takes file(s) written in XML following
   #              the DTD used in the LoC MARC XML.  For each record found, 
   #		  the program decides whether it is an upload or a 
   # 		  correction (sysno existence, report number existence). 
   #		  Then each field is created or corrected.
   # 		  The process is based on three classes: record, field and 
   #		  subfield.
   #		
   ##########################################################################

// time limit for script execution
set_time_limit(86340);

// array of all the "untouchable" field tags
$strongtags = array("909COo");

//////////////////////////////////////////////////////////////////////
// STRUCTURE CLASSES
// A MARC XML record is composed of some data fields elements which
// may in turn contain subfields.
// A record starts with "<record>" and ends with "</record>
//////////////////////////////////////////////////////////////////////

class subfield {
   // this class stores the subfield items
	
   var $subfieldcode; 	// type
   var $value; 		// value
   var $position; 	// position

   // constructor
   function subfield($number,&$record)
   {
      global $currentfield;
		
      $this->position = $number;
      $this->subfieldcode = $currentfield[attributes][CODE];
		
      if ($this->subfieldcode == "")
         $this->subfieldcode == "_";
		
      if ($currentfield[type] == "complete")
         $this->value = $currentfield[value];
      else
      {
         // get cdata
         getnexttag();
         if ($currentfield[tag]=="SUBFIELD" && $currentfield[type] == "cdata")
         {
            $this->value = $currentfield[value];
            getnexttag();
         }
         //close tag
         if ($currentfield[tag]!="SUBFIELD" || $currentfield[type] != "close")
         {
            print "subfield: ERROR! Bad XML file!\n";
            $record->valid = false;
         }
         getnexttag();
      }
   }
}


class field {
   // this class stores the field items
	
   var $type; // type (tag)
   var $i1; // indicator 1
   var $i2; // indicator 2
   var $value;
   var $subfields;
   var $nbsubfields;
   var $position;

   // constructor
   function field($nbfield,&$record)
   {
      global $currentfield;

      $this->position = $nbfield;
      $this->type = $currentfield[attributes][TAG];
      $this->i1 = $currentfield[attributes][IND1];
      $this->i2 = $currentfield[attributes][IND2];
      if (ereg_replace("[ \n\r\t]+","",$this->i1) == "") { $this->i1 = "_"; }
      if (ereg_replace("[ \n\r\t]+","",$this->i2) == "") { $this->i2 = "_"; }
      $this->nbsubfields = 0;
		
      if ($currentfield[type] == "complete")
      {
         $this->value == $currentfield[value];
         getnexttag();
      }
      else
      {
         getnexttag();
		
         while (($currentfield[tag] == "SUBFIELD" || 
                ($currentfield[tag] == "CONTROLFIELD" && 
                 $currentfield[type] == "cdata") ||
                ($currentfield[tag] == "DATAFIELD" && 
                 $currentfield[type] == "cdata")))
         {
            if (($currentfield[tag] == "CONTROLFIELD" && 
                 $currentfield[type] == "cdata") ||
                ($currentfield[tag] == "DATAFIELD" && 
                 $currentfield[type] == "cdata"))
               $this->value == $currentfield[value];
            else
            {
               $this->subfields[$this->nbsubfields] = new subfield(
                    $this->nbsubfields,$record);
               $this->nbsubfields ++;
            }
            getnexttag();
         }
      }
   }

   function get_subfield($subfieldcode)
   {
      $subfieldcode = strtolower($subfieldcode);

      $j=0;
      while (strtolower($this->subfields[$j]->subfieldcode) != "$subfieldcode" 
          && $j <= $this->nbsubfields)
         $j++;
      if ($j == $this->nbsubfields)
         return 0;
      else
         return $this->subfields[$j]->value;
   }	
}


class record {
   // this class stores the record items
	
   var $fields; 	// contains all fields
   var $recid; 		// system number: 000 if new
   var $nbfields; 	// number of fields
   var $valid;


   // Constructor
   function record()
   {
      global $currentfield;
		
      $this->valid = true;

      getnexttag();

      while ($currentfield[tag] != "CONTROLFIELD" && $currentfield[tag] != "DATAFIELD" && $currentfield != NULL)
         getnexttag();

      $this->nbfields = 0;
      while ($currentfield[tag] == "CONTROLFIELD" || $currentfield[tag] == "DATAFIELD")
      {
         // If system number
         if ($currentfield[attributes][TAG] == "001")
         {
            if ($currentfield[type] == "complete")
            {
               $this->recid = $currentfield[value];
               getnexttag();
            }
            else
            {
               // go to next item (must be subfield)
               getnexttag();
               $this->recid = $currentfield[value];
               // avoid </datafield>
               getnexttag();
               // and get the next tag
               getnexttag();
            }
            if ($this->recid == "")
               $this->recid = "000";
         }
         else if ($currentfield[type] != "close")
         {
            $this->fields[$this->nbfields] = new field($this->nbfields,$this);
            $this->nbfields ++;
         }
         else if ($currentfield[type] == "close")
            getnexttag();
         else
         {
            print "field: ERROR! Bad XML file!\n";
            $this->valid = false;
         }
      }
		
      if ($this->recid == "")
         $this->recid = "000";

   }


   function get_field($tag,$i1,$i2)
   {
      $j=0;
      while ((($this->fields[$j]->type != "$tag") || 
              ($this->fields[$j]->i1 != "$i1") || 
              ($this->fields[$j]->i2 != "$i2")) && ($j <= ($this->nbfields)))
         $j++;
      if ($j == $this->nbfields)
         return 0;
      else
         return $this->fields[$j];
   }

   function get_subfield($tag,$i1,$i2,$subfieldcode)
   {
      $i1 = strtolower($i1);
      $i2 = strtolower($i2);
      $subfieldcode = strtolower($subfieldcode);
      $tag = strtolower($tag);

      $j=0;
      $found = FALSE;
      while (!$found && ($j <= ($this->nbfields)))
      {
         if (strtolower($this->fields[$j]->type) == "$tag" && 
             strtolower($this->fields[$j]->i1) == "$i1" && 
             strtolower($this->fields[$j]->i2) == "$i2")
         {
            if ($this->fields[$j]->get_subfield($subfieldcode))
               $found = $this->fields[$j]->get_subfield($subfieldcode);
         }
         $j++;
      }
      if ($j == $this->nbfields + 1)
         return 0;
      else
         return $found;
   }
}



//////////////////////////////////////////////////////////////////////
// TREATMENT FUNCTIONS
//////////////////////////////////////////////////////////////////////

// from an array passed as parameter, this function returns a
// comma-separated list of all elements in the array
function createTextFromArray($array)
{
    reset($array);
    $text = "(''";
    while (list($key,$value) = each($array)) {
        $text .= ",'".$value."'";
    }
    $text .= ")";
    return $text;
}

// This function gets the next available field number for
// a given table name, and a given record id
function getNextFieldNumber($tablename,$recid)
{
    global $maxfieldno;

    if ($maxfieldno[$tablename] != "") {
        $maxfieldno[$tablename] = $maxfieldno[$tablename] + 1;
        $field_number = $maxfieldno[$tablename];
    }
    else {
        $t1 = getmicrotime();
        $res = mysql_perform_query("
SELECT MAX(field_number) 
FROM   bibrec_$tablename 
WHERE  id_bibrec=$recid");

        $t2 = getmicrotime();
        if (PRINTDB)
            print ($t2-$t1)." select MAX(field_number) from ".
                "bibrec_$tablename where id_bibrec=$recid\n";
        $row = mysql_fetch_row($res);
        $maxfieldno[$tablename] = $row[0]+1;
        $field_number = $maxfieldno[$tablename];
    }
    return $field_number;
}

function mysql_perform_query($query, $behaviour="die") {
    if($behaviour == "continue")
        $result = mysql_query($query);
    else {
        $result = mysql_query($query)
            or die ("\nMySQL: could not execute your query:\n  $query" .
                    "\nContact $supportemail." .
                    "\nError " . mysql_errno() . ": " . mysql_error() . ".\n");
    }

    return $result;
}

function getnexttag()
{
   global $i; // current position in the structure
   global $index; // structure containing the XML
   global $currentfield;
   global $nbTags;

   // this function retrieves the next valuable field (one of "record"
   // "controlfield", "datafield" or "subfield")

   //get next tag
   $i++;

   while ($index[$i][tag] != "RECORD" && 
          $index[$i][tag] != "CONTROLFIELD" && 
          $index[$i][tag] != "DATAFIELD" && 
          $index[$i][tag] != "SUBFIELD" && $i <= $nbTags)
      $i++;

   if ($i <= $nbTags)
      $currentfield = $index[$i];
   else
      $currentfield = NULL;

}



function Test_In_DB($value,$tag,$table)
{
   $value = ereg_replace("^[\n\r\t ]*","",$value);
   $value = ereg_replace("[\r\n\t ]* $","",$value);
   $value = mysql_escape_string($value);

   mysql_select_db(DOCS_DATABASE);
   $t1 = getmicrotime();
   $res = mysql_perform_query("
SELECT id 
FROM   $table 
WHERE  value='$value' and 
       tag='$tag'");
   $t2 = getmicrotime();
   if (PRINTDB)
      print ($t2-$t1)." select id from $table where value='$value' and".
         " tag='$tag'\n";
   if ($arr = mysql_fetch_row($res))
   {
      $t1 = getmicrotime();
      $res2 = mysql_perform_query("
SELECT id_bibrec 
FROM   bibrec_".$table." 
WHERE  id_bibxxx=".$arr[0]);
      $t2 = getmicrotime();
      if (PRINTDB)
         print ($t2-$t1)." select id_bibrec from bibrec_".$table.
            " where id_".$table."=".$arr[0]."\n";
      $result = mysql_fetch_row($res2);
      return $result[0];
   }
   else
      return 0;
}


function integrate($rec,$logfp)
{
   global $WORDFILEJOB;

   //create the bibrec
   $now = strftime("%Y-%m-%d %H:%M:%S");
   $cd = $now;
   $md = $now;

   $t1 = getmicrotime();
   mysql_perform_query("
INSERT
INTO   bibrec (creation_date,modification_date) 
values('$cd','$md')");
   $t2 = getmicrotime();
   if (PRINTDB)
      print ($t2-$t1)." insert into bibrec (creation_date,modification_date)".
         " values('$cd','$md')\n";

   #get the created item id
   $recid = mysql_insert_id();

   #for each field
   $nbfields = $rec->nbfields;
   for ($j=0;$j<$nbfields;$j++)
   {
      if ($rec->fields[$j])
      {
         $position = $j + 1;
         $field = $rec->fields[$j];
         $tag = $field->type;
         $i1 = $field->i1;
         $i2 = $field->i2;
         $tablenumber = substr($tag,0,2);
         $tablename = "bib" . $tablenumber . "x"; 

         // special treatment for the format field
         if ($tag == "FMT")
         {
            if ($field->subfields[1]->value != "")
            {
               $format = $field->subfields[0]->value;
               if ($format{0} == "x") {
                   $value = mysql_escape_string(gzcompress(utf8_encode($field->subfields[1]->value)));
               }
               else {   
                   $value = mysql_escape_string(gzcompress($field->subfields[1]->value));
               }
               $t1 = getmicrotime();
               $res = mysql_perform_query("
SELECT id 
FROM   bibfmt 
WHERE  id_bibrec=$recid and 
       format='$format'");
               $t2 = getmicrotime();
               if (PRINTDB)
                  print ($t2-$t1)." select id from bibfmt where".
                     " id_bibrec=$recid and format='$format'\n";
               if (mysql_num_rows($res) != 0)
               {
                  $t1 = getmicrotime();
                  mysql_perform_query("
UPDATE bibfmt 
SET    format='$format',
       value='$value',
       last_updated=NOW()
WHERE  id_bibrec=$recid and 
       format='$format'");
                  $t2 = getmicrotime();
                  if (PRINTDB)
                     print ($t2-$t1)." update bibfmt set format='$format',".
                         "value='$value', last_updated=NOW()".
                         " where id_bibrec=$recid and format='$format'\n";
               }
               else
               {
                  $t1 = getmicrotime();
                  mysql_perform_query("
INSERT
INTO   bibfmt(id_bibrec,format,value,last_updated)
values ($recid,'$format','$value',NOW())");
                  $t2 = getmicrotime();
                  if (PRINTDB)
                     print ($t2-$t1)." insert into bibfmt(id_bibrec,format,".
                         "value, last_updated)values($recid,'$format','$value'," .
                         "NOW())\n";
               }
            }
            else
            {
               $format = $field->subfields[0]->value;
               $t1 = getmicrotime();
               mysql_perform_query("
DELETE 
FROM   bibfmt 
WHERE  id_bibrec=$recid and 
       format='$format'");
               $t2 = getmicrotime();
               if (PRINTDB)
                  print ($t2-$t1)." delete from bibfmt where id_bibrec=$recid".
                     " and format='$format'\n";
            }
         }
         // we do not want field 001 to be integrated
         elseif ($tag != "001")
         {		
            #main value
            if ($field->value != "")
            {
               $fulltag = "$tag${i1}${i2}_";
               $value = mysql_escape_string($field->value);
               insertfield($fulltag,$value,$tablename,$recid,$position,$logfp);
            }
			
            #sub fields
            $nbsubfields = $field->nbsubfields;
            for ($k=0;$k<$nbsubfields;$k++)
            {
               $subfield = $field->subfields[$k];
               $subfieldcode = $subfield->subfieldcode;
               if ($subfield->value != "")
               {
                  $fulltag = "$tag$i1$i2$subfieldcode";
                  $value = mysql_escape_string($subfield->value);
                  insertfield($fulltag,$value,$tablename,$recid,$position,$logfp);
               }
            }
         }
      }
   }
		
   // word file addition
   if ($WORDFILEJOB && BIBWORDS)
      system("$WORDFILEJOB add $recid > /dev/null 2>&1");

   // insert xml full format
   insertFMTfield($recid);

   if (!MUTE) {
       print "inserted.\n";
   }
}



function deletefield($recid,$fulltag,$tablename,$logfp)
{
    global $strongtags;

    $t1 = getmicrotime();
    $res = mysql_perform_query("
SELECT DISTINCT field_number
FROM   bibrec_$tablename,
       $tablename 
WHERE  id_bibxxx = id and 
       id_bibrec=$recid and 
       tag LIKE '$fulltag'");
    $t2 = getmicrotime();
    if (PRINTDB)
        print ($t2-$t1)." select DISTINCT field_number from bibrec_$tablename,$tablename".
            " where id_bibxxx = id and id_bibrec=$recid and tag LIKE '$fulltag'\n";
    while ($row = mysql_fetch_row($res)) {
        // delete main value + subfields
        $t1 = getmicrotime();
        mysql_perform_query("
DELETE 
FROM   bibrec_$tablename
USING  bibrec_$tablename,
       $tablename
WHERE  id_bibrec=$recid and 
       field_number=$row[0] and
       id_bibxxx=id and
       tag NOT IN ".createTextFromArray($strongtags));
        $t2 = getmicrotime();
        if (PRINTDB)
            print ($t2-$t1)." delete from bibrec_$tablename using  bibrec_$tablename, ".
                " $tablename where id_bibrec=$recid and field_number=$row[0] and ".
                "id_bibxxx=id and tag NOT IN ".createTextFromArray($strongtags)."\n";
    }
}



function update($rec,$recid,$logfp)
{
    global $WORDFILEJOB,$strongtags;

    $now = strftime("%Y-%m-%d %H:%M:%S");
    $md = $now;
    
    // firstly check whether this 'id' exists in the bibrec table:
    $res = mysql_perform_query("SELECT COUNT(*) FROM bibrec WHERE id=$recid\n");
    $row = mysql_fetch_row($res);
    if ($row[0] == 0) {
        if (!MUTE) {
            print "update error. [record $recid does not exist]\n";
        }
        return;
    }
    mysql_free_result($res);
   
    // update the modification datetime field
    // if we don't have only FMT fields inside the record
    $onlyFMT = true;
    for ($j=0;$j<$rec->nbfields;$j++) {
        if ($rec->fields[$j] && $rec->fields[$j]->type != "FMT") {
            $onlyFMT = false;
        }
    }
    if (!$onlyFMT && !FORMAT) {
        $t1 = getmicrotime();
        mysql_perform_query("
UPDATE bibrec 
SET    modification_date='$md'
WHERE  id=$recid\n");
        $t2 = getmicrotime();
        if (PRINTDB)
            print ($t2-$t1)." update bibrec set modification_date='$md',".
                " where id=$recid\n";
    }

    $nbfields = $rec->nbfields;

    if (CORRECT) {
        // delete each found field
        for ($j=0;$j<$nbfields;$j++) {
            $field = $rec->fields[$j];
            $tag = $field->type;
            $i1 = $field->i1;
            $i2 = $field->i2;
            $tablenumber = substr($tag,0,2);
            $tablename = "bib" . $tablenumber . "x";
            $nbsubfields = $field->nbsubfields;
            for ($k=0;$k<$nbsubfields;$k++) {
                $subfield = $field->subfields[$k];
                $subfieldcode = $subfield->subfieldcode;
                $fulltag = "$tag$i1$i2$subfieldcode";
                if ($tag != "FMT") {
                    deletefield($recid,$fulltag,$tablename,$logfp);
                }
            }
        }
    }

    if(REPLACE && !$onlyFMT) {
        for ($i=0;$i<100;$i++) {
            deletefield($recid,"%","bib".($i<10 ? "0$i" : "$i")."x",$logfp);
        }
    }
    
    // insert each found field
    for ($j=0;$j<$nbfields;$j++) {
        if ($rec->fields[$j]) {
            $fieldnumber = -1;
            $field = $rec->fields[$j];
            $tag = $field->type;
            $i1 = $field->i1;
            $i2 = $field->i2;
            $tablenumber = substr($tag,0,2);
            $tablename = "bib" . $tablenumber . "x"; 
            $fulltag = "$tag$i1${i2}_";

            if ($tag == "FMT") {
                if ($field->subfields[1]->value != "") {
                    $format = $field->subfields[0]->value;
                    $value = mysql_escape_string(gzcompress($field->subfields[1]->value));
                    $t1 = getmicrotime();
                    $res = mysql_perform_query("
SELECT id 
FROM   bibfmt 
WHERE  id_bibrec=$recid and 
       format='$format'");

                    $t2 = getmicrotime();
                    if (PRINTDB)
                        print ($t2-$t1)." select id from bibfmt where ".
                            "id_bibrec=$recid and format='$format'\n";
                    if (mysql_num_rows($res) != 0) {
                        $t1 = getmicrotime();
                        mysql_perform_query("
UPDATE bibfmt 
SET    format='$format',
       value='$value',
       last_updated=NOW()
WHERE  id_bibrec=$recid and 
       format='$format'");

                        $t2 = getmicrotime();
                        if (PRINTDB)
                            print ($t2-$t1)." update bibfmt set format='$format',".
                                "value='$value', last_updated=NOW()".
                                " where id_bibrec=$recid and format='$format'\n";
                    }
                    else {
                        $t1 = getmicrotime();
                        mysql_perform_query("
INSERT 
INTO   bibfmt(id_bibrec,format,value,last_updated)
values($recid,'$format','$value',NOW())");

                        $t2 = getmicrotime();
                        if (PRINTDB)
                            print ($t2-$t1)." insert into bibfmt(id_bibrec,format,".
                                "value, last_updated)values($recid,'$format','$value', NOW())\n";
                    }
                }
                else {
                    $format = $field->subfields[0]->value;
                    $t1 = getmicrotime();
                    $res = mysql_perform_query("
DELETE 
FROM   bibfmt 
WHERE  id_bibrec=$recid and 
       format='$format'");

                    $t2 = getmicrotime();
                    if (PRINTDB)
                        print ($t2-$t1)." delete from bibfmt where id_bibrec=$recid".
                            " and format='$format'\n";
                }
            }

            else if (!FORMAT) {
                // main value
                if ($field->value != "") {
                    $fieldnumber = getNextFieldNumber($tablename,$recid);
                    $value = mysql_escape_string($field->value);
                    insertfield($fulltag,$value,$tablename,$recid,
                                $fieldnumber,$logfp);
                }
		
                // sub fields
                $nbsubfields = $field->nbsubfields;
                for ($k=0;$k<$nbsubfields;$k++) {
                    $subfield = $field->subfields[$k];
                    $subfieldcode = $subfield->subfieldcode;
                    $fulltag = "$tag$i1$i2$subfieldcode";
                    if ($subfield->value != "" and !in_array($fulltag,$strongtags)) {
                        if ($fieldnumber == "-1")
                            $fieldnumber = getNextFieldNumber($tablename,$recid);
                        $value = mysql_escape_string($subfield->value);
                        insertfield($fulltag,$value,$tablename,$recid,
                                    $fieldnumber,$logfp);
                    }
                }
            }
        }
    }

    // word file update
    if ($WORDFILEJOB && BIBWORDS) {
        system("$WORDFILEJOB del $recid > /dev/null 2>&1");
        system("$WORDFILEJOB add $recid > /dev/null 2>&1");
    }

    
    if(REPLACE && !$onlyFMT) {
        // insert xml full format
        insertFMTfield($recid);
    }

    if (!MUTE) {
        print "updated. [$recid]\n";
    }
}





function insertFMTfield($recid)
{
    global $xml;

    if ($recid != "000" && $recid != "") {
        // add sysno to xml record
        $xml = ereg_replace("<record([^>]*)>","<record\\1>\n<controlfield tag=\"001\">$recid</controlfield>",$xml);
    }

    $format = "xm";
    $value = mysql_escape_string(gzcompress(utf8_encode($xml)));
    $t1 = getmicrotime();
    $res = mysql_perform_query("
SELECT id 
FROM   bibfmt 
WHERE  id_bibrec=$recid and 
       format='xm'");

    $t2 = getmicrotime();
    if (PRINTDB)
        print ($t2-$t1)." select id from bibfmt where ".
            "id_bibrec=$recid and format='xm'\n";
    if (mysql_num_rows($res) != 0) {
        $t1 = getmicrotime();
        mysql_perform_query("
UPDATE bibfmt 
SET    format='xm',
       value='$value',
       last_updated=NOW()
WHERE  id_bibrec=$recid and 
       format='xm'");
        
        $t2 = getmicrotime();
        if (PRINTDB)
            print ($t2-$t1)." update bibfmt set format='xm',".
                "value='$value', last_updated=NOW() where id_bibrec=$recid and ".
                                "format='xm'\n";
    }
    else {
        $t1 = getmicrotime();
        mysql_perform_query("
INSERT 
INTO   bibfmt(id_bibrec,format,value,last_updated)
values($recid,'xm','$value',NOW())");
        
        $t2 = getmicrotime();
        if (PRINTDB)
            print ($t2-$t1)." insert into bibfmt(id_bibrec,format,".
                "value,last_updated)values($recid,'xm','$value',NOW())\n";
    }   
}






function insertfield($fulltag,$value,$tablename,$recid,$position,$logfp)
{
   $t1 = getmicrotime();
   $res = mysql_perform_query("
SELECT id 
FROM   $tablename 
WHERE  tag='$fulltag' and 
       value='$value'");

   $t2 = getmicrotime();
   if (PRINTDB)
      print ($t2-$t1)." select id from $tablename where tag='$fulltag' and".
         " value='$value'\n";

   if (!$res)
      print "failed query: select id from $tablename where tag='$fulltag' ".
         "and value='$value'\n";

   # if an entry already exists with this couple tag/value
   if ($res && $row = mysql_fetch_row($res))
   {
      $idbibxxx = "$row[0]";
   }
   # else we create it
   else
   {
      #create
      $t1 = getmicrotime();
      $query = "INSERT INTO $tablename (tag,value) VALUES ('$fulltag','$value')";
      if (PRINTDB)
          print "Query: $query ... \n";
      mysql_perform_query($query);
      $t2 = getmicrotime();
      if (PRINTDB)
      print "  Query took: ".($t2-$t1)." seconds.\n";
      #get the id back
      $idbibxxx = mysql_insert_id();
   }

   #then create the bibrec_bibxxx entry with position number
   $t1 = getmicrotime();
   $query = "INSERT INTO bibrec_$tablename VALUES ($recid,$idbibxxx,$position)";
   if (PRINTDB)
       print "Query: $query ...\n";
   mysql_perform_query($query);
   $t2 = getmicrotime();
   if (PRINTDB)
   print "  Query took: ".($t2-$t1)." seconds.\n";
}
	






function display($rec)
{
   global $nbRecords;

   #for each field
   $nbfields = $rec->nbfields;
   print "\n\nRecord $nbRecords: $nbfields fields\n";

   for ($j=0;$j<=$nbfields;$j++)
   {
      if ($rec->fields[$j])
      {	
         $field = $rec->fields[$j];
         $tag = $field->type;
         $i1 = $field->i1;
         $i2 = $field->i2;
         $tablenumber = substr($tag,0,2);
         $tablename = "bib" . $tablenumber . "x"; 
		
         print "field $j: $tag$i1$i2\n"; 

         #main value
         if ($field->value != "")
         {
            $fulltag = "$tag${i1}${i2}_";
            $value = $field->value;
            print "		main value: $value\n";
         }
		
         #sub fields
         $nbsubfields = $field->nbsubfields;
         if ($nbsubfields != 0)
         {
            for ($k=0;$k<$nbsubfields;$k++)
            {
               $subfield = $field->subfields[$k];
               $subfieldcode = $subfield->subfieldcode;
               print "		subfield $k: ($subfieldcode) " . 
                  $subfield->value . "\n";
            }
         }
      }
   }
}


function parse_command($argv)
{
   global $recordfiles;

   $i = 1;
   if (count($argv) <= 1)
   {
      print "Bad parameter count!\n";
      displayhelp();
      exit;
   }
   else
   {
      while (substr($argv[$i],0,1) == "-")
      {
         if ($argv[$i] == "-h" || $argv[$i] == "--help")
         {
            displayhelp();
            exit;
         }
         else if ($argv[$i] == "-d" || $argv[$i] == "--display")
            define("DISPLAY", TRUE );
         else if ($argv[$i] == "-b" || $argv[$i] == "--database")
            define("PRINTDB", TRUE );
         else if ($argv[$i] == "-m" || $argv[$i] == "--mute")
            define("MUTE",TRUE);
         else if ($argv[$i] == "-w" || $argv[$i] == "--bibwords")
            define("BIBWORDS",TRUE);
         else if ($argv[$i] == "-r" || $argv[$i] == "--replace")
            define("REPLACE",TRUE);
         else if ($argv[$i] == "-a" || $argv[$i] == "--append")
            define("APPEND",TRUE);
         else if ($argv[$i] == "-c" || $argv[$i] == "--correct")
            define("CORRECT",TRUE);
         else if ($argv[$i] == "-f" || $argv[$i] == "--format")
            define("FORMAT",TRUE);
         else
         {
            print "Unrecognized option " . $argv[$i] . "!\n";
            displayhelp();
            exit;
         }
         $i++;
      }
   }

   if (!defined("DISPLAY"))
      define("DISPLAY", FALSE );
   if (!defined("PRINTDB"))
      define("PRINTDB", FALSE );
   if (!defined("MUTE"))
      define("MUTE",FALSE);
   if (!defined("BIBWORDS"))
      define("BIBWORDS",FALSE);
   if (!defined("REPLACE"))
      define("REPLACE",FALSE);
   if (!defined("APPEND"))
      define("APPEND",FALSE);
   if (!defined("FORMAT"))
      define("FORMAT",FALSE);
   if (!APPEND && !REPLACE && !FORMAT && !defined("CORRECT"))
       define("CORRECT",TRUE);
   else
       define("CORRECT",FALSE);

   if ( REPLACE + APPEND + CORRECT + FORMAT > 1 ) {
       print "\nYou can only specify ONE update mode!\n\n";
       displayHelp();
       exit;
   }

   $recordfiles = array_slice($argv, $i);
   if (!count($recordfiles)) 
   {
      print "\nMissing filename!\n\n";
      displayhelp();
      exit;
   }

}
	
function displayhelp()
{
   print "Usage: bibupload [options] file1.xml [file2.xml ...]
  Options: 
       -h, --help      print this help
       -d, --display   display records analysis - no integration
       -b, --database  display integration requests - integration
       -m, --mute      Silent mode.
       -w, --bibwords  call bibwords on integration or modification
		       of a record.

  Update Modes:
       -r, --replace   \"Replace\" mode (the existing record is deleted
                       and fully replaced by the new one).
       -a, --append    \"Append\" mode (the new fields are appended to
                       the existing record).
       -c, --correct   \"Correct\" mode (only the corrected lines are 
                       deleted and replaced by the new ones). This is 
                       the default mode
       -f, --format    \"Format\" update mode. Takes only the FMT fields into
                       account. Does not update the modification stamp
                       either.\n";
}

function insert ($rec)
{
    global $nbRecords, $nbFoundRecords, $xml;

    // get sysno
    $recid = $rec->recid;

    if ($recid == "000") {

        // test on A300 system number
        $oldsysno = $rec->get_subfield("909","C","0","o");
        $oldsysnoExists = Test_In_DB($oldsysno,"909C0o","bib90x");
        if ($oldsysnoExists)
            $recid = $oldsysnoExists;
        else {
            // test on A500 system number
            $oldsysno = $rec->get_subfield("970","_","_","a");
            $oldsysnoExists = Test_In_DB($oldsysno,"970__a","bib97x");
            if ($oldsysnoExists)
                $recid = $oldsysnoExists;
            else {
                // test on the ER field
                $er = $rec->get_subfield("037","_","_","a");
                $ERExists = Test_In_DB($er,"037__a","bib03x");
                if ($ERExists)
                    $recid = $ERExists;
            }
        }
	
        // display record name
        if (!MUTE) {
            if ($er) {
                print ("Record $er ");
            } else {
                print ("Record #".($nbRecords+1)." ");
            }
        }

        if ($recid != "000") {
            // this is an update
            if (DISPLAY)
                display($rec);
            else
                update($rec,$recid,$logfp);
            $nbFoundRecords++;
        }
        else {
            // this is an insert
            if (DISPLAY)
                display($rec);
            else if (!FORMAT)
                if (CORRECT || REPLACE) {
                    print ("Error: Cannot update record. Record not found");
                }
                else {
                    integrate($rec,$logfp);
                }
        }
    }
    else {
        // this is an update
        if (!MUTE) {
            if ($er) {
                print ("Record $er ");
            } else {
                print ("Record #".($nbRecords+1)." ");
            }        
        }
        if (DISPLAY)
            display($rec);
        else
            update($rec,$recid,$logfp);
    }
}

function get_next_record($fp)
{
   static $line = ""; // needed static so as to preserve line between successive calls to get_next_record()
   $xmlrecord = "";

   // get begining of next record
   $line = stristr($line,"</record"); // useful if there were more records in the same line
   while (!stristr($line,"<record") && !feof($fp)) 
      $line = fgets($fp, 4096);

   // if the end of the file is reached without finding any record
   if (feof($fp))
      return "";

   // get full record 
   $line = stristr($line,"<record"); // continue after the above "<record" match only
   $xmlrecord = $line;
   while (!stristr($line,"</record>") && !feof($fp))
   {
      $line = fgets($fp, 4096);
      $xmlrecord .= $line;
   }

   return $xmlrecord;
}


function getmicrotime()
{ 
   list($usec, $sec) = explode(" ",microtime()); 
   return ((float)$usec + (float)$sec); 
}  

function formatfield($field)
{
   #$field = str_replace("&","\046",$field);
   #$field = str_replace("&amp;","&",$field);
   #$field = str_replace("&","&amp;",$field);
#    // Get rid of control characters
#    $field = str_replace("\001","",$field);
#    $field = str_replace("\002","",$field);
#    $field = str_replace("\003","",$field);
#    $field = str_replace("\004","",$field);
#    $field = str_replace("\005","",$field);
#    $field = str_replace("\006","",$field);
#    $field = str_replace("\007","",$field);
#    $field = str_replace("\010","",$field);
#    $field = str_replace("\013","",$field);
#    $field = str_replace("\014","",$field);
#    $field = str_replace("\016","",$field);
#    $field = str_replace("\017","",$field);
#    $field = str_replace("\020","",$field);
#    $field = str_replace("\021","",$field);
#    $field = str_replace("\022","",$field);
#    $field = str_replace("\023","",$field);
#    $field = str_replace("\024","",$field);
#    $field = str_replace("\025","",$field);
#    $field = str_replace("\026","",$field);
#    $field = str_replace("\027","",$field);
#    $field = str_replace("\030","",$field);
#    $field = str_replace("\031","",$field);
#    $field = str_replace("\032","",$field);
#    $field = str_replace("\033","",$field);
#    $field = str_replace("\034","",$field);
#    $field = str_replace("\035","",$field);
#    $field = str_replace("\036","",$field);
#    $field = str_replace("\037","",$field);
   // UTF8 decode
   $field = utf8_decode($field);

   return $field;
}



///////////////////////////////////////////////////////////////////////
// MAIN SCRIPT                                                       //
///////////////////////////////////////////////////////////////////////

# Analyse of the command-line arguments
# This program should take the path to the record file as parameter
parse_command($argv);

global $EDS;

$maxfieldno = array();
$index = array();
$vals = array();
$starttime = getmicrotime();

// connect to mysql
$sock = @mysql_connect("${mysql_machine}","${mysql_docid}","${mysql_docpw}") 
   or die("Sorry, cannot connect to SQL server.\nPlease try later.\n");
@mysql_select_db(DOCS_DATABASE) 
   or die("Sorry, cannot choose ".DOCS_DATABASE." database.  Please try later.\n");
	
$errorfp = fopen("php://stderr","w");

$nbRecords = 0;
$nbFoundRecords = 0;

foreach ($recordfiles as $recordfile) {

     if (!file_exists("$recordfile"))
        $recordfile = $PWD."/$recordfile";
 
     #open xml file
     $fp = @fopen("$recordfile","r");
     if (!$fp)
     {
         print "Error: cannot localize and/or open file '$recordfile' for reading.  Ignored.\n";
     }
     else {
         if (!MUTE)
             print "\nInput file: $recordfile\n";
         
         $xml = "";
         $xml = get_next_record($fp);
         
         while ($xml != "") {
             $i = 0;
             
             $xml = formatfield($xml);
             
             // create XML structure
             $p = xml_parser_create();
             xml_parser_set_option($p, XML_OPTION_SKIP_WHITE, 1); 
             xml_parse_into_struct($p,$xml,$index,$vals);
             xml_parser_free($p);
             $nbTags = count($index);
             
             // record creation
             $rec = new record();
             
             if ($rec->valid) {
                 insert($rec);
             }
             else
                 fwrite($errorfp,$xml."\n\n");
             
             unset($rec);
             unset($maxfieldno);
             
             $nbRecords++;
             
             $xml = get_next_record($fp);		
         }	
         
         fclose($fp);
     }
}	
	
if(!MUTE)
{
   print "\nIdentified: $nbRecords records\n";
   print "Updated: $nbFoundRecords records\n";
   print "Inserted: ".($nbRecords-$nbFoundRecords)." records ";

   $endtime = getmicrotime();
   $time = $endtime - $starttime;
   $meantreatment = ($nbRecords != 0 ? ($time/$nbRecords) : "-");
   print "in $time seconds\n";
   printf("Average record treatment time: %.2f seconds", $meantreatment);
}
	
	
?>

</protect>
