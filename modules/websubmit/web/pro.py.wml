## $Id$
## CDSware WebSubmit in mod_python.

## This file is part of the CERN Document Server Software (CDSware).
## Copyright (C) 2002 CERN.
##
## The CDSware is free software; you can redistribute it and/or
## modify it under the terms of the GNU General Public License as
## published by the Free Software Foundation; either version 2 of the
## License, or (at your option) any later version.
##
## The CDSware is distributed in the hope that it will be useful, but
## WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
## General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with CDSware; if not, write to the Free Software Foundation, Inc.,
## 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

## read config variables:
#include "config.wml"
#include "configbis.wml"

## start Python:
<protect>## $Id$</protect>
<protect>## DO NOT EDIT THIS FILE! IT WAS AUTOMATICALLY GENERATED FROM CDSware WML SOURCES.</protect>
"""CDSware Submission Web Interface."""

## fill config variables:
pylibdir = "<LIBDIR>/python"
<protect>
## import interesting modules:
try:
    import string
    import os
    import sys
    import time
    import types
    import re
    import MySQLdb
except ImportError, e:
    print "Error: %s" % e
    import sys
    sys.exit(1)

try:
    sys.path.append('%s' % pylibdir)
    from cdsware.config import *
    from cdsware.dbquery import run_sql
    from cdsware.access_control_engine import acc_authorize_action
    from cdsware.websubmit_config import *
    #import cdsware.websubmit_functions
    from cdsware.specialchars import *
    from cdsware.webpage import page, create_error_box
    from cdsware.webuser import getUid, get_email
    from cdsware.messages import *
except ImportError, e:
    print "Error: %s" % e
    import sys
    sys.exit(1)

#globals
rn=""
sysno=""
dismode=""
curdir=""
uid = ""
uid_email = ""
last_step = ""
action_score = ""

def index(req,c=cdsname,ln=cdslang, doctype="", act="", startPg=1, indir="", access="",mainmenu="",fromdir="",file="",nextPg="",nbPg="",curpage=1,step=1,mode="U"):
    global rn,sysno,dismode,curdir,uid,uid_email,lats_step,action_score
    dismode = mode
    ln = wash_language(ln)
    sys.stdout = req
    t=""
    # get user ID:
    try:
        uid = getUid(req)
        uid_email = get_email(uid)
    except MySQLdb.Error, e:
        return page(title=msg_internal_error[ln],
                    body = create_error_box(req, verbose=0, ln=ln),
                    description="%s - Internal Error" % cdsname, 
                    keywords="%s, CDSware, Internal Error" % cdsname,
                    language=ln,
                    urlargs=req.args)
    # Preliminary tasks
    # check that the user is logged in
    if uid_email == "" or uid_email == "guest":
        return warningMsg("<center><font color=red>Sorry, you must log in to perform this action. Please use the top right menu to do so.</font></center>",req,cdsname,ln)
    # check we have minimum fields
    if doctype=="" or act=="" or access=="":
        return errorMsg("invalid parameter",req,cdsname,ln)
    # retrieve the action and doctype data
    if indir == "":
        res = run_sql("select dir from sbmACTION where sactname='%s'" % act)
        if len(res) == 0:
            return errorMsg("cannot find submission directory",req,cdsname,ln)
        else:
            row = res[0]
            indir = row[0]
    # The following words are reserved and should not be used as field names
    reserved_words = ["stop","file","nextPg","startPg","access","curpage","nbPg","act","indir","doctype","mode","step","deleted","file_path","userfile_name"]
    # This defines the path to the directory containing the action data
    curdir = "%s/%s/%s/%s" % (storage,indir,doctype,access)
    # If the submission directory still does not exist, we create it
    if not os.path.exists(curdir):
        try:
            os.makedirs(curdir)
        except:
            return errorMsg("can't create submission directory",req,cdsname,ln)
    # retrieve the original main menu url ans save it in the "mainmenu" file
    if mainmenu != "":
        fp = open("%s/mainmenu" % curdir,"w+")
        fp.write(mainmenu)
        fp.close()
    # and if the file containing the URL to the main menu exists
    # we retrieve it and store it in the $mainmenu variable
    if os.path.exists("%s/mainmenu" % curdir):
        fp = open("%s/mainmenu" % curdir,"r");
        mainmenu = fp.read()
        fp.close()
    else:
        mainmenu = urlpath;
    # retrieve the name of the file in which the reference of 
    # the submitted document will be stored
    res = run_sql("SELECT value FROM sbmPARAMETERS WHERE  doctype='%s' and name='edsrn'" % doctype)
    if len(res) == 0:
        edsrn = ""
    else:
        edsrn = res[0][0]
    # Now we test whether the user has already completed the action and
    # reloaded the page (in this case we don't want the functions to be called
    # once again
    reloaded = Test_Reload(uid_email,doctype,act,access)
    # if the action has been completed
    #if reloaded:
    #    return warningMsg("<b> Sorry, this action has already been completed. Please go back to the main menu to start a new action.</b>",req)
    # We must determine if the action is finished (ie there is no other steps after the current one
    res = run_sql("SELECT step FROM sbmFUNCTIONS WHERE  action='%s' and doctype='%s' and step > %s" % (act,doctype,step))
    if len(res) == 0:
        finished = 1
    else:
        finished = 0
    # Save the form fields entered in the previous submission page
    # If the form was sent with the GET method
    form = req.form
    value = ""
    # we parse all the form variables
    for key in form.keys():
        formfields = form[key]
        if re.search("\[\]",key):
            filename = key.replace("[]","")
        else:
            filename = key
        # the field is an array
        if isinstance(formfields,types.ListType):
            fp = open("%s/%s" % (curdir,filename),"w+")
            for formfield in formfields:
                #stripslashes(value)
                value = specialchars(formfield)
                fp.write(value+"\n")
            fp.close()
        # the field is a normal string
        elif isinstance(formfields,types.StringTypes) and formfields != "":
            value = formfields
            fp = open("%s/%s" % (curdir,filename),"w+")
            fp.write(specialchars(value))
            fp.close()
        # the field is a file
        elif hasattr(formfields,"filename"):
            if not os.path.exists("%s/files/%s" % (curdir,key)):
                try:
                    os.makedirs("%s/files/%s" % (curdir,key))
                except:
                    return errorMsg("can't create submission directory",req,cdsname,ln)
            filename = formfields.filename
            if filename != "":
                # This may be dangerous if the file size is bigger than the available memory
                data = formfields.file.read()
                fp = open("%s/files/%s/%s" % (curdir,key,filename),"w")
                fp.write(data)
                fp.close()
                fp = open("%s/lastuploadedfile" % curdir,"w+")
                fp.write(filename)
                fp.close()
                fp = open("%s/%s" % (curdir,key),"w+")
                fp.write(filename)
                fp.close()
        # if the found field is the reference of the document
        # we save this value in the "journal of submissions"
        if authentication and uid_email != "" and uid_email != "guest":
            if key == edsrn:
                run_sql("UPDATE sbmSUBMISSIONS SET reference='%s' WHERE  doctype='%s' and id='%s' and email='%s'" % (value,doctype,access,uid_email))
        # Now deal with the cookies
        # If the fields must be saved as a cookie, we do so
        # In this case, the value of the field will be retrieved and 
        # displayed as the default value of the field next time the user
        # does a submission    
        if value!="":
            res = run_sql("SELECT cookie FROM sbmFIELDDESC WHERE  name='%s'" % key)
            if len(res) > 0:
                if res[0][0] == 1:
                    setCookie(key,value,uid)
    # those fields are necessary for the navigation
    t=t+"<FORM ENCTYPE=\"multipart/form-data\" action=\"pro.py\" method=\"POST\">\n"
    t=t+"<INPUT type=\"hidden\" name=\"file\" value=\"%s\">\n" % file
    t=t+"<INPUT type=\"hidden\" name=\"nextPg\" value=\"%s\">\n" % nextPg
    t=t+"<INPUT type=\"hidden\" name=\"startPg\" value=\"%s\">\n" % startPg
    t=t+"<INPUT type=\"hidden\" name=\"access\" value=\"%s\">\n" % access
    t=t+"<INPUT type=\"hidden\" name=\"curpage\" value=\"%s\">\n" % curpage
    t=t+"<INPUT type=\"hidden\" name=\"nbPg\" value=\"%s\">\n" % nbPg
    t=t+"<INPUT type=\"hidden\" name=\"doctype\" value=\"%s\">\n" % doctype
    t=t+"<INPUT type=\"hidden\" name=\"act\" value=\"%s\">\n" %act
    t=t+"<INPUT type=\"hidden\" name=\"indir\" value=\"%s\">\n" % indir
    t=t+"<INPUT type=\"hidden\" name=\"fromdir\" value=\"\">\n"
    t=t+"<INPUT type=\"hidden\" name=\"mainmenu\" value=\"%s\">\n" % mainmenu
    # parameters for new MESS end scripts
    t=t+"<INPUT type=\"hidden\" name=\"mode\" value=\"U\">\n"
    t=t+"<INPUT type=\"hidden\" name=\"step\" value=\"1\">\n"
    t=t+"<INPUT type=\"hidden\" name=\"deleted\" value=\"no\">\n"
    t=t+"<INPUT type=\"hidden\" name=\"file_path\" value=\"\">\n"
    t=t+"<INPUT type=\"hidden\" name=\"userfile_name\" value=\"\">\n"
    # Get document name
    res = run_sql("SELECT ldocname FROM sbmDOCTYPE WHERE  sdocname='%s'" % doctype)
    if len(res) > 0:
       docname = res[0][0]
    else:
        return errorMsg("unknown type of document",req,cdsname,ln)
    # Get action name
    res = run_sql("SELECT lactname FROM sbmACTION WHERE  sactname='%s'" % act)
    if len(res) > 0:
       actname = res[0][0]
    else:
        return errorMsg("unknown action",req,cdsname,ln)
    # Get number of pages
    res = run_sql("SELECT nbpg FROM sbmIMPLEMENT WHERE  subname='%s%s'" % (act,doctype))
    if len(res) > 0:
       nbpages = res[0][0]
    else:
        return errorMsg("this action does not apply on this type of document",req,cdsname,ln)
    # Display table header
    t=t+"<center><TABLE cellspacing=0 cellpadding=0 border=0><TR>"
    t=t+"   <TD class=submitHeader><B>%s&nbsp;</B></TD>" % docname
    t=t+"   <TD class=submitHeader><small>&nbsp;%s&nbsp;</small></TD>" % actname
    t=t+"""
    <TD valign=bottom>
        <TABLE cellspacing=0 cellpadding=0 border=0 width=100%>
        <TR><TD class=submitEmptyPage>&nbsp;&nbsp;</TD>"""
    if finished == 1:
        t=t+"<TD class=submitCurrentPage>finished!</TD><TD class=submitEmptyPage>&nbsp;&nbsp;</TD></TR></TABLE></TD>\n"
        t=t+"<TD class=submitEmptyPage align=right>&nbsp;</TD>\n"
    else: 
        for i in range(1,nbpages+1):
            t=t+"<TD class=submitPage><small>&nbsp;<A HREF='' onClick=\"document.forms[0].curpage.value=%s;document.forms[0].action='Main.py';document.forms[0].submit();return false;\">%s</A>&nbsp;</small></TD>" % (i,i)
        t=t+"<TD class=submitCurrentPage>end of action</TD><TD class=submitEmptyPage>&nbsp;&nbsp;</TD></TR></TABLE></TD>\n"
        t=t+"<TD class=submitHeader align=right>&nbsp;<A HREF='' onClick=\"window.open('summary.py?doctype=%s&act=%s&access=%s&indir=%s','summary','scrollbars=yes,menubar=no,width=500,height=250');return false;\"><font color=white><small>SUMMARY(2)</small></font></A>&nbsp;</TD>\n" % (doctype,act,access,indir)
    t=t+"</TR>\n"
    # Display main cell
    t=t+"<TR>\n"
    t=t+"    <TD colspan=5 class=submitBody>\n"
    t=t+"        <small><BR><BR>\n"
    # we specify here whether we are in the last step of the action or not
    res = run_sql("SELECT step FROM   sbmFUNCTIONS WHERE  action='%s' and doctype='%s' and step>%s" % (act,doctype,step))
    if len(res) == 0:
        last_step = 1
    else:
        last_step = 0
    # Prints the action details, returning the mandatory score
    action_score = action_details(doctype,act)
    current_level = get_level(doctype, act)
    # Calls all the function's actions
    try:
        t=t+print_function_calls(doctype, act, step, form) 
    except functionError,e:
        return errorMsg(e.value,req)
    except functionStop,e:
        if e.value != None:
            t=t+e.value
        else:
            t=t+e
    # If the action was mandatory we propose the next mandatory action (if any)
    if action_score != -1 and last_step == 1:
        t=t+Propose_Next_Action(doctype,action_score,access,current_level,indir)
    # If we are in the last step of an action, we can update the "journal of submissions"
    if last_step == 1:
        if uid_email != "" and uid_email != "guest" and rn != "":
            res = run_sql("SELECT * FROM sbmSUBMISSIONS WHERE  doctype='%s' and action='%s' and id='%s' and email='%s'" % (doctype,act,access,uid_email))
            if len(res) == 0:
                run_sql("INSERT INTO sbmSUBMISSIONS values('%s','%s','%s','finished','%s','%s',NOW(),NOW())" % (uid_email,doctype,act,access,rn))
            else:
               run_sql("UPDATE sbmSUBMISSIONS SET md=NOW(),reference='%s',status='finished' WHERE  doctype='%s' and action='%s' and id='%s' and email='%s'" % (rn,doctype,act,access,uid_email))
    t=t+"""    <BR><BR>
        </TD>
    </TR>
    <TR class=submitHeader>
        <TD class=submitHeader colspan=5 align=center>"""
    if finished == 0:
        t=t+"<small>Submission no</small>&sup2;:\n"
        t=t+"<small>%s</small>\n" % access
    else:
        t=t+"&nbsp;\n"
    t=t+"""
        </TD>
    </TR>
    </TABLE>
    </center>
    </form>"""
    # Add the "back to main menu" button
    if finished == 0:
        t=t+ "    <A HREF=\"%s\" onClick=\"return confirm('Are you sure you want to quit this submission?')\">\n" % mainmenu
    else:
        t=t+"    <A HREF=\"%s\">\n" % mainmenu
    t=t+"<IMG SRC=\"%s/mainmenu.gif\" border=0 ALT=\"back to main menu\" align=\"right\"></A><BR><BR>\n" % images

    # start display:
    req.content_type = "text/html"
    req.send_http_header()
    
    return page(title="%s of %s" % (actname,docname),
                    body=t,
                    description="",
                    keywords="",
                    uid=uid,
                    language=ln,
                    urlargs=req.args)
    
def set_report_number (newrn):
        global uid_email,doctype,access,rn
        # First we save the value in the global object
        rn = newrn
        # then we save this value in the "journal of submissions"
        if uid_email != "" and uid_email != "guest":
            run_sql("UPDATE sbmSUBMISSIONS SET reference='%s' WHERE  doctype='%s' and id='%s' and email='%s'" % (newrn,doctype,access,uid_email))
    
def get_report_number():
    global rn
    return rn
    
def set_sysno (newsn) :
    global sysno
    sysno = newsn
    
def get_sysno() :
    global sysno
    return sysno

def Request_Print(m, txt):
    # The argumemts to this function are the display mode (m) and the text to be displayed (txt)
    # If the argument mode is 'ALL' then the text is unconditionally echoed
    # m can also take values S (Supervisor Mode) and U (User Mode). In these
    # circumstances txt is only echoed if the argument mode is the same as
    # the current mode
    global dismode
    if m == "A" or m == dismode:
        return txt
    else:
        return ""
    
def Evaluate_Parameter (field, doctype): 
    # Returns the literal value of the parameter. Assumes that the value is
    # uniquely determined by the doctype, i.e. doctype is the primary key in
    # the table
    # If the table name is not null, evaluate the parameter
    res = run_sql("SELECT value FROM sbmPARAMETERS WHERE  doctype = '%s' and name='%s'" % (doctype,field))
    # If no data is found then the data concerning the DEF(ault) doctype is used
    if len(res) == 0:
        res = run_sql("SELECT value FROM sbmPARAMETERS WHERE doctype = 'DEF' and name='%s'" % field)
    if len(res) == 0:
        return ""
    else:
        if res[0][0] != None:
            return res[0][0]
        else:
            return ""

def Get_Parameters (function, doctype):
    # Returns the function parameters, in an array, for the function
    # Gets a description of the parameter
    parray = {}
    res = run_sql("SELECT * FROM sbmFUNDESC WHERE  function = '%s' " % function)
    for i in range(0,len(res)):
        parameter = res[i][1]
        parray[parameter] = Evaluate_Parameter (parameter , doctype)
    return parray

def get_level (doctype, action):
    res = run_sql("SELECT * FROM   sbmIMPLEMENT  WHERE  docname = '%s' and actname = '%s'" % (doctype,action))
    if len(res) > 0:
        return res[0][9]
    else:
        return 0

def action_details (doctype, action):
    # Prints whether the action is mandatory or optional. The score of the
    # action is returned (-1 if the action was optional)
    res = run_sql("SELECT * FROM sbmIMPLEMENT WHERE  docname = '%s' and actname = '%s'" % (doctype,action))
    if len(res)>0:
        if res[0][9] != "0":
            return res[0][10]
        else:
            return -1
    else:
        return -1
    
def print_function_calls (doctype, action, step, form):
    # Calls the functions required by an "action" action on a "doctype" document
    # In supervisor mode, a table of the function calls is produced
    global htdocsdir,storage,access,pylibdir
    t=""
    # Get the list of functions to be called
    res = run_sql("SELECT * FROM sbmFUNCTIONS WHERE  action='%s' and doctype = '%s' and step = %s ORDER BY score" % (action,doctype,step))
    # If no data is found then the data concerning the DEF(ault) doctype is used
    if len(res) == 0:
        res = run_sql("SELECT * FROM sbmFUNCTIONS WHERE  action='%s' and doctype = 'DEF' and step = %s ORDER BY score" % (action,step))
    if len(res) > 0:
        t=t+Request_Print("S",  "<br><br>Here is the %s function list for %s documents at level %s <P>" % (action,doctype,step))
        t=t+Request_Print("S", "<table border cellpadding = 15><tr><th>Function</th><th>Score</th><th>Running Function</th></tr>")
        # while there are functions left...    
        for  function in res:
            function_name = function[2]
            function_score = function[3]
            if os.path.exists("%s/cdsware/websubmit_functions/%s.py" % (pylibdir,function_name)):
                t=t+Request_Print("S", "<tr><td>%s</td><td>%s</td><td>" % (function_name,function_score))
                # import the function itself
                #function = getattr(cdsware.websubmit_functions, function_name)
                execfile("%s/cdsware/websubmit_functions/%s.py" % (pylibdir,function_name),globals())
                if not globals().has_key(function_name):
                    t=t+"function %s does not exist...<br>" % function_name
                else:
                    function = globals()[function_name]
                    # Evaluate the parameters, and place them in an array     
                    parameters = Get_Parameters(function_name,doctype)
                    # Call function
                    t=t+function(parameters,curdir,form)
                    t=t+Request_Print("S","</td></tr>")
            else:
                t=t+"function %s does not exist...<br>" % function_name
        t=t+Request_Print("S","</table>")
    else :
        t=t+Request_Print("S","<br><br><b>Your chosen action is not supported by the document</b>")
    return t

def Propose_Next_Action (doctype,action_score,access,currentlevel,indir):
    global machine,storage,act,rn
    t=""
    res = run_sql("SELECT * FROM sbmIMPLEMENT WHERE  docname = '%s' and level != '0' and level = '%s' and score > '%s' ORDER BY score" % (doctype,currentlevel,action_score))
    if len(res) > 0:
        t=t+Request_Print("A","<BR><BR>You now have to<ul>")
        first_score = res[0][10]
        for i in range(0,len(res)):
            action = res[i]
            if action[10] == first_score:
                if i > 0:
                    t=t+Request_Print("A"," <b>or</b>");
                res2 = run_sql("SELECT dir FROM sbmACTION WHERE  sactname='%s'" % action[1])
                nextdir = res2[0][0]
                t=t+Request_Print("A","<LI><A HREF=\"\" onClick=\"document.forms[0].action='Main.py';document.forms[0].curpage.value='%s';document.forms[0].startPg.value='%s';document.forms[0].act.value='%s';document.forms[0].doctype.value='%s';document.forms[0].indir.value='%s';document.forms[0].access.value='%s';document.forms[0].fromdir.value='%s';document.forms[0].submit();return false;\"> %s </a>" % (action[11],action[11],action[1],doctype,nextdir,access,indir,action[12]))
        t=t+Request_Print("A","</ul>")
    return t

def Test_Reload(uid_email,doctype,act,access):
    res = run_sql("SELECT * FROM sbmSUBMISSIONS WHERE  doctype='%s' and action='%s' and id='%s' and email='%s' and status='finished'" % (doctype,act,access,uid_email))
    if len(res) > 0:
        return 1
    else:
        return 0

def errorMsg(title,req,c=cdsname,ln=cdslang):
    return page(title="error",
                    body = create_error_box(req, title=title,verbose=0, ln=ln),
                    description="%s - Internal Error" % c, 
                    keywords="%s, CDSware, Internal Error" % c,
                    language=ln,
                    urlargs=req.args)

def warningMsg(title,req,c=cdsname,ln=cdslang):
    return page(title="warning",
                    body = title,
                    description="%s - Internal Error" % c, 
                    keywords="%s, CDSware, Internal Error" % c,
                    language=ln,
                    urlargs=req.args)
                    
class functionError(Exception):
    def __init__(self, value):
        self.value = value
    def __str__(self):
        return repr(self.value)
 
class functionStop(Exception):
    def __init__(self, value):
        self.value = value
    def __str__(self):
        return repr(self.value)

</protect>
