## $Id$
## CDSware WebSubmit in mod_python.

## This file is part of the CERN Document Server Software (CDSware).
## Copyright (C) 2002 CERN.
##
## The CDSware is free software; you can redistribute it and/or
## modify it under the terms of the GNU General Public License as
## published by the Free Software Foundation; either version 2 of the
## License, or (at your option) any later version.
##
## The CDSware is distributed in the hope that it will be useful, but
## WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
## General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with CDSware; if not, write to the Free Software Foundation, Inc.,
## 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

## read config variables:
#include "config.wml"
#include "configbis.wml"

## start Python:
<protect>## $Id$</protect>
<protect>## DO NOT EDIT THIS FILE! IT WAS AUTOMATICALLY GENERATED FROM CDSware WML SOURCES.</protect>
"""CDSware Submission Web Interface."""

## fill config variables:
pylibdir = "<LIBDIR>/python"
<protect>
## import interesting modules:
try:
    import string
    import os
    import sys
    import time
    import types
    import re
    import MySQLdb
except ImportError, e:
    print "Error: %s" % e
    import sys
    sys.exit(1)

try:
    sys.path.append('%s' % pylibdir)
    from cdsware.config import *
    from cdsware.dbquery import run_sql
    from cdsware.access_control_engine import acc_authorize_action
    from cdsware.access_control_admin import acc_isRole
    from cdsware.websubmit_config import *
    from cdsware.specialchars import *
    from cdsware.webpage import page, create_error_box
    from cdsware.webuser import getUid, get_email
    from cdsware.messages import *
except ImportError, e:
    print "Error: %s" % e
    import sys
    sys.exit(1)

def index(req,c=cdsname,ln=cdslang, doctype="", act="", startPg=1, indir="", access="",mainmenu="",fromdir="",file="",nextPg="",nbPg="",curpage=1):
    ln = wash_language(ln)
    sys.stdout = req
    # get user ID:
    try:
        uid = getUid(req)
        uid_email = get_email(uid)
    except MySQLdb.Error, e:
        return page(title=msg_internal_error[ln],
                    body = create_error_box(req, verbose=0, ln=ln),
                    description="%s - Internal Error" % cdsname, 
                    keywords="%s, CDSware, Internal Error" % cdsname,
                    language=ln,
                    urlargs=req.args)
    # variable initialisation
    t = ""
    field = []
    fieldhtml = []
    level = [] 
    fullDesc = []
    text = []
    check = []
    select = []
    radio = []
    upload = []
    txt = []
    noPage = []
    # Preliminary tasks
    # check that the user is logged in
    if uid_email == "" or uid_email == "guest":
        warningMsg("<center><font color=red>Sorry, you must log in to perform this action. Please use the top right menu to do so.</font></center>",req)
    # check we have minimum fields
    if doctype=="" or act=="" or access=="":
        return errorMsg("invalid parameter",req)
    # retrieve the action and doctype data
    if indir == "":
        res = run_sql("select dir from sbmACTION where sactname='%s'" % act)
        if len(res) == 0:
            return errorMsg("cannot find submission directory",req)
        else:
            row = res[0]
            indir = row[0]
    res = run_sql("SELECT ldocname FROM sbmDOCTYPE WHERE sdocname='%s'" % doctype)
    if len(res) == 0:
        return errorMsg("unknown document type",req)
    else:
        docname = res[0][0]
        docname = string.replace(docname," ","&nbsp;")
    res = run_sql("SELECT lactname FROM sbmACTION WHERE sactname='%s'" % act)
    if len(res) == 0:
        return errorMsg("unknown action",req)
    else:
        actname = res[0][0]
        actname = string.replace(actname," ","&nbsp;")
    res = run_sql("SELECT nbpg FROM sbmIMPLEMENT WHERE  subname='%s%s'" % (act,doctype))
    if len(res) == 0:
        return errorMsg("can't figure number of pages",req)
    else:
        nbpages = res[0][0]
    #Get current page
    if startPg != "" and (curpage=="" or curpage==0):
        curpage = startPg
    # retrieve the name of the file in which the reference of 
    # the submitted document will be stored
    res = run_sql("SELECT value FROM sbmPARAMETERS WHERE  doctype='%s' and name='edsrn'" % doctype)
    if len(res) == 0:
        edsrn = ""
    else:
        edsrn = res[0][0]
    # This defines the path to the directory containing the action data
    curdir = "%s/%s/%s/%s" % (storage,indir,doctype,access)
    # if this submission comes from another one ($fromdir is then set)
    # We retrieve the previous submission directory and put it in the proper one
    if fromdir != "":
        olddir = "%s/%s/%s/%s" % (storage,fromdir,doctype,access)
        if os.path.exists(olddir):
            os.rename(olddir,curdir)
    # If the submission directory still does not exist, we create it
    if not os.path.exists(curdir):
        try:
            os.makedirs(curdir)
        except:
            return errorMsg("can't create submission directory",req)
    # retrieve the original main menu url ans save it in the "mainmenu" file
    if mainmenu != "":
        fp = open("%s/mainmenu" % curdir,"w+")
        fp.write(mainmenu)
        fp.close()
    # and if the file containing the URL to the main menu exists
    # we retrieve it and store it in the $mainmenu variable
    if os.path.exists("%s/mainmenu" % curdir):
        fp = open("%s/mainmenu" % curdir,"r");
        mainmenu = fp.read()
        fp.close()
    else:
        mainmenu = urlpath;
    # various authentication related tasks...
    if uid_email != "guest" and uid_email != "":
        #First save the username (email address) in the SuE file. This way bibconvert will be able to use it if needed
        fp = open("%s/SuE" % curdir,"w+")
        fp.write(uid_email)
        fp.close()
    # is user authorized to perform this action?
    if acc_isRole("submit",doctype=doctype,act=act) and not acc_authorize_action(uid, "submit",verbose=0,doctype=doctype, act=act):
        return warningMsg("<center><font color=red>Sorry, user %s does not have the right to perform this action. Try logging with another user.</font></center>" % uid_email,req)
    # then we update the "journal of submission" 
    res = run_sql("SELECT * FROM sbmSUBMISSIONS WHERE  doctype='%s' and action='%s' and id='%s' and email='%s'" % (doctype,act,access,uid_email))
    if len(res) == 0:
        run_sql("INSERT INTO sbmSUBMISSIONS values ('%s','%s','%s','pending','%s','',NOW(),NOW())" % (uid_email,doctype,act,access))
    else:
        run_sql("UPDATE sbmSUBMISSIONS SET md=NOW() WHERE  doctype='%s' and action='%s' and id='%s' and email='%s'" % (doctype,act,access,uid_email))
    # Save the form fields entered in the previous submission page
    # If the form was sent with the GET method
    form = req.form
    value = ""
    # we parse all the form variables
    for key in form.keys():
        formfields = form[key]
        if re.search("\[\]",key):
            filename = key.replace("[]","")
        else:
            filename = key
        # the field is an array
        if isinstance(formfields,types.ListType):
            fp = open("%s/%s" % (curdir,filename),"w+")
            for formfield in formfields:
                #stripslashes(value)
                value = specialchars(formfield)
                fp.write(value+"\n")
            fp.close()
        # the field is a normal string
        elif isinstance(formfields,types.StringTypes) and formfields != "":
            value = formfields
            fp = open("%s/%s" % (curdir,filename),"w+")
            fp.write(specialchars(value))
            fp.close()
        # the field is a file
        elif hasattr(formfields,"filename"):
            if not os.path.exists("%s/files/%s" % (curdir,key)):
                try:
                    os.makedirs("%s/files/%s" % (curdir,key))
                except:
                    return errorMsg("can't create submission directory",req)
            filename = formfields.filename
            if filename != "":
                # This may be dangerous if the file size is bigger than the available memory
                data = formfields.file.read()
                fp = open("%s/files/%s/%s" % (curdir,key,filename),"w")
                fp.write(data)
                fp.close()
                fp = open("%s/lastuploadedfile" % curdir,"w+")
                fp.write(filename)
                fp.close()
                fp = open("%s/%s" % (curdir,key),"w+")
                fp.write(filename)
                fp.close()
        # if the found field is the reference of the document
        # we save this value in the "journal of submissions"
        if uid_email != "" and uid_email != "guest":
            if key == edsrn:
                run_sql("UPDATE sbmSUBMISSIONS SET reference='%s' WHERE  doctype='%s' and id='%s' and email='%s'" % (value,doctype,access,uid_email))
        # Now deal with the cookies
        # If the fields must be saved as a cookie, we do so
        # In this case, the value of the field will be retrieved and 
        # displayed as the default value of the field next time the user
        # does a submission    
        if value!="":
            res = run_sql("SELECT cookie FROM sbmFIELDDESC WHERE  name='%s'" % key)
            if len(res) > 0:
                if res[0][0] == 1:
                    setCookie(key,value,uid)
    # create interface
    # top menu
    t=t+"<br><br>"
    t=t+"<FORM method=\"POST\" action=\"Main.py\" onSubmit=\"return tester();\">"
    t=t+"<center><TABLE cellspacing=0 cellpadding=0 border=0><TR>"
    t=t+"   <TD class=submitHeader><B>%s&nbsp;</B></TD>" % docname
    t=t+"   <TD class=submitHeader><small>&nbsp;%s&nbsp;</small></TD>" % actname
    t=t+"""
    <TD valign=bottom>
        <TABLE cellspacing=0 cellpadding=0 border=0 width=100%>
        <TR><TD class=submitEmptyPage>&nbsp;&nbsp;</TD>"""
    for i in range(1,nbpages+1):
        if i == int(curpage):
            t=t+"<TD class=submitCurrentPage><small>&nbsp;page:%s&nbsp;</small></TD>" % curpage
        else:
            t=t+"<TD class=submitPage><small>&nbsp;<A HREF='' onClick=\"if (tester2() == 1){document.forms[0].curpage.value=%s;document.forms[0].submit();return false;} else { return false; }\">%s</A>&nbsp;</small></TD>" % (i,i)
    t=t+"<TD class=submitEmptyPage>&nbsp;&nbsp;</TD></TR></TABLE></TD>\n"
    t=t+"<TD class=submitHeader align=right>&nbsp;<A HREF='' onClick=\"window.open('summary.py?doctype=%s&act=%s&access=%s&indir=%s','summary','scrollbars=yes,menubar=no,width=500,height=250');return false;\"><font color=white><small>SUMMARY(2)</small></font></A>&nbsp;</TD>\n" % (doctype,act,access,indir)
    t=t+"</TR>"
    # main cell
    t=t+"<TR><TD colspan=5 class=submitHeader><TABLE border=0 cellspacing=0 cellpadding=15 width=\"100%\" class=submitBody><TR><TD><BR>"
    # display the static form fields
    t=t+"<INPUT type=\"hidden\" name=\"file\" value=\"%s\">\n" % file
    t=t+"<INPUT type=\"hidden\" name=\"nextPg\" value=\"%s\">\n" % nextPg
    t=t+"<INPUT type=\"hidden\" name=\"access\" value=\"%s\">\n" % access
    t=t+"<INPUT type=\"hidden\" name=\"curpage\" value=\"%s\">\n" % curpage
    t=t+"<INPUT type=\"hidden\" name=\"nbPg\" value=\"%s\">\n" % nbPg
    t = t +"<INPUT type=\"hidden\" name=\"doctype\" value=\"%s\">\n" % doctype
    t=t+"<INPUT type=\"hidden\" name=\"act\" value=\"%s\">\n" % act
    t=t+"<INPUT type=\"hidden\" name=\"indir\" value=\"%s\">\n" % indir
    t=t+"<INPUT type=\"hidden\" name=\"mode\" value=\"U\">\n"
    t=t+"<INPUT type=\"hidden\" name=\"step\" value=\"1\">\n"
    # For each field to be displayed on the page
    res = run_sql("SELECT * FROM sbmFIELD WHERE  subname='%s%s' and pagenb=%s ORDER BY fieldnb,fieldnb" % (act,doctype,curpage));
    nbFields = 0
    for arr in res:
        # We retrieve its HTML description
        res3 = run_sql("SELECT * FROM sbmFIELDDESC WHERE  name='%s'" % arr[3])
        arr3 = res3[0]
        # we also retrieve and add the javascript code of the checking function, if needed
        if arr[7] != '':
            res2 = run_sql("SELECT chdesc FROM sbmCHECKS WHERE  chname='%s'" % arr[7])
            t=t+"<SCRIPT LANGUAGE=\"JavaScript1.1\"  TYPE=\"text/javascript\">\n";
            t=t+res2[0][0]
            t=t+"</SCRIPT>\n"
        # If the field is a textarea
        if arr3[3] == 'T':
            text="<TEXTAREA name=\"%s\" rows=%s cols=%s>%s</TEXTAREA>" % (arr[3],arr3[5],arr3[6],arr3[8])
        # If the field is a file upload
        elif arr3[3] == 'F':
            text="<INPUT TYPE=file name=\"%s\" size=%s maxlength=%s>" % (arr[3],arr3[4],arr3[7]);
        # If the field is a text input
        elif arr3[3] == 'I':
            text="<INPUT name=\"%s\" size=%s value=\"%s\">" % (arr[3],arr3[4],arr3[8])
        # If the field is a hidden input
        elif arr3[3] == 'H':
            text="<INPUT type=\"hidden\" name=\"%s\" value=\"%s\">" % (arr[3],arr3[8])
        # If the field is user-defined
        elif arr3[3] == 'D':
            text=arr3[9]
        # If the field is a select box
        elif arr3[3] == 'S':
            text=arr3[9]
        # If the field is an evaluated script
        elif arr3[3] == 'R':
            text=eval(arr3[9])
        # If the field type is not recognized
        else:
            text="%s: unknown field type" % arr[1]
        # we now determine the exact type of the created field
        if arr3[3] not in [ 'D','R']:
            field.append(arr[3])
            level.append(arr[5])
            fullDesc.append(arr[4])
            txt.append(arr[6])
            check.append(arr[7])
            # If the field is not user-defined, we try to determine its type
            # (select, radio, file upload...)
            # check whether it is a select field or not
            if re.search("SELECT",text,re.IGNORECASE) != None:
                select.append(1)
            else:
                select.append(0)
            # checks whether it is a radio field or not
            if re.search("TYPE=radio",text,re.IGNORECASE) != None:
                radio.append(1)
            else:
                radio.append(0)
            # checks whether it is a file upload or not
            if re.search("TYPE=file",text,re.IGNORECASE) != None:
                upload.append(1)
            else:
                upload.append(0)
            # if the field description contains the "<COMBO>" string, replace
            # it by the category selected on the document page submission page
            combofile = "combo%s" % doctype
            if os.path.exists("%s/%s" % (curdir,combofile)):
                f = open("%s/%s" % (curdir,combofile),"r")
                combo = f.read()
                f.close()
            else:
                combo=""
            text = text.replace("<COMBO>",combo)
            # if there is a <YYYY> tag in it, replace it by the current year
            year = time.strftime("%Y");
            text = text.replace("<YYYY>",year)
            fieldhtml.append(text)
            # increment the fields counter
            nbFields = nbFields + 1
        else:
            #case of a user-defined field which contains multiple form fields
            formfields = text.split(">")
            for formfield in formfields:
                match = re.search("name=([^ <>]+)",formfield,re.IGNORECASE)
                if match != None:
                    names = match.groups()
                    for value in names:
                        if value != "":
                            value = re.compile("[\"']+").sub("",value)
                            select.append(0)
                            radio.append(0)
                            upload.append(0)
                            field.append(value)
                            level.append(arr[5])
                            txt.append(arr[6])
                            level.append(arr[5])
                            fullDesc.append(arr[4])
                            txt.append(arr[6])
                            check.append(arr[7])
                            fieldhtml.append(text)
                            nbFields = nbFields+1
        # now displays the html form field(s)
        t+="%s\n" % fullDesc[nbFields-1]
        t+=text+"\n"
    # if there is a file upload field, we change the encoding type
    t=t+"<SCRIPT LANGUAGE=\"JavaScript1.1\" TYPE=\"text/javascript\">\n"
    for i in range(0,nbFields):
        if upload[i] == 1:
            t=t+"document.forms[0].encoding = \"multipart/form-data\";\n"
    # we don't want the form to be submitted if the user enters 'Return'
    t=t+"function tester(){return false;}\n"
    # tests if mandatory fields are well filled
    t=t+"function tester2(){\n"
    for i in range(0,nbFields):
        if re.search("%s\[\]"%field[i],fieldhtml[i]):
            fieldname = "%s[]" % field[i]
        else:
            fieldname = field[i]
        t=t+"  el = document.forms[0].elements['%s'];\n" % fieldname
        # If the field must be checked we call the checking function 
        if check[i] != "":
            t=t+"if (%s(el.value)== 0){\n" % check[i]
            t=t+"    el.focus();\n"
            t=t+"    return 0;\n"
            t=t+"}\n"
        # If the field is mandatory, we check a value has been selected
        if level[i] == 'M':
            if select[i] != 0:
                # If the field is a select box
                t=t+"if ((el.selectedIndex == -1)||(el.selectedIndex == 0)){\n"
                t=t+"    alert(\"The field `%s` is Mandatory.\\n Please make a choice in the 'Select:' box\");\n" % txt[i]
                t=t+"    return 0;\n"
                t=t+"}\n"
            elif radio[i] != 0:
                # If the field is a radio buttonset
                t=t+"var check=0;\n"
                t=t+"for (var j=0;j<el.length;j++){\n"
                t=t+"    if (el.options[j].checked){check++;}\n"
                t=t+"}\n"
                t=t+"if (check == 0){\n"
                t=t+"    alert(\"Please press a button.\");\n"
                t=t+"    return 0;\n"
                t=t+"}\n"
            else:
                # If the field is a text input
                t=t+"if (el.value == ''){\n"
                t=t+"    alert(\"The field `%s` is Mandatory. Please fill it in.\");\n" % txt[i]
                t=t+"    return 0;\n"
                t=t+"}\n"
    t=t+"return 1;\n"
    t=t+"}\n"
    t=t+"</SCRIPT><BR>&nbsp;<BR>&nbsp;</TD></TR></TABLE></TD></TR>\n"
    # Display the navigation cell
    # Display "previous page" navigation arrows
    t=t+"<TR><TD colspan=5><TABLE border=0 cellpadding=0 cellspacing=0 width=\"100%\"><TR>\n"
    if int(curpage) != 1:
        t=t+"        <TD class=submitHeader align=left>&nbsp;\n"
        t=t+"            <A HREF='' onClick=\"if (tester2() == 1){document.forms[0].curpage.value=%s;document.forms[0].submit();return false;} else { return false; }\">" % (int(curpage)-1)
        t=t+"            <IMG SRC=\"%s/left-trans.gif\" alt=\"previous page\" border=0>\n" % images
        t=t+"            <strong><font color=white>previous page</A></font></strong></TD>\n"
    else:
        t=t+" <TD class=submitHeader>&nbsp;</TD>\n"
    # Display the submission number
    t=t+" <TD class=submitHeader align=center><small>Submission no(1): %s</small></TD>\n" % access
    # Display the "next page" navigation arrow
    if int(curpage) != int(nbpages):
        t=t+"        <TD class=submitHeader align=right>\n"
        t=t+"            <A HREF='' onClick=\"if (tester2()){document.forms[0].curpage.value=%s;document.forms[0].submit();return false;} else {return false;}; return false;\">\n" % (int(curpage)+1)
        t=t+"            <strong><font color=white> next page</font></strong>\n"
        t=t+"            <IMG SRC=\"%s/right-trans.gif\" alt=\"next page\" border=0></A>&nbsp;" % images
    else:
        t=t+" <TD class=submitHeader>&nbsp;</TD>\n"
    t=t+"</TR></TABLE></TD></TR></TABLE></center></FORM>"
    
    # # # # # # # # # # # # # # # # # # # # # # # # #
    # Fill the fields with the previously saved values
    # # # # # # # # # # # # # # # # # # # # # # # # #
    t=t+"<SCRIPT LANGUAGE=\"JavaScript1.1\" TYPE=\"text/javascript\">\n"
    t=t+"<!-- Fill the fields in with the previous saved values-->\n"
    # For each actual form field
    for i in range(0,nbFields): 
        if re.search("%s\[\]"%field[i],fieldhtml[i]):
            fieldname = "%s[]" % field[i]
        else:
            fieldname = field[i]
        text = ''
        # If a file exists with the name of the field we extract the saved value
        if os.path.exists("%s/%s" % (curdir,field[i])):
            file = open("%s/%s" % (curdir,field[i]),"r");
            text = file.read()
            text = re.compile("[\n\r]*$").sub("",text)
            text = re.compile("\n").sub("\\n",text)
            text = re.compile("\r").sub("",text)
            file.close()
        # Or if a cookie is set
        # If a cookie is found corresponding to the name of the current
        # field, we set the value of the field to the cookie's value
        elif getCookie(field[i],uid) != None:
            value = getCookie(field[i],uid)
            value = re.compile("\r").sub("",value)
            value = re.compile("\n").sub("\\n",value)
            text = value
        # If the value isn't empty
        if text != '':
            if select[i] != 0:
                # If the field is a SELECT element
                values = text.split("\n")
                tmp=""
                for val in values:
                    if tmp != "":
                        tmp = tmp + " || "
                    tmp = tmp + "el.options[j].value == \"%s\" || el.options[j].text == \"%s\"" % (val,val)
                if tmp != "":
                    t=t+"\n<!--SELECT field found-->\n"
                    t=t+"el = document.forms[0].elements['%s'];\n" % fieldname
                    t=t+"for (var j=0;j<el.length;j++){\n"
                    t=t+"    if (%s){\n" % tmp
                    t=t+"        el.options[j].selected = true;}}\n"
            elif radio[i] != 0:
                # If the field is a RADIO element
                t=t+"\n<!--RADIO field found-->\n"
                t=t+"el = document.forms[0].elements['%s'];\n" % fieldname
                t=t+"if (el.value == \"%s\"){\n" % text
                t=t+"    el.checked=true;}\n"
            elif upload[i] == 0:
                # If the field is not an upload element
                t=t+"\n<!--INPUT field found-->\n"
                t=t+"el = document.forms[0].elements['%s'];\n" % fieldname
                text = text.replace('"','\"')
                text = text.replace("\n","\\n")
                t=t+"el.value=\"%s\";\n" % text
    t=t+"<!--End Fill in section-->\n"

    # JS function finish
    # This function tests each mandatory field in the whole submission and checks whether
    # the field has been correctly filled in or not                
    # This function is called when the user presses the "End      
    # Submission" button                                           
    if int(curpage) == int(nbpages):
        t=t+"\n\nfunction finish() {\n"
        res = run_sql("SELECT * FROM sbmFIELD WHERE  subname='%s%s' and pagenb!=%s" % (act,doctype,curpage))
        nbFields=0
        message = ""
        select = []
        radio = []
        upload = []
        field = []
        level = []
        txt = []        
        for arr in res:
            if arr[5] == "M":
                res2 = run_sql("SELECT * FROM   sbmFIELDDESC WHERE  name='%s'" % arr[3]);
                row2 = res2[0]
                if row2[3] in ['D','R']:
                    if row2[3] == "D":
                        text = row2[9]
                    else:
                        text = eval(row2[9])
                    formfields = text.split(">")
                    for formfield in formfields:
                        match = re.match("name=([^ <>]+)",formfield,re.IGNORECASE)
                        if match != None:
                            names = match.groups
                            for value in names:
                                if value != "":
                                    value = re.compile("[\"']+").sub("",value)
                                    field.append(value)
                                    level.append(arr[5])
                                    txt.append(arr[6])
                                    noPage.append(arr[1])
                                    check.append(arr[7])
                                    nbFields = nbFields+1
                else:
                    noPage.append(arr[1])
                    field.append(arr[3])
                    level.append(arr[5])
                    txt.append(arr[6])
                    check.append(arr[7])
                    nbFields = nbFields+1
        # tests each mandatory field
        for i in range (0,nbFields):
            res = 1
            if not os.path.exists("%s/%s" % (curdir,field[i])):
                res=0
            else:
                file = open("%s/%s" % (curdir,field[i]),"r")
                text = file.read()
                if text == '':
                    res=0
                else:
                    if text == "Select:":
                        res=0
        if res==0:
            message = "    alert (\"The field '%s' is mandatory.\\nGoing back to page %s\");\n" % (txt[i],noPage[i])
            message = message + "    document.forms[0].curpage.value=\"%s\";\n" % noPage[i]
            message = message + "    document.forms[0].submit();\n"
        if message != "":
            t=t+message
        else:
            t=t+"if (tester2()){\n";
            t=t+"        document.forms[0].action=\"pro.py\";\n"
            t=t+"        document.forms[0].submit();\n"
            t=t+"        } \n"
            t=t+"        else \n"
            t=t+"        { \n"
            t=t+"        return false;\n"
            t=t+"        }\n"
            t=t+"}\n"
    t=t+"""
</SCRIPT>
<BR>
<BR>"""
    # Display the "back to main menu" button
    t=t+"<A HREF=\"%s\" onClick=\"return confirm('Are you sure you want to quit this submission?')\">\n" % mainmenu
    t=t+"<IMG SRC=\"%s/mainmenu.gif\" border=0 ALT=\"back to main menu\" align=right></A><BR><BR>\n" % images
    t=t+"""
<HR>
    <small>(1) you should take note of this number at the beginning of the submission, it will allow you to get your information back in case your browser crashes before the end of the submission.</small><BR>"""
    # Add the summary window definition if needed
    t=t+"    <small>(2) mandatory fields appear in red in the 'Summary' window.</small><BR>\n"

    # start display:
    req.content_type = "text/html"
    req.send_http_header()
    
    return page(title="%s of %s" % (actname,docname),
                    body=t,
                    description="",
                    keywords="",
                    uid=uid,
                    language=ln,
                    urlargs=req.args)
    
def errorMsg(title,req,c=cdsname,ln=cdslang):
    return page(title="error",
                    body = create_error_box(req, title=title,verbose=0, ln=ln),
                    description="%s - Internal Error" % c, 
                    keywords="%s, CDSware, Internal Error" % c,
                    language=ln,
                    urlargs=req.args)

def warningMsg(title,req,c=cdsname,ln=cdslang):
    return page(title="warning",
                    body = title,
                    description="%s - Internal Error" % c, 
                    keywords="%s, CDSware, Internal Error" % c,
                    language=ln,
                    urlargs=req.args)

def getCookie(name,uid):
    # these are not real http cookies but are stored in the DB
    res = run_sql("select value from sbmCOOKIES where uid=%s and name='%s'" % (uid,name))
    if len(res) > 0:
        return res[0][0]
    else:
        return None
    
def setCookie(name,value,uid):
    # these are not real http cookies but are stored in the DB
    res = run_sql("select id from sbmCOOKIES where uid=%s and name='%s'" % (uid,name))
    if len(res) > 0:
        run_sql("update sbmCOOKIES set value='%s' where uid=%s and name='%s'" % (value,uid,name))
    else:
        run_sql("insert into sbmCOOKIES(name,value,uid) values('%s','%s',%s)" % (name,value,uid))
    return 1
</protect>