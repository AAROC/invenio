# -*- coding: utf-8 -*-
##
## $Id$
##
## This file is part of CDS Invenio.
## Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008 CERN.
##
## CDS Invenio is free software; you can redistribute it and/or
## modify it under the terms of the GNU General Public License as
## published by the Free Software Foundation; either version 2 of the
## License, or (at your option) any later version.
##
## CDS Invenio is distributed in the hope that it will be useful, but
## WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
## General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with CDS Invenio; if not, write to the Free Software Foundation, Inc.,
## 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

"""
Invenio configuration CLI tool.

Usage: inveniocfg [options]

General options:
   -h, --help               print this help
   -V, --version            print version number

Options to update config files in situ:
   --generate-config-py     regenerate config.py file from invenio.conf file
   --update-dbquery-py      update dbquery.py with DB credentials from invenio.conf
   --update-dbexec          update dbexec with DB credentials from invenio.conf
   --update-bibconvert-tpl  update bibconvert templates with WEBURL from invenio.conf

Options to update DB tables:
   --reset-cdsname          reset tables to take account of new CDSNAME and CDSNAMEINTL
   --reset-adminemail       reset tables to take account of new ADMINEMAIL
"""

__revision__ = "$Id$"

from ConfigParser import ConfigParser
import os
import re
import shutil
import sys
import time

def print_usage():
    """Print help."""
    print __doc__

def print_version():
    """Print version information."""
    print __revision__

def convert_conf_option(option_name, option_value):
    """
    Convert conf option into Python config.py line, converting
    values to ints or strings as appropriate.
    """

    ## 1) convert option name:
    if option_name in ['cdsname', 'cdslang', 'supportemail',
                       'adminemail', 'alertengineemail', 'webdir',
                       'weburl', 'sweburl', 'bindir', 'pylibdir',
                       'cachedir', 'logdir', 'tmpdir', 'etcdir',
                       'version', 'localedir', 'cdslangs',
                       'cdsnameintl', 'counters', 'storage',
                       'filedir', 'filedirsize', 'xmlmarc2textmarc',
                       'bibupload', 'bibformat', 'bibwords',
                       'bibconvert', 'bibconvertconf',]:
        # keep lowercase for these "legacy" names:
        pass
    else:
        # otherwise convert to uppercase:
        option_name = option_name.upper()

    ## 2) convert option value to int or string:
    try:
        option_value = int(option_value)
    except ValueError:
        option_value = '"' + option_value + '"'

    ## 3a) special cases: regexps
    if option_name in ['CFG_BIBINDEX_CHARS_ALPHANUMERIC_SEPARATORS',
                       'CFG_BIBINDEX_CHARS_PUNCTUATION']:
        option_value = 'r"[' + option_value[1:-1] + ']"'

    ## 3b) special cases: True, False, None
    if option_value in ['"True"', '"False"', '"None"']:
        option_value = option_value[1:-1]

    ## 3c) special cases: dicts or lists
    if option_name in ['CFG_WEBSEARCH_FIELDS_CONVERT',
                       'CFG_WEBSEARCH_USE_JSMATH_FOR_FORMATS']:
        option_value = option_value[1:-1]

    ## 3d) special cases: cdslangs
    if option_name == 'cdslangs':
        out = "["
        for lang in option_value[1:-1].split(","):
            out += "'%s', " % lang
        out += "]"
        option_value = out

    ## 3e) special cases: multiline
    if option_name == 'CFG_OAI_IDENTIFY_DESCRIPTION':
        # make triple quotes
        option_value = '""' + option_value + '""'

    ## 3f) ignore some options:
    if option_name == 'CDSNAMEINTL':
        # treated elsewhere
        return

    ## 4) finally, return output line:
    return '%s = %s' % (option_name, option_value)

def generate_config_py(conf):
    """
    Generate new config.py from conf options, keeping previous
    config.py in a backup copy.
    """
    ## detect where config.py is:
    configpyfile = conf.get("Autotools detections", "pylibdir") + \
                   os.sep + 'invenio' + os.sep + 'config.py'
    ## backup current config.py file:
    if os.path.exists(configpyfile):
        shutil.copy(configpyfile, configpyfile + '.OLD')
    ## here we go:
    fdesc = open(configpyfile, 'w')
    ## generate preamble:
    fdesc.write("# -*- coding: utf-8 -*-\n")
    fdesc.write("# DO NOT EDIT THIS FILE!  IT WAS AUTOMATICALLY GENERATED\n")
    fdesc.write("# FROM INVENIO.CONF BY EXECUTING:\n")
    fdesc.write("# " + " ".join(sys.argv) + "\n")
    ## special treatment for CDSNAMEINTL options:
    fdesc.write("cdsnameintl = {}\n")
    for lang in conf.get("Essential parameters", "cdslangs").split(","):
        fdesc.write("cdsnameintl['%s'] = \"%s\"\n" % (lang, conf.get("Essential parameters",
                                                                   "cdsnameintl_" + lang)))
    ## special treatment for legacy WebSubmit options: (FIXME: phase them out)
    fdesc.write("accessurl = '%s/search'\n" % conf.get("Essential parameters", "WEBURL"))
    fdesc.write("urlpath = '%s'\n" % conf.get("Essential parameters", "WEBURL"))
    fdesc.write("images = '%s/img'\n" % conf.get("Essential parameters", "WEBURL"))
    fdesc.write("htdocsurl = '%s'\n" % conf.get("Essential parameters", "WEBURL"))
    ## process all the options normally:
    for section in conf.sections():
        if section != 'Database access': # do not put db credentials into config.py
            for option in conf.options(section):
                line_out = convert_conf_option(option, conf.get(section, option))
                if line_out:
                    fdesc.write(line_out + "\n")
    ## generate postamble:
    fdesc.write("")
    fdesc.write("# END OF GENERATED FILE")
    ## we are done:
    fdesc.close()

def update_dbquery_py(conf):
    """
    Update lib/dbquery.py file with DB parameters read from conf file.
    Note: this edits dbquery.py in situ, taking a backup first.
    Use only when you know what you are doing.
    """
    ## detect where dbquery.py is:
    dbquerypyfile = conf.get("Autotools detections", "pylibdir") + \
                    os.sep + 'invenio' + os.sep + 'dbquery.py'
    ## backup current dbquery.py file:
    if os.path.exists(dbquerypyfile):
        shutil.copy(dbquerypyfile, dbquerypyfile + '.OLD')
    ## replace db parameters:
    out = ''
    for line in open(dbquerypyfile, 'r').readlines():
        m = re.search(r'^CFG_DATABASE_(HOST|NAME|USER|PASS)(\s*=\s*)\'.*\'$', line)
        if m:
            dbparam = 'CFG_DATABASE_' + m.group(1)
            out += "%s%s'%s'\n" % (dbparam, m.group(2),
                                   conf.get("Database access", dbparam))
        else:
            out += line
    fdesc = open(dbquerypyfile, 'w')
    fdesc.write(out)
    fdesc.close()

def update_dbexec(conf):
    """
    Update bin/dbexec file with DB parameters read from conf file.
    Note: this edits dbexec in situ, taking a backup first.
    Use only when you know what you are doing.
    """
    ## detect where dbexec is:
    dbexecfile = conf.get("Autotools detections", "bindir") + \
                    os.sep + 'dbexec'
    ## backup current dbexec file:
    if os.path.exists(dbexecfile):
        shutil.copy(dbexecfile, dbexecfile + '.OLD')
    ## replace db parameters via sed:
    out = ''
    for line in open(dbexecfile, 'r').readlines():
        m = re.search(r'^CFG_DATABASE_(HOST|NAME|USER|PASS)(\s*=\s*)\'.*\'$', line)
        if m:
            dbparam = 'CFG_DATABASE_' + m.group(1)
            out += "%s%s'%s'\n" % (dbparam, m.group(2),
                                   conf.get("Database access", dbparam))
        else:
            out += line
    fdesc = open(dbexecfile, 'w')
    fdesc.write(out)
    fdesc.close()

def update_bibconvert_templates(conf):
    """
    Update bibconvert/config/*.tpl files looking for 856
    http://.../record/ lines, replacing URL with CDSWEB taken from
    conf file.  Note: this edits tpl files in situ, taking a
    backup first.  Use only when you know what you are doing.
    """
    ## detect bibconvert/config/*.tpl dir:
    tpldir = re.sub(r'/bin$', '/etc/bibconvert/config', sys.path[0])
    ## find all *.tpl files:
    for tplfilename in os.listdir(tpldir):
        if tplfilename.endswith(".tpl"):
            ## change tpl file:
            tplfile = tpldir + os.sep + tplfilename
            shutil.copy(tplfile, tplfile + '.OLD')
            out = ''
            for line in open(tplfile, 'r').readlines():
                m = re.search(r'^(.*)http://.*?/record/(.*)$', line)
                if m:
                    out += "%s%s/record/%s\n" % (m.group(1),
                                                 conf.get("Essential parameters", 'WEBURL'),
                                                 m.group(2))
                else:
                    out += line
            fdesc = open(tplfile, 'w')
            fdesc.write(out)
            fdesc.close()

def reset_cdsname(conf):
    """
    Reset collection-related tables with new CDSNAME and
    CDSNAMEINTL read from conf files.
    """
    from invenio.dbquery import run_sql, IntegrityError
    # reset CDSNAME:
    cdsname = conf.get("Essential parameters", "cdsname")
    try:
        run_sql("""INSERT INTO collection (id, name, dbquery, reclist, restricted) VALUES
                                          (1,%s,NULL,NULL,NULL)""", (cdsname,))
    except IntegrityError:
        run_sql("""UPDATE collection SET name=%s WHERE id=1""", (cdsname,))
    # reset CDSNAMEINTL:
    for lang in conf.get("Essential parameters", "cdslangs").split(","):
        cdsname_lang = conf.get("Essential parameters", "cdsnameintl_" + lang)
        try:
            run_sql("""INSERT INTO collectionname (id_collection, ln, type, value) VALUES
                         (%s,%s,%s,%s)""", (1, lang, 'ln', cdsname_lang))
        except IntegrityError:
            run_sql("""UPDATE collectionname SET value=%s
                        WHERE ln=%s AND id_collection=1 AND type='ln'""",
                    (cdsname_lang, lang))

def reset_adminemail(conf):
    """
    Reset user-related tables with new ADMINEMAIL read from conf files.
    """
    from invenio.dbquery import run_sql
    adminemail = conf.get("Essential parameters", "adminemail")
    res = run_sql("DELETE FROM user WHERE id=1")
    res = run_sql("""INSERT INTO user (id, email, password, note, nickname) VALUES
                        (1, %s, AES_ENCRYPT(email, ''), 1, 'admin')""",
                  (adminemail,))

def main():
    """Main entry point."""
    conf = ConfigParser()
    if '--help' in sys.argv or \
       '-h' in sys.argv:
        print_usage()
    elif '--version' in sys.argv or \
         '-V' in sys.argv:
        print_version()
    else:
        ## detect path to conf dir (relative to this bin dir):
        confdir = re.sub(r'/bin$', '/etc', sys.path[0])
        ## read conf files:
        for conffile in [confdir + os.sep + 'invenio.conf',
                         confdir + os.sep + 'invenio-autotools.conf']:
            if os.path.exists(conffile):
                conf.read(conffile)
            else:
                print "ERROR: Cannot find %s.  Please see '--help'." % conffile
                sys.exit(1)
        ## decide what to do:
        done = False
        if '--generate-config-py' in sys.argv:
            generate_config_py(conf)
            done = True
        if '--update-dbquery-py' in sys.argv:
            update_dbquery_py(conf)
            done = True
        if '--update-dbexec' in sys.argv:
            update_dbexec(conf)
            done = True
        if '--update-bibconvert-tpl' in sys.argv:
            update_bibconvert_templates(conf)
            done = True
        if '--reset-cdsname' in sys.argv:
            reset_cdsname(conf)
            done = True
        if '--reset-adminemail' in sys.argv:
            reset_adminemail(conf)
            done = True
        if not done:
            print """ERROR: Please specify a command.  Please see '--help'."""
            sys.exit(1)

if __name__ == '__main__':
    main()
