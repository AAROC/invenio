# -*- coding: utf-8 -*-
##
## $Id$
##
## This file is part of CDS Invenio.
## Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007 CERN.
##
## CDS Invenio is free software; you can redistribute it and/or
## modify it under the terms of the GNU General Public License as
## published by the Free Software Foundation; either version 2 of the
## License, or (at your option) any later version.
##
## CDS Invenio is distributed in the hope that it will be useful, but
## WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
## General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with CDS Invenio; if not, write to the Free Software Foundation, Inc.,
## 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

"""
Invenio configuration CLI tool.

Usage: inveniocfg [options] <invenio.ini> [invenio-custom.ini] [...]

General options:
   -h, --help               print this help
   -V, --version            print version number

Commands:
   --generate-config-py     generate config.py file from input conf files
   --reset-cdsname          reset tables to take account of new CDSNAME and CDSNAMEINTL
   --reset-adminemail       reset tables to take account of new ADMINEMAIL
Example:
 $ python ./inveniocfg.py --generate-config-py ../../../config/config*.ini | sort > config2.py
"""

__revision__ = "$Id$"

from ConfigParser import ConfigParser
import os
import sys

def print_usage():
    """Print help."""
    print __doc__

def print_version():
    """Print version information."""
    print __revision__

def convert_conf_option(option_name, option_value):
    """
    Convert conf option into Python config.py line, converting
    values to ints or strings as appropriate.
    """

    ## 1) convert option name:
    if option_name in ['cdsname', 'cdslang', 'supportemail',
                       'adminemail', 'alertengineemail', 'webdir',
                       'weburl', 'sweburl', 'bindir', 'pylibdir',
                       'cachedir', 'logdir', 'tmpdir', 'etcdir',
                       'version', 'localedir', 'cdslangs',
                       'cdsnameintl', 'images', 'urlpath',
                       'accessurl', 'counters', 'storage',
                       'filedir', 'filedirsize',
                       'xmlmarc2textmarc', 'bibupload',
                       'bibformat', 'bibwords', 'bibconvert',
                       'bibconvertconf', 'htdocsurl']:
        # keep lowercase for these "legacy" names:
        pass
    else:
        # otherwise convert to uppercase:
        option_name = option_name.upper()

    ## 2) convert option value to int or string:
    try:
        option_value = int(option_value)
    except ValueError:
        option_value = '"' + option_value + '"'

    ## 3a) special cases: regexps
    if option_name in ['CFG_BIBINDEX_CHARS_ALPHANUMERIC_SEPARATORS',
                       'CFG_BIBINDEX_CHARS_PUNCTUATION']:
        option_value = 'r"[' + option_value[1:-1] + ']"'

    ## 3b) special cases: True, False, None
    if option_value in ['"True"', '"False"', '"None"']:
        option_value = option_value[1:-1]

    ## 3c) special cases: dicts or lists
    if option_name in ['CFG_WEBSEARCH_FIELDS_CONVERT',
                       'CFG_WEBSEARCH_USE_JSMATH_FOR_FORMATS']:
        option_value = option_value[1:-1]

    ## 3d) special cases: cdslangs
    if option_name == 'cdslangs':
        out = "["
        for lang in option_value[1:-1].split(","):
            out += "'%s', " % lang
        out += "]"
        option_value = out

    ## 3e) special cases: multiline
    if option_name == 'CFG_OAI_IDENTIFY_DESCRIPTION':
        # make triple quotes
        option_value = '""' + option_value + '""'

    ## 3f) ignore some options:
    if option_name == 'CDSNAMEINTL':
        # treated elsewhere
        return

    ## 4) finally, return output line:
    return '%s = %s' % (option_name, option_value)

def generate_config_py(config):
    """Generate config.py from conf options."""

    ## generate preamble:
    print "# -*- coding: utf-8 -*-"
    print ""
    print "### DO NOT EDIT THIS FILE!"
    print "### IT WAS AUTOMATICALLY GENERATED BY EXECUTING:"
    print "###", " ".join(sys.argv)
    print ""

    ## special treatment for CDSNAMEINTL options:
    print 'cdsnameintl = {}'
    for lang in config.get("Essential parameters", "cdslangs").split(","):
        print "cdsnameintl['%s'] = \"%s\"" % (lang, config.get("Essential parameters",
                                                               "cdsnameintl_" + lang))

    ## process all the options normally:
    for section in config.sections():
        for option in config.options(section):
            line_out = convert_conf_option(option, config.get(section, option))
            if line_out:
                print line_out

    ## generate postamble:
    print ""
    print "### END OF FILE"

def reset_cdsname(config):
    """
    Reset collection-related tables with new CDSNAME and
    CDSNAMEINTL read from config files.
    """
    from invenio.dbquery import run_sql
    # reset CDSNAME:
    cdsname = config.get("Essential parameters", "cdsname")
    res = run_sql("DELETE FROM collection WHERE id=1")
    res = run_sql("""INSERT INTO collection (id, name, dbquery, reclist, restricted) VALUES
                                            (1,%s,NULL,NULL,NULL)""",
                  (cdsname,))
    # reset CDSNAMEINTL:
    res = run_sql("DELETE FROM collectionname WHERE id_collection=1")

## <en>INSERT INTO collectionname VALUES (1,'en','ln',"<CDSNAMEINTL>");</en>
## <fr>INSERT INTO collectionname VALUES (1,'fr','ln',"<CDSNAMEINTL>");</fr>
## <de>INSERT INTO collectionname VALUES (1,'de','ln',"<CDSNAMEINTL>");</de>
## <es>INSERT INTO collectionname VALUES (1,'es','ln',"<CDSNAMEINTL>");</es>
## <ca>INSERT INTO collectionname VALUES (1,'ca','ln',"<CDSNAMEINTL>");</ca>
## <pl>INSERT INTO collectionname VALUES (1,'pl','ln',"<CDSNAMEINTL>");</pl>
## <pt>INSERT INTO collectionname VALUES (1,'pt','ln',"<CDSNAMEINTL>");</pt>
## <it>INSERT INTO collectionname VALUES (1,'it','ln',"<CDSNAMEINTL>");</it>
## <ja>INSERT INTO collectionname VALUES (1,'ja','ln',"<CDSNAMEINTL>");</ja>
## <ru>INSERT INTO collectionname VALUES (1,'ru','ln',"<CDSNAMEINTL>");</ru>
## <sk>INSERT INTO collectionname VALUES (1,'sk','ln',"<CDSNAMEINTL>");</sk>
## <cs>INSERT INTO collectionname VALUES (1,'cs','ln',"<CDSNAMEINTL>");</cs>
## <no>INSERT INTO collectionname VALUES (1,'no','ln',"<CDSNAMEINTL>");</no>
## <sv>INSERT INTO collectionname VALUES (1,'sv','ln',"<CDSNAMEINTL>");</sv>
## <el>INSERT INTO collectionname VALUES (1,'el','ln',"<CDSNAMEINTL>");</el>
## <uk>INSERT INTO collectionname VALUES (1,'uk','ln',"<CDSNAMEINTL>");</uk>
## <bg>INSERT INTO collectionname VALUES (1,'bg','ln',"<CDSNAMEINTL>");</bg>
## <lang:hr>INSERT INTO collectionname VALUES (1,'hr','ln',"<CDSNAMEINTL>");</lang:hr>
## <zh_CN>INSERT INTO collectionname VALUES (1,'zh_CN','ln',"<CDSNAMEINTL>");</zh_CN>
## <zh_TW>INSERT INTO collectionname VALUES (1,'zh_TW','ln',"<CDSNAMEINTL>");</zh_TW>

def reset_adminemail(config):
    """
    Reset user-related tables with new ADMINEMAIL read from config files.
    """
    from invenio.dbquery import run_sql
    adminemail = config.get("Essential parameters", "adminemail")
    res = run_sql("DELETE FROM user WHERE id=1")
    res = run_sql("""INSERT INTO user (id, email, password, note, nickname) VALUES
                        (1, %s, AES_ENCRYPT(email, ''), 1, 'admin')""",
                  (adminemail,))

def main():
    """Main entry point."""
    config = ConfigParser()
    if '--help' in sys.argv or \
       '-h' in sys.argv:
        print_usage()
    elif '--version' in sys.argv or \
         '-V' in sys.argv:
        print_version()
    else:
        ## read config files:
        success = False
        for conffile in sys.argv:
            if conffile.endswith(".conf"):
                if os.path.exists(conffile):
                    config.read(conffile)
                    success = True
                else:
                    print "ERROR: cannot read %s." % conffile
        if not success:
            print """ERROR: Not found any conf files.  Please see '--help'."""
            sys.exit(1)
        ## decide what to do:
        if '--generate-config-py' in sys.argv:
            generate_config_py(config)
        elif '--reset-cdsname' in sys.argv:
            reset_cdsname(config)
        elif '--reset-adminemail' in sys.argv:
            reset_adminemail(config)
        else:
            print """ERROR: Please specify a command.  Please see '--help'."""
            sys.exit(1)

if __name__ == '__main__':
    main()
