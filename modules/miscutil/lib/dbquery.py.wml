## $Id$

## CDS Invenio utility to run SQL queries.  The core is taken from
## modpython FAQ and modified to suit our needs.  The insert_id() is
## inspired by Erik Forsberg's mod_python slides.

## This file is part of CDS Invenio.
## Copyright (C) 2002, 2003, 2004, 2005, 2006 CERN.
##
## CDS Invenio is free software; you can redistribute it and/or
## modify it under the terms of the GNU General Public License as
## published by the Free Software Foundation; either version 2 of the
## License, or (at your option) any later version.
##
## CDS Invenio is distributed in the hope that it will be useful, but
## WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
## General Public License for more details.  
##
## You should have received a copy of the GNU General Public License
## along with CDS Invenio; if not, write to the Free Software Foundation, Inc.,
## 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

#include "configbis.wml"

"""CDS Invenio utility to run SQL queries."""

import MySQLdb
import string

from invenio.config import CFG_ACCESS_CONTROL_LEVEL_SITE

## Configured MySQL credentials are read here and not in config.py in
## order to prevent them from appearing elsewhere, as no-one should
## know DB credentials but us.
dbhost = "<DBHOST>"
dbname = "<DBNAME>"
dbuser = "<DBUSER>"
dbpass = "<DBPASS>"

__version__ = "$Id$"

def _db_login(relogin = 0):
    """Login to the database."""
    global DB_CONN
    if relogin:
        DB_CONN = MySQLdb.connect(host=dbhost, db=dbname, user=dbuser, passwd=dbpass)
        return DB_CONN
    else:
        try:
            d = DB_CONN
            return d
        except NameError:
            DB_CONN = MySQLdb.connect(host=dbhost, db=dbname, user=dbuser, passwd=dbpass)
            return DB_CONN

def run_sql(sql, param=None, n=0, with_desc=0):
    """Run SQL on the server with PARAM and return result.

       When the site is closed for maintenance (as governed by the
       config variable CFG_ACCESS_CONTROL_LEVEL_SITE), do not attempt
       to run any SQL queries but return empty list immediately.
       Useful to be able to have the website up while MySQL database
       is down for maintenance, hot copies, table repairs, etc.
    """

    if CFG_ACCESS_CONTROL_LEVEL_SITE == 2:
        # do not connect to the database as the site is closed for maintenance:
        return []

    ### log_sql_query(sql, param) ### UNCOMMENT ONLY IF you REALLY want to log all queries

    db = _db_login()    
    if param:
        param = tuple(param)
    try:
        cur = db.cursor()
        rc = cur.execute(sql, param)   
    except MySQLdb.OperationalError, e: # unexpected disconnect, bad malloc error, etc
        # FIXME: now reconnect is always forced, we may perhaps want to ping() first?
        db = _db_login(relogin = 1) 
        cur = db.cursor()        
        rc = cur.execute(sql, param)                 
    if string.upper(string.split(sql)[0]) in ("SELECT", "SHOW", "DESC", "DESCRIBE"):
        if n:
            recset = cur.fetchmany(n)
        else:
            recset = cur.fetchall()            
        if with_desc:
            return recset, cur.description
        else:
            return recset       
    else:
        if string.upper(string.split(sql)[0]) == "INSERT":
            rc =  cur.lastrowid
        return rc

def blob_to_string(ablob):
    """Return string representation of ABLOB.  Useful to treat MySQL
    BLOBs in the same way for both recent and old MySQLdb versions.
    """    
    if type(ablob) is str:
        # BLOB is already a string in MySQLdb 0.9.2
        return ablob
    else:
        # BLOB is array.array in MySQLdb 1.0.0 and later 
        return ablob.tostring()

def log_sql_query(sql, param=None):
    """Log SQL query into prefix/var/dbquery.log log file.  In order
       to enable logging of all SQL queries, please uncomment one line
       in run_sql() above. Useful for fine-level debugging only!
    """
    from invenio.config import logdir
    from invenio.dateutils import convert_datestruct_to_datetext
    import time
    from invenio.textutils import indent_text
    log_path = logdir + '/dbquery.log'
    date_of_log = convert_datestruct_to_datetext(time.localtime())
    message = date_of_log + '-->\n'
    message += indent_text('Query:\n' + indent_text(str(sql),2),2)
    message += indent_text('Params:\n' + indent_text(str(param),2),2)
    message += '-----------------------------\n\n'
    try:
        log_file = open(log_path, 'a+')
        log_file.writelines(message)
        log_file.close()
    except:
        pass
