## Administrator interface for BibRank

## This file is part of the CERN Document Server Software (CDSware).
## Copyright (C) 2002 CERN.
##
## The CDSware is free software; you can redistribute it and/or
## modify it under the terms of the GNU General Public License as
## published by the Free Software Foundation; either version 2 of the
## License, or (at your option) any later version.
##
## The CDSware is distributed in the hope that it will be useful, but
## WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
## General Public License for more details.  
##
## You should have received a copy of the GNU General Public License
## along with CDSware; if not, write to the Free Software Foundation, Inc.,
## 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

## read config variables:
#include "config.wml"
#include "configbis.wml"

<protect>## $Id$</protect>
<protect>## DO NOT EDIT THIS FILE!  IT WAS AUTOMATICALLY GENERATED FROM CDSware WML SOURCES.</protect>
"""CDSware BibRank Administrator Interface."""

__lastupdated__ = """<: print `date +"%d %b %Y %H:%M:%S %Z"`; :>"""

## fill config variables:
pylibdir = "<LIBDIR>/python"
import sys
sys.path.append('%s' % pylibdir)
import cdsware.bibrankadminlib as brc
reload(brc)
from cdsware.webpage import page, create_error_box
from cdsware.config import weburl,cdslang
from cdsware.webuser import getUid

__version__ = "$Id$"
    
def index(req, ln=cdslang):
    navtrail_previous_links = brc.getnavtrail() # + """&gt; <a class=navtrail href="%s/admin/bibrank/bibrankadmin.py">BibRank Admin Interface</a> """ % (weburl)
    
    try:
        uid = getUid(req)
    except MySQLdb.Error, e:
        return error_page(req)

    if not brc.check_user(uid):
        return page(title="BibRank Admin Interface",
                body=brc.perform_index(ln),
                uid=uid,
                language=ln,
                navtrail = navtrail_previous_links,
                lastupdated=__lastupdated__,
                urlargs=req.args)
    else:
        return auth_failed(uid, navtrail_previous_links)

def addrankarea(req, ln=cdslang, rnkcode='', template='', confirm=-1):
    navtrail_previous_links = brc.getnavtrail() + """&gt; <a class=navtrail href="%s/admin/bibrank/bibrankadmin.py/">BibRank Admin Interface</a> """ % (weburl)
    
    try:
        uid = getUid(req)
    except MySQLdb.Error, e:
        return error_page(req)

    if not brc.check_user(uid):
        return page(title="Add new rank method",
                body=brc.perform_addrankarea(rnkcode=rnkcode,
                                             ln=cdslang,
                                             template=template,
                                             confirm=confirm),
                uid=uid,
                language=ln,
                navtrail = navtrail_previous_links,
                urlargs=req.args,
                lastupdated=__lastupdated__)
    else:
        return auth_failed(uid, navtrail_previous_links)

def modifytranslations(req, rnkID='', ln=cdslang, sel_type='', trans = [], confirm=0):
    navtrail_previous_links = brc.getnavtrail() + """&gt; <a class=navtrail href="%s/admin/bibrank/bibrankadmin.py/">BibRank Admin Interface</a> """ % (weburl)
    
    try:
        uid = getUid(req)
    except MySQLdb.Error, e:
        return error_page(req)

    if not brc.check_user(uid):
        return page(title="Modify translations",
                body=brc.perform_modifytranslations(rnkID=rnkID,
                                             ln=ln,
                                             sel_type=sel_type,
                                             trans=trans,
                                             confirm=confirm),
                uid=uid,
                language=ln,
                urlargs=req.args,
                navtrail = navtrail_previous_links,
                lastupdated=__lastupdated__)
    else:
        return auth_failed(uid, navtrail_previous_links)

def modifycollection(req, ln=cdslang, rnkID='', func='', colID='', confirm=0):
    navtrail_previous_links = brc.getnavtrail() + """&gt; <a class=navtrail href="%s/admin/bibrank/bibrankadmin.py/">BibRank Admin Interface</a> """ % (weburl)
    
    try:
        uid = getUid(req)
    except MySQLdb.Error, e:
        return error_page(req)

    if not brc.check_user(uid):
        return page(title="Modify visibility toward collections",
                body=brc.perform_modifycollection(rnkID=rnkID,
                                                 ln=ln,
                                                 func=func,
                                                 colID=colID,
                                                 confirm=confirm),
                uid=uid,
                language=ln,
                urlargs=req.args,
                navtrail = navtrail_previous_links,
                lastupdated=__lastupdated__)
    else:
        return auth_failed(uid, navtrail_previous_links)

def deleterank(req, ln=cdslang, rnkID='', confirm=0):
    navtrail_previous_links = brc.getnavtrail() + """&gt; <a class=navtrail href="%s/admin/bibrank/bibrankadmin.py/">BibRank Admin Interface</a> """ % (weburl)
    
    try:
        uid = getUid(req)
    except MySQLdb.Error, e:
        return error_page(req)

    if not brc.check_user(uid):
        return page(title="Delete rank method",
                body=brc.perform_deleterank(rnkID=rnkID,
                                                 ln=ln,
                                                 confirm=confirm),
                uid=uid,
                language=ln,
                urlargs=req.args,
                navtrail = navtrail_previous_links,
                lastupdated=__lastupdated__)
    else:
        return auth_failed(uid, navtrail_previous_links)

def modifyrank(req, ln=cdslang, rnkID='', rnkcode='', template='', cfgfile='', confirm=0):
    navtrail_previous_links = brc.getnavtrail() + """&gt; <a class=navtrail href="%s/admin/bibrank/bibrankadmin.py/">BibRank Admin Interface</a> """ % (weburl)
    
    try:
        uid = getUid(req)
    except MySQLdb.Error, e:
        return error_page(req)

    if not brc.check_user(uid):
        return page(title="Modify rank method",
                body=brc.perform_modifyrank(rnkID=rnkID,
                                            ln=ln,
                                            rnkcode=rnkcode,
                                            cfgfile=cfgfile,
                                            template=template,
                                            confirm=confirm),
                uid=uid,
                language=ln,
                urlargs=req.args,
                navtrail = navtrail_previous_links,
                lastupdated=__lastupdated__)   
    else:
        return auth_failed(uid, navtrail_previous_links)

def showrankdetails(req, ln=cdslang, rnkID=''):
    navtrail_previous_links = brc.getnavtrail() + """&gt; <a class=navtrail href="%s/admin/bibrank/bibrankadmin.py/">BibRank Admin Interface</a> """ % (weburl)
    
    try:
        uid = getUid(req)
    except MySQLdb.Error, e:
        return error_page(req)

    if not brc.check_user(uid):
        return page(title="Rank method details",
                body=brc.perform_showrankdetails(rnkID=rnkID,
                                                 ln=ln),
                uid=uid,
                language=ln,
                urlargs=req.args,
                navtrail = navtrail_previous_links,
                lastupdated=__lastupdated__)   
    else:
        return auth_failed(uid, navtrail_previous_links)

def error_page(req):
    return page(title=msg_internal_error[ln],
                body = create_error_box(req, verbose=verbose, ln=ln),
                description="%s - Internal Error" % cdsname, 
                keywords="%s, CDSware, Internal Error" % cdsname,
                language=ln,
                urlargs=req.args)

def auth_failed(uid, navtrail_previous_links):
    return page(title='Authorization failure',
                uid=uid,
                body=wsc.adderrorbox('try to login first',
                                     datalist=["""You are not a user authorized to perform admin tasks, try to
                                     <a href="%s/youraccount.py/login?referer=%s/admin/websearch/">login</a> with another account.""" % (weburl, weburl)]),
                navtrail= navtrail_previous_links,
                lastupdated=__lastupdated__)
    
