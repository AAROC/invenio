## $Id$

## This file is part of the CERN Document Server Software (CDSware).
## Copyright (C) 2002 CERN.
##
## The CDSware is free software; you can redistribute it and/or
## modify it under the terms of the GNU General Public License as
## published by the Free Software Foundation; either version 2 of the
## License, or (at your option) any later version.
##
## The CDSware is distributed in the hope that it will be useful, but
## WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
## General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with CDSware; if not, write to the Free Software Foundation, Inc.,
## 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

#include "cdswmllib.wml"

<protect># -*- coding: utf-8 -*-</protect>
<protect>## $Id$</protect>
<protect>## DO NOT EDIT THIS FILE!  IT WAS AUTOMATICALLY GENERATED FROM CDSware WML SOURCES.</protect>

__version__ = "<: print generate_pretty_version_string('$Id$'); :>"

## import interesting modules:
from config import *
from dbquery import run_sql
from bibrank_downloads_indexer import database_tuples_to_single_list
## def create_download_similarity_from_dictionnary(recid):
##     """construct a list of all document which have been co-downloaded whith the current document
##     Use a dictionnay store in rnkMETHODDATA """
##     t = ""
##     dic = fromDB("dow_sim")
##     dic_list = []
##     if dic.has_key(recid):
##         dic_list = dic[recid]
##         dic_list.sort(lambda x, y: (cmp(x[1], y[1])))
##         dic_list.reverse()
##     r = min(5, len(dic_list))
##     if r > 0:
##         t += """<br/><br/><center><table class="searchbox" summary="" width="500"><tr><th class="portalboxheader">People who downloaded this record also downloaded :&nbsp;&nbsp;&nbsp;</th></tr><tr><td class="portalboxbody"><table border=0 cellspacing=1 cellpadding=3>"""
##         for i in range(r):
##             t += """<tr><td valign=top><small><font class="rankscoreinfo"><a>(%s)</a></font></small></td><td valign=top><small>%s</small></td></tr>""" % (dic_list[i][1],print_record(dic_list[i][0],format='getfile'))
##         t += "</table></td></tr></table></center>"
##     return t

## def create_download_similarity(id_bibrec):
##     """construct a list of all document which have been co-downloaded whith the current document"""
##     t = ""
##     recid_list = get_download_similarity(id_bibrec,"rnkDOWNLOADS")
##     r = min(5,len(recid_list))
##     if r > 0:
##         t += """<br/><br/><center><table class="searchbox" summary="" width="500"><tr><th class="portalboxheader">People who downloaded this record also downloaded :&nbsp;&nbsp;&nbsp;</th></tr><tr><td class="portalboxbody"><table border=0 cellspacing=1 cellpadding=3>"""
##         for i in range(r):
##             t += """<tr><td valign=top><small><font class="rankscoreinfo"><a>(%s)</a></font></small></td><td valign=top><small>%s</small></td></tr>""" % (recid_list[i][0], print_record(recid_list[i][1], format='getfile'))
##         t += "</table></td></tr></table></center>"
##     return t

def get_fieldvalues(recID, tag):
    """Return list of field values for field TAG inside record RECID.
    Copy from search_engine"""
    out = []
    if tag == "001___":
        # we have asked for recID that is not stored in bibXXx tables
        out.append(str(recID))
    else:
        # we are going to look inside bibXXx tables
        digit = tag[0:2]
        bx = "bib%sx" % digit
        bibx = "bibrec_bib%sx" % digit
        query = "SELECT bx.value FROM %s AS bx, %s AS bibx WHERE bibx.id_bibrec='%s' AND bx.id=bibx.id_bibxxx AND bx.tag LIKE '%s'" \
                "ORDER BY bibx.field_number, bx.tag ASC" % (bx, bibx, recID, tag)
        res = run_sql(query)
        for row in res:
            out.append(row[0])
    return out

def record_exists(recID):
    """Return 1 if record RECID exists.
       Return 0 if it doesn't exist.
       Return -1 if it exists but is marked as deleted.
       Copy from search_engine"""
    out = 0
    query = "SELECT id FROM bibrec WHERE id='%s'" % recID
    res = run_sql(query, None, 1)
    if res:
        # record exists; now check whether it isn't marked as deleted:
        dbcollids = get_fieldvalues(recID, "980__%")
        if ("DELETED" in dbcollids) or (cfg_cern_site and "DUMMY" in dbcollids):
            out = -1 # exists, but marked as deleted
        else:
            out = 1 # exists fine
    return out

def get_reading_similarity(id_bibrec, table_name):
    """For download and page viewed.
    First compute the client_host set for this id_bibrec
    Secondly retrieve all id_bibrec (and the number of its occurences) which have a common
    client_host with the id_bibrec"""
    
    client_host = run_sql("select distinct client_host from %s where id_bibrec=%s;" % (table_name, id_bibrec))
    res2_list = []
    if client_host != ():
        client_host = str(database_tuples_to_single_list(client_host))
        client_host = client_host.replace("L", "")
        client_host = client_host.replace("[", "")
        client_host = client_host.replace("]", "")
        res2 = run_sql("select id_bibrec,count(*) as c from %s where client_host in (%s) and id_bibrec != %s group by id_bibrec order by c desc limit 10;" % (table_name, client_host, id_bibrec))
        res2_list = list(res2)
        for i in res2_list:
            if not record_exists(i[0]):
                res2_list.remove(i)
        res2_list.sort(lambda x, y: (cmp(x[1], y[1])))
        res2_list.reverse()
    return res2_list
    
