## $Id$

## This file is part of the CERN Document Server Software (CDSware).
## Copyright (C) 2002 CERN.
##
## The CDSware is free software; you can redistribute it and/or
## modify it under the terms of the GNU General Public License as
## published by the Free Software Foundation; either version 2 of the
## License, or (at your option) any later version.
##
## The CDSware is distributed in the hope that it will be useful, but
## WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
## General Public License for more details.  
##
## You should have received a copy of the GNU General Public License
## along with CDSware; if not, write to the Free Software Foundation, Inc.,
## 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

#include "cdspage.wml" \
    title="<MSG_SEARCH_TIPS>" \
    navbar_name="search-new" \
    navtrail_previous_links="<a class=navtrail href=<WEBURL>/help/<lang:star: index.*.html>><MSG_HELP_CENTRAL></a> &gt; <a class=navtrail href=<WEBURL>/help/search/<lang:star: index.*.html>><MSG_SEARCH_HELP></a>" \
    navbar_select="tips" \
    cdspageheaderadd="<div align=right><a href=tips.en.html>EN</a> | <a href=tips.fr.html>FR</a> | <a href=tips.de.html>DE</a> | <a href=tips.es.html>ES</a>| <a href=tips.it.html>IT</a> | <a href=tips.ru.html>RU</a> | <a href=tips.sk.html>SK</a> | <a href=tips.cz.html>CZ</a></div>"

<fr>
   <p><table class="errorbox">
   <thead>
   <tr>
   <th class="errorboxheader">
     <MSG_PAGE_BEING_TRANSLATED_HEAD>
   </th>
   </tr>
   </thead>
   <tbody>
   <tr>
   <td class="errorboxbody">
     <MSG_PAGE_BEING_TRANSLATED_BODY>
   </td>
   </tr>
   </tbody>
   </table>
</fr>
<de>
   <p><table class="errorbox">
   <thead>
   <tr>
   <th class="errorboxheader">
     <MSG_PAGE_BEING_TRANSLATED_HEAD>
   </th>
   </tr>
   </thead>
   <tbody>
   <tr>
   <td class="errorboxbody">
     <MSG_PAGE_BEING_TRANSLATED_BODY>
   </td>
   </tr>
   </tbody>
   </table>
</de>
<es>
   <p><table class="errorbox">
   <thead>
   <tr>
   <th class="errorboxheader">
     <MSG_PAGE_BEING_TRANSLATED_HEAD>
   </th>
   </tr>
   </thead>
   <tbody>
   <tr>
   <td class="errorboxbody">
     <MSG_PAGE_BEING_TRANSLATED_BODY>
   </td>
   </tr>
   </tbody>
   </table>
</es>
<it>
   <p><table class="errorbox">
   <thead>
   <tr>
   <th class="errorboxheader">
     <MSG_PAGE_BEING_TRANSLATED_HEAD>
   </th>
   </tr>
   </thead>
   <tbody>
   <tr>
   <td class="errorboxbody">
     <MSG_PAGE_BEING_TRANSLATED_BODY>
   </td>
   </tr>
   </tbody>
   </table>
</it>
<ru>
   <p><table class="errorbox">
   <thead>
   <tr>
   <th class="errorboxheader">
     <MSG_PAGE_BEING_TRANSLATED_HEAD>
   </th>
   </tr>
   </thead>
   <tbody>
   <tr>
   <td class="errorboxbody">
     <MSG_PAGE_BEING_TRANSLATED_BODY>
   </td>
   </tr>
   </tbody>
   </table>
</ru>
<sk>
   <p><table class="errorbox">
   <thead>
   <tr>
   <th class="errorboxheader">
     <MSG_PAGE_BEING_TRANSLATED_HEAD>
   </th>
   </tr>
   </thead>
   <tbody>
   <tr>
   <td class="errorboxbody">
     <MSG_PAGE_BEING_TRANSLATED_BODY>
   </td>
   </tr>
   </tbody>
   </table>
</sk>
<cz>
   <p><table class="errorbox">
   <thead>
   <tr>
   <th class="errorboxheader">
     <MSG_PAGE_BEING_TRANSLATED_HEAD>
   </th>
   </tr>
   </thead>
   <tbody>
   <tr>
   <td class="errorboxbody">
     <MSG_PAGE_BEING_TRANSLATED_BODY>
   </td>
   </tr>
   </tbody>
   </table>
</cz>

<en>
<p>Our search engine tries to offer today's typical web searching
experience, as gained with popular search engines such as <a
href="http://google.com/">Google</a>.  The nature of bibliographic
searching differs from that of a web page searching, though.  We
provide many extensions to enable a complex and precise structured
search, including an combined metadata, fulltext and reference search
in one go.  This page lists several tips and tricks that you may find
useful to this effect.
</en>
<fr>
<p>Our search engine tries to offer today's typical web searching
experience, as gained with popular search engines such as <a
href="http://google.com/">Google</a>.  The nature of bibliographic
searching differs from that of a web page searching, though.  We
provide many extensions to enable a complex and precise structured
search, including an combined metadata, fulltext and reference search
in one go.  This page lists several tips and tricks that you may find
useful to this effect.
</fr>
<de>
<p>Unsere Suchmaschine versucht die zu heute typische
Websuche-erfahrung anzubieten, die auch zum Beispiel von Populären
Suchmaschinen als <a href="http://google.com/">Google</a> angeboten
ist. Die Natur der bibliographischen Suche unterscheidet sich jedoch
von der Websuche. Wir bieten auch mehrere Erweiterungen an, damit man
eine komplexe und genaue strukturierte Suche durchführen kann,
inklusiv eine kombinierte Metadatensuche, Volltextsuche und
Referenzsuche zugleich. Diese Seite stellt einige Tipps und Tricks
vor, die man zu diesem Effekt nützlich finden kann.
</de>
<es>
<p>Our search engine tries to offer today's typical web searching
experience, as gained with popular search engines such as <a
href="http://google.com/">Google</a>.  The nature of bibliographic
searching differs from that of a web page searching, though.  We
provide many extensions to enable a complex and precise structured
search, including an combined metadata, fulltext and reference search
in one go.  This page lists several tips and tricks that you may find
useful to this effect.
</es>
<it>
<p>Our search engine tries to offer today's typical web searching
experience, as gained with popular search engines such as <a
href="http://google.com/">Google</a>.  The nature of bibliographic
searching differs from that of a web page searching, though.  We
provide many extensions to enable a complex and precise structured
search, including an combined metadata, fulltext and reference search
in one go.  This page lists several tips and tricks that you may find
useful to this effect.
</it>
<ru>
<p>Our search engine tries to offer today's typical web searching
experience, as gained with popular search engines such as <a
href="http://google.com/">Google</a>.  The nature of bibliographic
searching differs from that of a web page searching, though.  We
provide many extensions to enable a complex and precise structured
search, including an combined metadata, fulltext and reference search
in one go.  This page lists several tips and tricks that you may find
useful to this effect.
</ru>
<sk>
<p>Our search engine tries to offer today's typical web searching
experience, as gained with popular search engines such as <a
href="http://google.com/">Google</a>.  The nature of bibliographic
searching differs from that of a web page searching, though.  We
provide many extensions to enable a complex and precise structured
search, including an combined metadata, fulltext and reference search
in one go.  This page lists several tips and tricks that you may find
useful to this effect.
</sk>
<cz>
<p>Our search engine tries to offer today's typical web searching
experience, as gained with popular search engines such as <a
href="http://google.com/">Google</a>.  The nature of bibliographic
searching differs from that of a web page searching, though.  We
provide many extensions to enable a complex and precise structured
search, including an combined metadata, fulltext and reference search
in one go.  This page lists several tips and tricks that you may find
useful to this effect.
</cz>

<h3><strong class="headerboxbodylogo">Index</strong></h3>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="#simpleadvanced">Simple versus advanced search</a>
<br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#guidance">Search guidance</a>
<br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#words">Searching for words versus phrases</a>
<br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#boolean">Boolean queries</a>
<br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#punctuation">Special characters and punctuation</a>
<br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#unicode">International characters</a>
<br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#wildcard">Word truncation/stemming</a>
<br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#structured">Structured metadata search</a>
<br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#span">Span queries</a>
<br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#combined">Combined metadata/fulltext/citation search</a>
<br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#howto">Frequently asked questions</a>
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#howto-choose-terms">How to wisely choose your search terms (speed-wise)</a>
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#howto-produce-list-of-publications">How to produce list of your publications</a>
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#howto-sort-pattern">How to sort according to a certain pattern</a>
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#howto-hepdoc">How to get documents from other servers (Google, SPIRES, KEK)</a>
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#howto-fulltext">How to search in fulltext files</a>
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#howto-citations">How to search for citations</a>

<h3><a name="simpleadvanced">Simple versus advanced search</a></h3>

<p>The default search mode is <strong>simple search</strong> that
basically provides you with one input box where you can type your
query, followed by a possibility to choose one of the common indexes
to search within.  You would usually simply type the keywords you are
interested in and hit return.  For example, if you are interested in
documents on <em>standard model</em> from <em>Ellis</em>, you would
type:

    <form action="<WEBURL>/search.py" method="get">
    <blockquote>
    <input size=40 type="text" name="p" value="ellis standard model">
    <select name="f"><option value="">any field<option>title<option>author</select>
    <input class="formbutton" type="submit" name="action" value="SEARCH">
    </blockquote>
    </form>

and on the search results page you would further add/remove keywords
to get at what you were looking for.

<p>The <strong>advanced search</strong> interface provides you with
explicit tools to play with: you can change the matching type from
the default word matching to phrase searching or the regular matching;
you can use boolean queries in several indexes, etc.  For example, to
find all the documents written by <em>Ellis, J</em> that contain
either of the words <em>muon</em> or <em>neutrino</em> in the title
and that were published in <em>2001</em>, you would type:

<blockquote>
<form action="<WEBURL>/search.py" method="get">
    <input type="hidden" name="cc" value="Atlantis Institute of Science"> 
    <input type="hidden" name="as" value="1">
        <table>
         <tbody>
          <tr valign="bottom">
            <td>
    <select name="m1">
    <option value="a">All of the words:
    <option value="o">Any of the words:
    <option value="e" selected>Exact phrase:
    <option value="p">Partial phrase:
    <option value="r">Regular expression:
    </select>
    <input type="text" name="p1" size="30" value="Ellis, J"></td>
            <td class="searchboxbody"><select name="f1"><option value="">any field<option value="abstract">abstract<option value="author" selected>author<option value="collection">collection<option value="division">division<option value="experiment">experiment<option value="fulltext">fulltext<option value="keyword">keyword<option value="reference">reference<option value="reportnumber">report number<option value="subject">subject<option value="title">title<option value="year">year</select></td>

            <td class="searchboxbody">
    <select name="op1">
    <option value="a">AND
    <option value="o">OR
    <option value="n">AND NOT
    </select>
    </td>
          </tr>
          <tr valign="bottom">
            <td class="searchboxbody">

    <select name="m2">
    <option value="a">All of the words:
    <option value="o" selected>Any of the words:
    <option value="e">Exact phrase:
    <option value="p">Partial phrase:
    <option value="r">Regular expression:
    </select>
    <input type="text" name="p2" size="30" value="muon neutrino"></td>
            <td class="searchboxbody"><select name="f2"><option value="">any field<option value="abstract">abstract<option value="author">author<option value="collection">collection<option value="division">division<option value="experiment">experiment<option value="fulltext">fulltext<option value="keyword">keyword<option value="reference">reference<option value="reportnumber">report number<option value="subject">subject<option value="title" selected>title<option value="year">year</select></td>

            <td class="searchboxbody">
    <select name="op2">
    <option value="a">AND
    <option value="o">OR
    <option value="n">AND NOT
    </select>
    </td>
          </tr>
          <tr valign="bottom">
            <td class="searchboxbody">

    <select name="m3">
    <option value="a">All of the words:
    <option value="o">Any of the words:
    <option value="e">Exact phrase:
    <option value="p">Partial phrase:
    <option value="r">Regular expression:
    </select>
    <input type="text" name="p3" size="30" value="2001"></td>
            <td class="searchboxbody"><select name="f3"><option value="">any field<option value="abstract">abstract<option value="author">author<option value="collection">collection<option value="division">division<option value="experiment">experiment<option value="fulltext">fulltext<option value="keyword">keyword<option value="reference">reference<option value="reportnumber">report number<option value="subject">subject<option value="title">title<option value="year" selected>year</select></td>

            <td class="searchboxbody"><input class="formbutton" type="submit" name="action" value="SEARCH"><input class="formbutton" type="submit" name="action" value="Browse">&nbsp;</td>
          </tr>
         </tbody>
        </table>
        </form>
</blockquote>

<p>Note that Simple Search can provide you basically the same
functionality, if you make use of special syntax that is explained in
the text below.  The simple-versus-advanced does not refer to the
functionality that is being provided but rather to the amount of
parametrization you can "tweak".  We conform to the common
use of the simple/advanced terms as found in other search engines.

<p>Much of what follows will deal with a question on "how a power user
would use the simple search interface".  Recall that you can always go
to the Advanced Search for more query assistance.
        
<h3><a name="guidance">Search guidance</a></h3>

<p>After you submit your query, the search engine will analyze it and
will try to always guide you in case no exact match could be found.
For example, it would print you a list of closest indexed terms in
case of spelling troubles:

    <form action="<WEBURL>/search.py" method="get">
    <blockquote>
    <input size=40 type="text" name="p" value="elllis muon">
    <select name="f"><option value="">any field<option>title<option>author</select>
    <input class="formbutton" type="submit" name="action" value="SEARCH">
    </blockquote>
    </form>

<p>An alternative choices will be printed in red.  The search engine
will similarly and will warn you when your search terms could not be
found, or when they could but your boolean query couldn't be met.  The
search engine will also silently try to search for alternative forms
(e.g. removed punctuation), etc.

<p>Thanks to multiple search stages and the guidance provided at each
stage, it is usually sufficient to simple type what you are looking
for and see what the system says in return.  If you aren't satisfied,
you would then add/remove words from your query until the satisfactory
reply.

<h3><a name="words">Searching for words versus phrases</a></h3>

<p>The default search mode is a <strong>search for words</strong>.  This
means that any whitespace you type is not significant, but is rather
interpreted to mean "add an automatic boolean AND between words", like
Google does.  For example, to find all records that contain both the
word <em>ellis</em> and the word <em>muon</em> anywhere in the record,
type:

    <form action="<WEBURL>/search.py" method="get">
    <blockquote>
    <input size=40 type="text" name="p" value="ellis muon">
    <select name="f"><option value="">any field<option>title<option>author</select>
    <input class="formbutton" type="submit" name="action" value="SEARCH">
    </blockquote>
    </form>

The whitespace would be significant if you include it within quotes.
There are two phrase searching modes:

<ol>

<li>The double quotes instruct the search engine to <strong>search for
    exact phrase</strong>.  This phrase search mode will match if and
    only if the given metadata field is exactly equal to the input
    pattern.  For example, to find all the documents by <em>Ellis,
    J</em>, type:

      <form action="<WEBURL>/search.py" method="get">
      <blockquote>
      <input size=40 type="text" name="p" value="&quot;Ellis, J&quot;">
      <select name="f"><option value="">any field<option>title<option selected>author</select>
      <input class="formbutton" type="submit" name="action" value="SEARCH">
      </blockquote>
      </form>

<li>The single quotes instruct the search engine to <strong>search for
    partial phrase</strong>.  Unlike exact phrase search, this mode
    will find "subphrases" that match given pattern, thus allowing
    for some words before/after given text.  This is the mode Google
    and other fulltext engines call a "phrase search".  For example,
    to find all the titles containing the expression <em>muon
    decay</em> regardless of the position of the expression in the
    title, type:

      <form action="<WEBURL>/search.py" method="get">
      <blockquote>
      <input size=40 type="text" name="p" value="'muon decay'">
      <select name="f"><option value="">any field<option selected>title<option>author</select>
      <input class="formbutton" type="submit" name="action" value="SEARCH">
      </blockquote>
      </form>

</ol>

The difference between exact and partial phrase searches may not be
obvious.  It's good to remember that the search engines usually offer
the latter.  We offer the two at the moment, since the first one is
usually an order of magnitude faster.

<h3><a name="boolean">Boolean queries</a></h3>

We have already seen how whitespace adds a silent boolean AND in the
search for words.  The other boolean operators include:

<blockquote>
<table border="1" cellpadding=10>
<tr>
<td rowspan=3 align=center>
<strong>+<br>AND</strong>
</td>
<td>
   <code>ellis +muon</code>
</td>
<td>
  matches all records that contain both the word
  <em>ellis</em> and the the word <em>muon</em>
</td>
</tr>
<tr>
<td>
   <code>ellis muon</code>
</td>
<td>
 ditto, syntactic sugar
</td>
</tr>
<tr>
<td>
   <code>ellis and muon</code>
</td>
<td>
 ditto, syntactic sugar
</td>
</tr>
<tr>
<td rowspan=2 align=center>
<strong>-<br>NOT</strong>
</td>
<td>
 <code>ellis -muon</code>
</td>
<td>
matches all records that contain the word
                        <em>ellis</em> but that do not contain the word
                        <em>muon</em>
</td>
</tr>
<tr>
<td>
   <code>ellis not muon</code>
</td>
<td>
ditto, syntactic sugar
</td>
</tr>
<tr>
<td rowspan=2 align=center>
<strong>|<br>OR</strong>
</td>
<td>
   <code>ellis |muon</code>
</td>
<td>
matches all records that contain at least one
                       of the words
</td>
</tr>
<tr>
<td>
  <code>ellis or muon</code>
</td>
<td>
ditto, syntactic sugar
</td>
</tr>
</table>
</blockquote>

<p>Logical operations are automatically chained from left to right (no
parenthesis support at the moment).  This permits you to easily refine
your searching by adding/removing words with +,- signs.  For example,
to find the documents including words muon or kaon, as well as with the
word ellis, type:

      <form action="<WEBURL>/search.py" method="get">
      <blockquote>
      <input size=40 type="text" name="p" value="muon or kaon +ellis">
      <select name="f"><option value="">any field<option>title<option>author</select>
      <input class="formbutton" type="submit" name="action" value="SEARCH">
      </blockquote>
      </form>
    
to get, say, 100 hits.  Now if you want to exlude records dealing with
the decay, append the exclusion term at the end:

      <form action="<WEBURL>/search.py" method="get">
      <blockquote>
      <input size=40 type="text" name="p" value="muon or kaon +ellis -decay">
      <select name="f"><option value="">any field<option>title<option>author</select>
      <input class="formbutton" type="submit" name="action" value="SEARCH">
      </blockquote>
      </form>

to get, say, 70 hits in a refined list.  Keep adding/removing terms
until the satisfaction.

<p>Note again that a left-to-right boolean chaining means that, if you
type <code>ellis muon or kaon</code> you will be effectively searching
for a pseudo-expression "(ellis and muon) or kaon".  A search for
"ellis and (muon or kaon)" is to be written as <code>muon or kaon
ellis</code>.

<h3><a name="punctuation">Special characters and punctuation</a></h3>

<p>When indexing words, an attention is paid to index it both with and
   without punctuation, so that you should be able to search for terms
   containing special characters, such as <em>C++</em>, verbatim:

      <form action="<WEBURL>/search.py" method="get">
      <blockquote>
      <input size=40 type="text" name="p" value="C++">
      <select name="f"><option value="">any field<option>title<option>author</select>
      <input class="formbutton" type="submit" name="action" value="SEARCH">
      </blockquote>
      </form>

      <form action="<WEBURL>/search.py" method="get">
      <blockquote>
      <input size=40 type="text" name="p" value="O'Shea">
      <select name="f"><option value="">any field<option>title<option selected>author</select>
      <input class="formbutton" type="submit" name="action" value="SEARCH">
      </blockquote>
      </form>

   For example, to find records containing the LaTeX expression
   <code>$e^{+}e^{-}$</code> in the title, type:

      <form action="<WEBURL>/search.py" method="get">
      <blockquote>
      <input size=40 type="text" name="p" value="$e^{+}e^{-}$">
      <select name="f"><option value="">any field<option selected>title<option>author</select>
      <input class="formbutton" type="submit" name="action" value="SEARCH">
      </blockquote>
      </form>

   For example, to find document with the report number
   <em>hep-ph/0204133</em>, type:

      <form action="<WEBURL>/search.py" method="get">
      <blockquote>
      <input size=40 type="text" name="p" value="hep-ph/0204133">
      <select name="f"><option value="">any field<option>title<option>author</select>
      <input class="formbutton" type="submit" name="action" value="SEARCH">
      </blockquote>
      </form>

   Note that the search is case-insensitive:

      <form action="<WEBURL>/search.py" method="get">
      <blockquote>
      <input size=40 type="text" name="p" value="BlaCK hOlEs">
      <select name="f"><option value="">any field<option>title<option>author</select>
      <input class="formbutton" type="submit" name="action" value="SEARCH">
      </blockquote>
      </form>

<h3><a name="unicode">International characters</a></h3>

<p>The search engine works with Unicode UTF-8 so you can type your
   query strings in any language stored in the database.  For
   example, to find the documents written by (or on) Пушкин, type:

      <form action="<WEBURL>/search.py" method="get">
      <blockquote>
      <input size=40 type="text" name="p" value="пушкин">
      <select name="f"><option value="">any field<option>title<option>author</select>
      <input class="formbutton" type="submit" name="action" value="SEARCH">
      </blockquote>
      </form>

   Note that you don't have to type accents to find accented results.  For example,
   type <code>Lemaitre</code> to find papers by <em>Lemaître</em>:

      <form action="<WEBURL>/search.py" method="get">
      <blockquote>
      <input size=40 type="text" name="p" value="Lemaitre">
      <select name="f"><option value="">any field<option>title<option selected>author</select>
      <input class="formbutton" type="submit" name="action" value="SEARCH">
      </blockquote>
      </form>

<ifeq "<CFG_CERN_SITE>" "1" "
   <p><table class="errorbox">
   <thead>
   <tr>
   <th class="errorboxheader">
   IMPORTANT NOTE FOR THE CERN SITE
   </th>
   </tr>
   </thead>
   <tbody>
   <tr>
   <td class="errorboxbody">
      At the moment, words including accented characters can only be retrieved by entering
      accented characters in the query.
   </td>
   </tr>
   </tbody>
   </table>
">

<h3><a name="wildcard">Word truncation/stemming</a></h3>

<p>The word truncation is supported via asterisk (*) wildcard
   character.  The wildcard instructs the search engine to match any
   number of characters in that place.  For example, to find records
   that contain words <em>muon</em>, <em>muons</em>, <em>muonic</em>
   etc, type:

      <form action="<WEBURL>/search.py" method="get">
      <blockquote>
      <input size=40 type="text" name="p" value="muon*">
      <select name="f"><option value="">any field<option>title<option>author</select>
      <input class="formbutton" type="submit" name="action" value="SEARCH">
      </blockquote>
      </form>

   The wildcard query works both in prefix and infix position.  For
   example, to get all the words that start by <em>CERN-TH</em> and
   end by <em>31</em>, type:

      <form action="<WEBURL>/search.py" method="get">
      <blockquote>
      <input size=40 type="text" name="p" value="CERN-TH*31">
      <select name="f"><option value="">any field<option>title<option>author</select>
      <input class="formbutton" type="submit" name="action" value="SEARCH">
      </blockquote>
      </form>

   Note that the wildcard will be ignored if you try to apply it to
   very short words, such as <em>a*</em>:

      <form action="<WEBURL>/search.py" method="get">
      <blockquote>
      <input size=40 type="text" name="p" value="a*">
      <select name="f"><option value="">any field<option>title<option>author</select>
      <input class="formbutton" type="submit" name="action" value="SEARCH">
      </blockquote>
      </form>

   The wildcard character can be used also in the phrase searching
   mode.  For example, to find all the documents whose title starts by
   "Neutrino mass", type:

      <form action="<WEBURL>/search.py" method="get">
      <blockquote>
      <input size=40 type="text" name="p" value="&quot;Neutrino mass*&quot;">
      <select name="f"><option value="">any field<option selected>title<option>author</select>
      <input class="formbutton" type="submit" name="action" value="SEARCH">
      </blockquote>
      </form>

   Recall that we have introduced exact and partial phrase search
   modes.  Actually, a partial phrase search mode launches an exact
   search enclosed within wildcards: we could say that <code>'foo bar
   baz'</code> equals to <code>"*foo bar baz*"</code>.  Now you can
   see why the partial phrase search is slow: due to the usage of two
   asterisks in front and after the text, each and every title in the
   database has to be looked up to determine whether it matches or
   not.  (There are currently no partial phrase indexes.)

<h3><a name="structured">Structured metadata search</a></h3>

<p>Searching within various bibliograpic fields (such as title,
   author) is supported via Google's <code>"site:"</code> like syntax.
   If a search term is preceded by a field name and a colon, then the
   term is searched for inside this field only.  For example, to find
   documents containing the word <em>ellis</em> within author index,
   type:

      <form action="<WEBURL>/search.py" method="get">
      <blockquote>
      <input size=40 type="text" name="p" value="author:ellis">
      <select name="f"><option value="">any field<option>title<option>author</select>
      <input class="formbutton" type="submit" name="action" value="SEARCH">
      </blockquote>
      </form>

   To select documents written by <em>Ellis</em> that contain words
   like <em>muon</em>, <em>muons</em>, <em>muonic</em> within title,
   type:

      <form action="<WEBURL>/search.py" method="get">
      <blockquote>
      <input size=40 type="text" name="p" value="author:ellis title:muon*">
      <select name="f"><option value="">any field<option>title<option>author</select>
      <input class="formbutton" type="submit" name="action" value="SEARCH">
      </blockquote>
      </form>

    The most common fields you may want to use are
    <code>author</code>, <code>title</code>,
    <code>reportnumber</code>, <code>abstract</code>,
    <code>keyword</code>, <code>year</code>, <code>fulltext</code>,
    and <code>reference</code>.

<h3><a name="span">Span queries</a></h3>

<p>The span query is provided via a <code>-></code> sign.  For
example, to search for all documents on <em>muon decay</em> published
between <em>1983</em> and <em>1992</em>, type:

      <form action="<WEBURL>/search.py" method="get">
      <blockquote>
      <input size=60 type="text" name="p" value="muon decay year:1983->1992">
      <select name="f"><option value="">any field<option>title<option>author</select>
      <input class="formbutton" type="submit" name="action" value="SEARCH">
      </blockquote>
      </form>

To find all documents by authors with names ranging from <em>Ellis,
J</em> to <em>Ellis, Qqq</em>, type:

      <form action="<WEBURL>/search.py" method="get">
      <blockquote>
      <input size=60 type="text" name="p" value="author:&quot;Ellis, J&quot;->&quot;Ellis, Qqq&quot;">
      <select name="f"><option value="">any field<option>title<option>author</select>
      <input class="formbutton" type="submit" name="action" value="SEARCH">
      </blockquote>
      </form>

<h3><a name="combined">Combined metadata/fulltext/citation search</a></h3>

<p>All the syntax mentioned above can be combined together in one
   query.  For example, to find documents that have the word
   <em>ellis</em> inside author fields, that do not contain words like
   <em>muon</em>, 'muonic' etc in any field, that contain the phrase
   (or the substring, to be more precise) 'dense quark matter' inside
   abstract fields, and that were published in year starting by digits
   '200', type:

      <form action="<WEBURL>/search.py" method="get">
      <blockquote>
      <input size=60 type="text" name="p" value="author:ellis -muon* +abstract:'dense quark matter' year:200*">
      <select name="f"><option value="">any field<option>title<option>author</select>
      <input class="formbutton" type="submit" name="action" value="SEARCH">
      </blockquote>
      </form>

   Note that the default "any field" global index does contain only the metadata terms,
   not the citation nor fulltext terms.  You have to explicitely mention <code>fulltext</code>
   or <code>reference</code> index to search there.  For example, to find the term <em>Higgs</em>
   in either metadata, references or fulltext files, type:

      <form action="<WEBURL>/search.py" method="get">
      <blockquote>
      <input size=60 type="text" name="p" value="higgs or reference:higgs or fulltext:higgs">
      <select name="f"><option value="">any field<option>title<option>author</select>
      <input class="formbutton" type="submit" name="action" value="SEARCH">
      </blockquote>
      </form>       

   This permits an interesting combination of metadata, fulltext and citation search in
   the same query.  For example, to get all documents written by
   <em>Lin</em> whose fulltext files contain the words
   <em>Schwarzschild</em> and <em>AdS</em>, and who cite journal
   <em>Adv. Theor. Math. Phys.</em>, type:

      <form action="<WEBURL>/search.py" method="get">
      <blockquote>
      <input size=60 type="text" name="p" value="author:lin fulltext:Schwarzschild fulltext:AdS reference:&quot;Adv. Theor. Math. Phys.&quot;">
      <select name="f"><option value="">any field<option>title<option>author</select>
      <input class="formbutton" type="submit" name="action" value="SEARCH">
      </blockquote>
      </form>

<ifeq "<CFG_CERN_SITE>" "1" "
   <p><table class="errorbox">
   <thead>
   <tr>
   <th class="errorboxheader">
   IMPORTANT NOTE FOR THE CERN SITE
   </th>
   </tr>
   </thead>
   <tbody>
   <tr>
   <td class="errorboxbody">
      At the moment, fulltext files and references are not fully searchable on the CERN site.
      Assumed operational time: Q1 2004.
   </td>
   </tr>
   </tbody>
   </table>
">


<h3><a name="howto">Frequently asked questions</a></h3>

<h4><a name="howto-choose-terms">How to wisely choose your search terms (speed-wise)</a></h4>
<p>
<ul>
<li>Whenever possible, prefer word searches instead of phrase searches.
    Search rather for <code>black hole</code> than for <code>"black hole"</code>.
<li>Avoid common terms such as <code>and</code>, <code>of</code>, or <code>CERN</code>.
<li>If you are searching for a specific metadata information, such
    as a <em>report number</em>, choose corresponding index.
<li>If you are looking for a specific document collection, such
    as <em>Theses</em>, choose the
    <a href="<WEBURL>/?c=Theses">Theses</a> collection first, and start your search from there.
</ul>

<h4><a name="howto-list-of-publications">How to produce list of your publications</a></h4>
<p>
The author names are usually stored in a form with initials only such as <em>Ellis, J</em>.
To get the list of publications in this case, type:

      <form action="<WEBURL>/search.py" method="get">
      <blockquote>
      <input size=40 type="text" name="p" value="author:&quot;Ellis, J&quot;">
      <select name="f"><option value="">any field<option>title<option selected>author</select>
      <input class="formbutton" type="submit" name="action" value="SEARCH">
      </blockquote>
      </form>

Sometimes the first name may be spelled in full, such as <em>Ellis, John</em>.
To get the list of publications for both forms at the same time, you could use a
wildcard query:

      <form action="<WEBURL>/search.py" method="get">
      <blockquote>
      <input size=40 type="text" name="p" value="author:&quot;Ellis, J*&quot;">
      <select name="f"><option value="">any field<option>title<option>author</select>
      <input class="formbutton" type="submit" name="action" value="SEARCH">
      </blockquote>
      </form>

or a partial phrase matching:
    
      <form action="<WEBURL>/search.py" method="get">
      <blockquote>
      <input size=40 type="text" name="p" value="author:'Ellis, J'">
      <select name="f"><option value="">any field<option>title<option>author</select>
      <input class="formbutton" type="submit" name="action" value="SEARCH">
      </blockquote>
      </form>

The difference is the following.  The former technique (double quotes with a wildcard) matches any author whose
name <strong>starts by the string</strong> <code>Ellis, J</code>, so that it can match names like
<em>Ellis, J</em>, <em>Ellis, John</em>, <em>Ellis, Jonathan Richard</em>, etc.
The latter technique (single quotes) matches any author whose name <strong>contains the string</strong>
<code>Ellis, J</code> so that in addition to previous matches you have also obtained a match for <em>De Lellis, G</em>.

<p>Note that the latter kind of searching may be useful especially
in case of compound family names.  For example, imagine that
<em>Pepe-Altarelli, M</em> is spelled on some documets as <em>Altarelli, M</em>.
If you then type:

      <form action="<WEBURL>/search.py" method="get">
      <blockquote>
      <input size=40 type="text" name="p" value="author:'Altarelli, M'">
      <select name="f"><option value="">any field<option>title<option>author</select>
      <input class="formbutton" type="submit" name="action" value="SEARCH">
      </blockquote>
      </form>

you will obtain hits for the both forms (and possibly more, as already discussed above).

<p>It the two cases mentioned above we have seen how important it is to pay attention to false positives.
To include only the author name versions you are interested in, you can use a boolean OR query:

      <form action="<WEBURL>/search.py" method="get">
      <blockquote>
      <input size=40 type="text" name="p" value="author:&quot;Ellis, J&quot; or author:&quot;Ellis, John Rolfe&quot;">
      <select name="f"><option value="">any field<option>title<option>author</select>
      <input class="formbutton" type="submit" name="action" value="SEARCH">
      </blockquote>
      </form>

<p>Note that this may still lead to false positives, in case the abbreviated form
<em>Ellis, J</em> represents in addition a distinct person such as <em>Ellis, Jim</em>.
There is no way to distinguish them automatically.  You may want to contact the
<a href="mailto:<ADMINEMAIL>">administrators</a> of <CDSNAMEINTL>
who will take care of revising the author names with you so that the database would
contain a consistently spelled and properly formatted full name instead of just the
initials.

<h4><a name="howto-sort-pattern">How to sort according to a certain pattern</a></h4>

<p>You may select a certain field according to which sort the search
   results, for example to sort the results by main title.  However,
   sometimes you may want to sort by a report number and it happens
   that your documents have several of them.  For example, the report
   numbers <em>hep-ph/0204140</em>, <em>CERN-TH-2002-069</em> and
   <em>RM3-TH-02-4</em> all denote <a
   href="<WEBURL>/search.py?p=CERN-TH-2002-069&amp;f=reportnumber">the
   same document</a>.  Now if you sort your search results set
   containing this document, the system will take into consideration
   the first report number, that may be either of these three.
   Sometimes you may want to classify this document under its
   <em>hep-ph</em> number, sometimes under its <em>CERN</em> number,
   depending on whether you produce a list of CERN or hep-ph
   publications.  How can you influence the search engine to prefer
   one report number rather than the other?

   <p>In other words, the search engine by default answers a query
   like "sort by first author" or "sort by first report number", but
   sometimes you may want to ask the search engine to "sort by first
   report number that starts by the text <em>CERN-</em>".  The latter
   possibility is available via a "silent" sort parameter called
   <code>sp</code> (for "sort pattern") that sorts preferentially
   according to the given textual pattern if they can be found.  The
   parameter is "silent" in a way that it is not present in the search
   interface, you have to add it manually to your search URL.

   For example, to get all CERN-TH publications of the year 2001
   sorted by their CERN-TH numbers, you would search for
   <code>CERN-TH-2001*</code> within <code>reportnumber</code> index,
   and on the search results page, being satisfied with the results,
   you would add <code>&sp=CERN-TH</code> to the URL to sort the
   results preferentially by CERN-TH report numbers, to get a <a
   href="<WEBURL>/search.py?p=reportnumber%3A%22CERN-TH-2001*%22&sf=reportnumber&so=a&sp=CERN-TH">nicely
   sorted list</a> of all CERN-TH 2001 publications.

<h4><a name="howto-hepdoc">How to get documents from other servers (Google, SPIRES, KEK)</a></h4>

<p>On the search results page, links to other servers like <a
href="http://google.com/">Google</a>, <a
href="http://www.slac.stanford.edu/spires/hep/">SPIRES</a> or <a
href="http://www-lib.kek.jp/KISS/kiss_prepri.html">KEK</a> are
automatically proposed in a box entitled "Try your search on".  You
can simply click on the proposed links to run your query on these
search engines.

<p>Note that the links aren't printed if the search engine doesn't
support it.  For example, SPIRES or KEK cannot search for terms within
"any field", so we don't link to them in these cases.

<ifeq "<CFG_CERN_SITE>" "1" "

   <p>Note also that KEK has scanned a lot of old CERN reports.  If
    you find that we don't have fulltext to some old CERN report, it
    may be worthy to look there.  For example, search for <em>CERN
    ISR-MA/73-17</em> in our system:

      <form action="<WEBURL>/search.py" method="get">
      <blockquote>
      <input size=40 type="text" name="p" value="CERN ISR-MA/73-17">
      <select name="f"><option value="">any field<option>title<option>author<option selected>reportnumber</select>
      <input class="formbutton" type="submit" name="action" value="SEARCH">
      </blockquote>
      </form>

   and you will see that CDS contains the document in the archives only, i.e. not in a electronic format.
   However, if you follow the proposed <a href="http://www-lib.kek.jp/cgi-bin/kiss_prepri?RP=CERN%20ISR-MA/73-17">KEK search link</a>,
   you will see that KEK proposes &quot;scanned images&quot; that you can download.
">

<h4><a name="howto-fulltext">How to search in fulltext files</a></h4>

<p>If a metadata record contains some associated fulltext files, <CDSNAMEINTL>
tries to extract the textual information from the files and index it into a separate <code>fulltext</code> index.
To search for all records that contain the term <em>e-</em> in their fulltext files,
type:

      <form action="<WEBURL>/search.py" method="get">
      <blockquote>
      <input size=40 type="text" name="p" value="fulltext:e-">
      <select name="f"><option value="">any field<option>title<option>author</select>
      <input class="formbutton" type="submit" name="action" value="SEARCH">
      </blockquote>
      </form>

Recall that fulltext words aren't included in the default global ``any field'' index,
but that you may freely combine a fulltext and metadata search.  For example, to find all
articles written by <em>Ellis</em> that contain the word <em>muon</em> either in the
metadata or in the fulltext, type:

      <form action="<WEBURL>/search.py" method="get">
      <blockquote>
      <input size=40 type="text" name="p" value="muon or fulltext:muon and author:ellis">
      <select name="f"><option value="">any field<option>title<option>author</select>
      <input class="formbutton" type="submit" name="action" value="SEARCH">
      </blockquote>
      </form>
    

<ifeq "<CFG_CERN_SITE>" "1" "
   <p><table class="errorbox">
   <thead>
   <tr>
   <th class="errorboxheader">
   IMPORTANT NOTE FOR THE CERN SITE
   </th>
   </tr>
   </thead>
   <tbody>
   <tr>
   <td class="errorboxbody">
      At the moment, the fulltext indexes aren't available on the CERN site.  
      Assumed operational time: Q1 2004.
      Please use the
      <a href="http://weblib.cern.ch/fulltext.shtml">old fulltext interface</a>
      instead in the meantime.
   </td>
   </tr>
   </tbody>
   </table>
">

<h4><a name="howto-citations">How to search for citations</a></h4>

<p>If a metadata record contains an associated fulltext file, <CDSNAMEINTL>
tries to extract references automatically from that file and index
them into a separate <code>reference</code> index.  To search for
all records that cite <em>Ellis</em> in their reference lists,
type:

      <form action="<WEBURL>/search.py" method="get">
      <blockquote>
      <input size=40 type="text" name="p" value="reference:Ellis">
      <select name="f"><option value="">any field<option>title<option>author</select>
      <input class="formbutton" type="submit" name="action" value="SEARCH">
      </blockquote>
      </form>

To search for all records that cite preprint <em>hep-ph/0103062</em>
in their reference lists, type:

      <form action="<WEBURL>/search.py" method="get">
      <blockquote>
      <input size=40 type="text" name="p" value="reference:hep-ph/0103062">
      <select name="f"><option value="">any field<option>title<option>author</select>
      <input class="formbutton" type="submit" name="action" value="SEARCH">
      </blockquote>
      </form>

To search for all records that cite an article from <em>Giddings</em> and <em>Ross</em> published in 
<em>Physical Review D</em> in volume <em>61</em> in year <em>2000</em>, type:

      <form action="<WEBURL>/search.py" method="get">
      <blockquote>
      <input size=70 type="text" name="p" value="reference:giddings reference:ross reference:&quot;Phys. Rev., D&quot; reference:61 reference:2000">
      <select name="f"><option value="">any field<option>title<option>author</select>
      <input class="formbutton" type="submit" name="action" value="SEARCH">
      </blockquote>
      </form>

Recall that citation terms aren't included in the default global "any field" index,
but that you may freely combine a citation search with a metadata search.
For example, to find all articles on <em>standard model</em> that aren't written by
<em>Ellis</em> but that do cite him, type: 

      <form action="<WEBURL>/search.py" method="get">
      <blockquote>
      <input size=40 type="text" name="p" value="standard model -author:ellis reference:ellis">
      <select name="f"><option value="">any field<option>title<option>author</select>
      <input class="formbutton" type="submit" name="action" value="SEARCH">
      </blockquote>
      </form>

<ifeq "<CFG_CERN_SITE>" "1" "
   <p><table class="errorbox">
   <thead>
   <tr>
   <th class="errorboxheader">
   IMPORTANT NOTE FOR THE CERN SITE
   </th>
   </tr>
   </thead>
   <tbody>
   <tr>
   <td class="errorboxbody">
      At the moment, the reference indexes aren't available on the CERN site.
      The citation search is therefore impossible at the moment.
      Assumed operational time: Q1 2004.
   </td>
   </tr>
   </tbody>
   </table>
">

