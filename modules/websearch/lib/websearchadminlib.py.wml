## Administrator interface for WebSearch

## This file is part of the CERN Document Server Software (CDSware).
## Copyright (C) 2002 CERN.
##
## The CDSware is free software; you can redistribute it and/or
## modify it under the terms of the GNU General Public License as
## published by the Free Software Foundation; either version 2 of the
## License, or (at your option) any later version.
##
## The CDSware is distributed in the hope that it will be useful, but
## WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
## General Public License for more details.  
##
## You should have received a copy of the GNU General Public License
## along with CDSware; if not, write to the Free Software Foundation, Inc.,
## 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

## read config variables:
#include "config.wml"
#include "configbis.wml"
#include "cdswmllib.wml"

<protect>## $Id$</protect>
<protect>## DO NOT EDIT THIS FILE!  IT WAS AUTOMATICALLY GENERATED FROM CDSware WML SOURCES.</protect>
"""CDSware WebSearch Administrator Interface."""

__lastupdated__ = """<: print `date +"%d %b %Y %H:%M:%S %Z"`; :>"""

## fill config variables:

import access_control_engine as acce
import cgi
import re
import MySQLdb
import Numeric
import os
import urllib
from zlib import compress,decompress
from bibrankadminlib import modify_translations, get_current_name,get_name,get_rnk_nametypes,get_languages,check_user,is_adminuser,adderrorbox,addadminbox,tupletotable,tupletotable_onlyselected,addcheckboxes,createhiddenform,serialize_via_numeric_array_dumps,serialize_via_numeric_array_compr,serialize_via_numeric_array_escape,serialize_via_numeric_array,deserialize_via_numeric_array,serialize_via_marshal,deserialize_via_marshal
from messages import *
from dbquery import run_sql
from config import *
from webpage import page, pageheaderonly, pagefooteronly
from webuser import getUid, get_email
from mod_python import apache

__version__ = "$Id$"

def getnavtrail(previous = ''):
    navtrail = """<a class=navtrail href="%s/admin/">Administrator's Area</a> &gt; <a class=navtrail href="%s/admin/websearch/">WebSearch Admin</a> """ % (weburl, weburl)
    navtrail = navtrail + previous
    return navtrail

def perform_modifytranslations(colID, ln=cdslang, sel_type='', trans=[], confirm=-1, callback='yes'):
    """Modify the translations of a collection"""
    
    output = ''
    subtitle = ''
    cdslangs = get_languages()
    if confirm in ["2", 2] and colID:
        finresult = modify_translations(colID, cdslangs, sel_type, trans, "collection")
    col_dict = dict(get_current_name('', ln, get_col_nametypes()[0][0], "collection"))
        
    if colID and col_dict.has_key(int(colID)):
        colID = int(colID)
        subtitle = """<a name="3">3. Modify translations for collection '%s'</a></br>""" % col_dict[colID]
        
        if type(trans) is str:
            trans = [trans]
        if sel_type == '':
            sel_type = get_col_nametypes()[0][0]
            
        header = ['Language', 'Translation']
        actions = []
                            
        types = get_col_nametypes()
        if len(types) > 1:
            text  = """
            <span class="adminlabel">Name type</span>
            <select name="sel_type" class="admin_w200">
            """
            for (key, value) in types:
                text += """<option value="%s" %s>%s""" % (key, key == sel_type and 'selected="selected"' or '', value)
                trans_names = get_name(colID, ln, key, "collection")
                if trans_names and trans_names[0][0]:
                    text += ": %s" % trans_names[0][0]
                text += "</option>"
            text += """</select>"""
        
            output += createhiddenform(action="modifytranslations#3",
                                       text=text,
                                       button="Select",
                                       colID=colID,
                                       ln=ln,
                                       confirm=0)


        if confirm in [-1, "-1", 0, "0"]:
            trans = []
            for (key, value) in cdslangs:
                try:
                    trans_names = get_name(colID, key, sel_type, "collection")
                    trans.append(trans_names[0][0])
                except StandardError, e:
                    trans.append('')

        for nr in range(0,len(cdslangs)):
            actions.append([cdslangs[nr][1]])
            actions[-1].append('<input type="text" name="trans" size="30" value="%s"/>' % trans[nr])

        text = tupletotable(header=header, tuple=actions)
        output += createhiddenform(action="modifytranslations#3",
                                   text=text,
                                   button="Modify",
                                   colID=colID,
                                   sel_type=sel_type,
                                   ln=ln,
                                   confirm=1)

        if sel_type and len(trans):
            if confirm in ["1", 1]:
                text = """<b>Please confirm modification of translations for collection '%s'.</b>""" % (col_dict[colID])
                output += createhiddenform(action="modifytranslations#3",
                                           text=text,
                                           button="Confirm",
                                           colID=colID,
                                           sel_type=sel_type,
                                           trans=trans,
                                           ln=ln,
                                           confirm=2)

            elif confirm in ["2", 2]:
                if finresult:
                    output += """<b><span class="info">Translations modified for collection '%s'.</span></b>""" % (col_dict[colID])
                else:
                    output += """<b><span class="info">Sorry, could not modify translations for collection '%s'.</span></b>""" % (col_dict[colID])
                    
    try:
        body = [output, extra]
    except NameError:
        body = [output]

    if callback:
        return perform_editcollection(colID, ln, "perform_modifytranslations", addadminbox(subtitle, body))
    else:
        return addadminbox(subtitle, body)

def perform_modifyrankmethods(colID, ln=cdslang, func='', rnkID='', confirm=0, callback='yes'):
    """Modify which rank methods is visible to the collection"""
    
    output = ""
    subtitle = ""

    col_dict = dict(get_current_name('', ln, get_col_nametypes()[0][0], "collection"))
    rnk_dict = dict(get_current_name('',ln, get_rnk_nametypes()[0][0], "rnkMETHOD"))
    if colID and col_dict.has_key(int(colID)):
        colID = int(colID)
        if func in ["0", 0] and confirm in ["1", 1]:
                finresult = attach_rnk_col(colID, rnkID)
        elif func in ["1", 1] and confirm in ["1", 1]:
                finresult = detach_rnk_col(colID, rnkID)

        subtitle = """<a name="9">9. Modify rank options for collection '%s'</a></br>""" % col_dict[colID]
        output  = """
        <dl>
        <dt>Enable:</dt>
        <dd>To make a rank method visible in the search interface for a collection,
        choose the wanted rank method and press the "Enable" button.</dd>
        <dt>Disable:</dt>
        <dd>To hide a rank method from the search interface for a collection,
        choose the wanted rank method and press the "Disable" button.</dd>
        <dt>The rank methods enabled for the collection '%s' is:</dt>
        """ % col_dict[colID]
        
        rnkmethods = get_col_rnk(colID, ln)
        output += """<dd>"""
        if not rnkmethods:
            output += """No rank methods"""
        else:
            for id, name in rnkmethods:
                output += """%s, """ % name
        output += """</dd>
        </dl>
        """
     
        rnk_list = get_current_name('',ln, get_rnk_nametypes()[0][0], "rnkMETHOD")
        rnk_dict_in_col = dict(get_col_rnk(colID, ln))
        rnk_list = filter(lambda x: not rnk_dict_in_col.has_key(x[0]), rnk_list)
        if rnk_list:
            text  = """
            <span class="adminlabel">Enable:</span>
            <select name="rnkID" class="admin_w200">
            <option value="-1">- select rank method -</option>
            """
            for (id, name) in rnk_list:
                text += """<option value="%s" %s>%s</option>""" % (id, (func in ["0", 0] and confirm in ["0", 0] and int(rnkID) == int(id)) and 'selected="selected"' or '' , name)
            text += """</select>"""
            output += createhiddenform(action="modifyrankmethods#9",
                                       text=text,
                                       button="Enable",
                                       colID=colID,
                                       ln=ln,
                                       func=0,
                                       confirm=0)

        if confirm in ["0", 0] and func in ["0", 0] and int(rnkID) != -1:
            text = "<b>Please confirm to enable rank method '%s' for the collection '%s'</b>" % (dict(rnk_list)[int(rnkID)], col_dict[colID])
            output += createhiddenform(action="modifyrankmethods#9",
                                       text=text,
                                       button="Confirm",
                                       colID=colID,
                                       ln=ln,
                                       rnkID=rnkID,
                                       func=0,
                                       confirm=1)

        elif confirm in ["1", 1] and func in ["0", 0] and len(rnkID) > 0:
            if finresult:
                output += """<b><span class="info">Rank method '%s' enabled for collection '%s'</span></b>""" % (rnk_dict[int(rnkID)], col_dict[colID]) 
            else:
                output += """<b><span class="info">Rank method '%s' could not be enabled for collection '%s'</span></b>""" % (rnk_dict[int(rnkID)], col_dict[colID])
    
        coll_list = get_col_rnk(colID, ln)
        if coll_list:
            text  = """
            <span class="adminlabel">Disable:</span>
            <select name="rnkID" class="admin_w200">
            <option value="-1">- select rank method-</option>
            """
        
            for (id, name) in coll_list:
                text += """<option value="%s" %s>%s</option>""" % (id, (func in ["1", 1] and confirm in ["0", 0] and int(rnkID) == int(id)) and 'selected="selected"' or '' , name)
            text += """</select>"""
            output += createhiddenform(action="modifyrankmethods#9",
                                       text=text,
                                       button="Disable",
                                       colID=colID,
                                       ln=ln,
                                       func=1,
                                       confirm=0)
             
        if confirm in ["0", 0] and func in ["1", 1] and int(rnkID) != -1:
            text = "<b>Please confirm to disable rank method '%s' for collection '%s'</b>" % (rnk_dict[int(rnkID)], col_dict[colID])
            output += createhiddenform(action="modifyrankmethods#9",
                                       text=text,
                                       button="Confirm",
                                       colID=colID,
                                       ln=ln,
                                       rnkID=rnkID,
                                       func=1,
                                       confirm=1)
        elif confirm in ["1", 1] and func in ["1", 1]:
            if finresult:
                output += """<b><span class="info">Rank method '%s' disabled for collection '%s'</span></b>""" % (rnk_dict[int(rnkID)], col_dict[colID])
            else:
                output += """<b><span class="info">Rank method '%s' could not be disabled for collection '%s'</span></b>""" % (rnk_dict[int(rnkID)], col_dict[colID])
                    
    try:
        body = [output, extra]
    except NameError:
        body = [output]

    if callback:
        return perform_editcollection(colID, ln, "perform_modifyrankmethods", addadminbox(subtitle, body))
    else:
        return addadminbox(subtitle, body)

def perform_addcollectiontotree(colID, ln=cdslang, add_dad='', add_son='', rtype='', mtype='', callback='yes', confirm=-1):
    output = ""
    output2 = ""
    subtitle = "Attach collection to tree"

    col_dict = dict(get_current_name('', ln, get_col_nametypes()[0][0], "collection"))
    if confirm in [0, "0"] and not (add_son and add_dad and rtype):
        output2 += """<b><span class="info">All fields must be filled.</span></b></br></br>
        """
    elif add_son and add_dad and rtype:
        add_son = int(add_son)
        add_dad = int(add_dad)
        if confirm in [0, "0"]:
            if add_son == add_dad:
                output2 += """<b><span class="info">Cannot add a collection as a pointer to itself.</span></b></br></br>
                """
            elif check_col(add_dad, add_son):
                text = """<b>Do you want to add the collection '%s' as a %s subcollection of '%s'.</b>
                """ % (col_dict[add_son], (rtype=="r" and 'primary' or 'virtual'), col_dict[add_dad])
                output2 += createhiddenform(action="%s/admin/websearch/websearchadmin.py/addcollectiontotree" % weburl,
                                           text=text,
                                           button="Confirm",
                                           colID=colID,
                                           add_son=add_son,
                                           add_dad=add_dad,
                                           ln=ln,
                                           rtype=rtype,
                                           confirm=1)
            else:
                output2 += """<b><span class="info">Cannot add the collection '%s' as a %s subcollection of '%s' since it will either create a loop, or the association already exists.</span></b></br></br>
                """ % (col_dict[add_son], (rtype=="r" and 'primary' or 'virtual'), col_dict[add_dad])
        else:
            if add_col_dad_son(add_dad, add_son, rtype):
                output2 += """<b><span class="info">Added the collection '%s' as a %s subcollection of '%s'.</span></b></br></br>
                """ % (col_dict[add_son], (rtype=="r" and 'primary' or 'virtual'), col_dict[add_dad])
            else:
                output2 += """<b><span class="info">Could not add the collection '%s' as a %s subcollection of '%s'.</span></b></br></br>
                """ % (col_dict[add_son], (rtype=="r" and 'primary' or 'virtual'), col_dict[add_dad])
        add_son = ''
        add_dad = ''
        rtype = ''

    tree = get_col_tree(colID)
    col_list = col_dict.items()
    col_list.sort(compare_on_val)
    
    text = """
    <span class="adminlabel">Attach which</span>
    <select name="add_son" class="admin_w200">
    <option value="">- select son -</option>
    """
    for (id, name) in col_list:
        if id != colID:
            text += """<option value="%s" %s>%s</option>""" % (id, str(id)==add_son and 'selected="selected"' or '', name)
    text += """
    </select></br>
    <span class="adminlabel">Attach to</span>
    <select name="add_dad" class="admin_w200">
    <option value="">- select father -</option>
    """
    
    for (id, name) in col_list:
        text += """<option value="%s" %s>%s</option>
        """ % (id, str(id)==add_dad and 'selected="selected"' or '', name)
    text += """</select></br>
    """
    
    text += """
    <span class="adminlabel">Relationship</span>
    <select name="rtype" class="admin_w200">
    <option value="">- select relationship -</option>
    <option value="r" %s>Primary (Narrow by...)</option>
    <option value="v" %s>Virtual (Focus on...)</option>
    </select>
    """ % ((rtype=="r" and 'selected="selected"' or ''), (rtype=="v" and 'selected="selected"' or ''))
    output = createhiddenform(action="%s/admin/websearch/websearchadmin.py/addcollectiontotree" % weburl,
                               text=text,
                               button="Add",
                               colID=colID,
                               ln=ln,
                               confirm=0)
    output += output2
    try:
        body = [output, extra]
    except NameError:
        body = [output]

    if callback:
        return perform_index(colID, ln, mtype="perform_addcollectiontotree", content=addadminbox(subtitle, body))
    else:
        return addadminbox(subtitle, body)
    
    
def perform_addcollection(colID, ln=cdslang, colNAME='', dbquery='', rest='', callback="yes", confirm=-1):
    """form to add a new rank method with these values:
    """

    output = ""
    subtitle = "Create new collection"
    text = """
    <span class="adminlabel">Coll name</span>
    <input class="admin_wvar" type="text" name="colNAME" value="%s" /></br>
    """ % colNAME
    output = createhiddenform(action="%s/admin/websearch/websearchadmin.py/addcollection" % weburl,
                              text=text,
                              colID=colID,
                              ln=ln,
                              button="Add collection",
                              confirm=0)
    if colNAME:
        if confirm in ["0", 0]:
            text = """<b>Add collection with default name: '%s'.</b>
            """ % (colNAME)
            output += createhiddenform(action="%s/admin/websearch/websearchadmin.py/addcollection" % weburl,
                                       text=text,
                                       colID=colID,
                                       colNAME=colNAME,
                                       dbquery=dbquery,
                                       rest=rest,
                                       button="Confirm",
                                       confirm=1)
        elif confirm in ["1", 1]:
            res = add_col(colNAME, '', '')
            if res:
                output += """<b><span class="info">Added new collection with default name '%s'</span></b>
                """ % colNAME
            else:
                output += """<b><span class="info">Sorry, could not add collection, most likely the collection already exists.</span></b>
                """
    elif confirm in ["0", 0]:
        output += """<b><span class="info">Please give the collection a name.</span></b>
        """
        
    try:
        body = [output, extra]
    except NameError:
        body = [output]

    if callback:
        return perform_index(colID, ln=ln, mtype="perform_addcollection", content=addadminbox(subtitle, body))
    else:
        return addadminbox(subtitle, body)

def perform_modifydbquery(colID, ln=cdslang, dbquery='', callback='yes', confirm=-1):
    """form to add a new rank method with these values:
    """
 
    subtitle = ''
    output  = """
    <dl>
     <dt>DBquery:</dt>
     <dd>The query related to the collection.</dd>
    </dl>
    """

    col_dict = dict(get_current_name('', ln, get_col_nametypes()[0][0], "collection"))
    if colID and col_dict.has_key(int(colID)):
        colID = int(colID)
        subtitle = """<a name="1">1. Modify DBquery for collection '%s'</a>""" % col_dict[colID]

        if confirm == -1:
            res = run_sql("SELECT dbquery FROM collection WHERE id=%s" % colID)
            dbquery = res[0][0]
        text = """
        <span class="adminlabel">DBquery</span>
        <input class="admin_wvar" type="text" name="dbquery" value="%s" /></br>
        """ % dbquery
        output += createhiddenform(action="modifydbquery",
                                   text=text,
                                   button="Modify",
                                   colID=colID,
                                   ln=ln,
                                   confirm=0)

        if confirm in ["0", 0]:
            text = """<b>Change DBquery to: '%s'.</b>""" % dbquery
            output += createhiddenform(action="modifydbquery",
                                       text=text,
                                       colID=colID,
                                       dbquery=dbquery,                                    
                                       button="Confirm",
                                       confirm=1)
        elif confirm in ["1", 1]:
            res = modify_dbquery(colID, dbquery)
            if res:
                text = """<b><span class="info">Changed DBquery.</span></b>""" 
            else:
                text = """<b><span class="info">Sorry, could not change DBquery.</span></b>"""
            output += text
          
    try:
        body = [output, extra]
    except NameError:
        body = [output]
        
    if callback:
        return perform_editcollection(colID, ln, "perform_modifydbquery", addadminbox(subtitle, body))
    else:
        return addadminbox(subtitle, body)
    
def perform_modifyrestricted(colID, ln=cdslang, rest='', callback='yes', confirm=-1):
    """form to add a new rank method with these values:
    """

    subtitle = ''
    output  = """
    <dl>
     <dt>Restricted:</dt>
     <dd>The apache user/group allowed to access this collection.</dd>
    </dl>
    """

    col_dict = dict(get_current_name('', ln, get_col_nametypes()[0][0], "collection"))
    if colID and col_dict.has_key(int(colID)):
        colID = int(colID)
        subtitle = """<a name="2">2. Modify access restrictions for collection '%s'</a>""" % col_dict[colID]
        if confirm == -1:
            res = run_sql("SELECT restricted FROM collection WHERE id=%s" % colID)
            rest = res[0][0]
        text = """
        <span class="adminlabel">Restricted</span>
        <input class="admin_wvar" type="text" name="rest" value="%s" /></br>
        """ % rest
    
        output += createhiddenform(action="modifyrestricted",
                                   text=text,
                                   button="Modify",
                                   colID=colID,
                                   ln=ln,
                                   confirm=0)

        if confirm in ["0", 0]:
            text = """<b>Change Restricted to: '%s'.</b>""" % rest
            output += createhiddenform(action="modifyrestricted",
                                       colID=colID,
                                       text=text,
                                       rest=rest,                                    
                                       button="Confirm",
                                       confirm=1)
        elif confirm in ["1", 1]:
            res = modify_restricted(colID, rest)
            if res:
                text = """<b><span class="info">Changed Restricted.</span></b>""" 
            else:
                text = """<b><span class="info">Sorry, could not change Restricted.</span></b>"""
            output += text

    try:
        body = [output, extra]
    except NameError:
        body = [output]
        
    if callback:
        return perform_editcollection(colID, ln, "perform_modifyrestricted", addadminbox(subtitle, body))
    else:
        return addadminbox(subtitle, body)

def perform_modifycollectiontree(colID, ln=cdslang, move_up='', move_down='', move_from='', move_to='', delete='', rtype='', callback='yes', confirm=0):
    colID = int(colID)
    tree = get_col_tree(colID, rtype)
    col_dict = dict(get_current_name('', ln, get_col_nametypes()[0][0], "collection"))

    subtitle = "Modify collection tree: %s" % col_dict[colID]
    fin_output = ""
    output = ""
    
    try:
        if move_up:
            move_up = int(move_up)
            switch = find_last(tree, move_up)
            if switch and switch_col_treescore(tree[move_up], tree[switch]):
                output += """<b><span class="info">Moved the %s collection '%s' up and '%s' down.</span></b></br></br>
                """ % ((rtype=="r" and 'primary' or 'virtual'), col_dict[tree[move_up][0]], col_dict[tree[switch][0]])
            else:
                output += """<b><span class="info">Could not move the %s collection '%s' up and '%s' down.</span></b></br></br>
                """ % ((rtype=="r" and 'primary' or 'virtual'), col_dict[tree[move_up][0]], col_dict[tree[switch][0]])
        elif move_down:
            move_down = int(move_down)
            switch = find_next(tree, move_down)
            if switch and switch_col_treescore(tree[move_down], tree[switch]):
                output += """<b><span class="info">Moved the %s collection '%s' down and '%s' up.</span></b></br></br>
                """ % ((rtype=="r" and 'primary' or 'virtual'), col_dict[tree[move_down][0]], col_dict[tree[switch][0]])
            else:
                output += """<b><span class="info">Could not move the %s collection '%s' up and '%s' down.</span></b></br></br>
                """ % ((rtype=="r" and 'primary' or 'virtual'), col_dict[tree[move_up][0]],col_dict[tree[switch][0]])
        elif delete:
            delete = int(delete)
            if confirm in [0, "0"]:
                text = """<b>Do you want to remove the %s collection '%s' in subdirectory '%s' together with its subcollections.</b>
                """ % ((tree[delete][4]=="r" and 'primary' or 'virtual'), col_dict[tree[delete][0]], col_dict[tree[delete][3]])
                output += createhiddenform(action="%s/admin/websearch/websearchadmin.py/modifycollectiontree#tree" % weburl,
                                           text=text,
                                           button="Confirm",
                                           colID=colID,
                                           delete=delete,
                                           rtype=rtype,
                                           ln=ln,
                                           confirm=1)
                output += createhiddenform(action="%s/admin/websearch/websearchadmin.py/index#tree" % weburl,
                                           text="<b>To cancel</b>",
                                           button="Cancel",
                                           colID=colID,
                                           ln=ln)
            else:
                if remove_col_subcol(tree[delete][0], tree[delete][3]):
                    output += """<b><span class="info">Removed the %s collection '%s' in subdirectory '%s' together with its subcollections.</span></b></br></br>
                    """ % ((tree[delete][4]=="r" and 'primary' or 'virtual'), col_dict[tree[delete][0]], col_dict[tree[delete][3]])
                else:
                    output += """<b><span class="info">Could not remove the %s collection '%s' in subdirectory '%s' together with its subcollections.</span></b></br></br>
                    """ % ((rtype=="r" and 'primary' or 'virtual'), col_dict[tree[delete][0]], col_dict[tree[delete][3]])
                delete = ''
        elif move_from and not move_to:
            move_from_rtype = move_from[0]
            move_from_id = int(move_from[1:len(move_from)])
            text = """<b>Select collection to place the %s collection '%s' under.</b></br></br>
            """ % ((move_from_rtype=="r" and 'primary' or 'virtual'), col_dict[tree[move_from_id][0]])
            output += createhiddenform(action="%s/admin/websearch/websearchadmin.py/index#tree" % weburl,
                                       text=text,
                                       button="Cancel",
                                       colID=colID,
                                       ln=ln)
        elif move_from and move_to:
            move_from_rtype = move_from[0]
            move_from_id = int(move_from[1:len(move_from)])
            move_to_rtype = move_to[0]
            move_to_id = int(move_to[1:len(move_to)])
            tree_from = get_col_tree(colID, move_from_rtype)
            tree_to = get_col_tree(colID, move_to_rtype)
            
            if confirm in [0, '0']:
                if move_from_id == move_to_id and move_from_rtype==move_to_rtype:
                    output += """<b><span class="info">Cannot move to itself.</span></b></br></br>
                    """
                elif tree_from[move_from_id][3] == tree_to[move_to_id][0] and move_from_rtype==move_to_rtype:
                    output += """<b><span class="info">The collection is already there.</span></b></br></br>
                    """
                elif check_col(tree_to[move_to_id][0], tree_from[move_from_id][0]) or (tree_to[move_to_id][0] == 1 and tree_from[move_from_id][3] == tree_to[move_to_id][0] and move_from_rtype != move_to_rtype):
                    text = """<b>Move %s collection '%s' to the %s collection '%s'.</b>
                    """ % ((tree_from[move_from_id][4]=="r" and 'primary' or 'virtual'), col_dict[tree_from[move_from_id][0]], (tree_to[move_to_id][4]=="r" and 'primary' or 'virtual'), col_dict[tree_to[move_to_id][0]])
                    output += createhiddenform(action="%s/admin/websearch/websearchadmin.py/modifycollectiontree#tree" % weburl,
                                               text=text,
                                               button="Confirm",
                                               colID=colID,
                                               move_from=move_from,
                                               move_to=move_to,
                                               ln=ln,
                                               rtype=rtype,
                                               confirm=1)
                    output += createhiddenform(action="%s/admin/websearch/websearchadmin.py/index#tree" % weburl,
                                               text="""<b>To cancel</b>""",
                                               button="Cancel",
                                               colID=colID,
                                               ln=ln)
                else:
                    output += """<b><span class="info">Cannot move the collection '%s' and set it as a subcollection of '%s' since it will create a loop.</span></b></br></br>
                    """ % (col_dict[tree_from[move_from_id][0]], col_dict[tree_to[move_to_id][0]])
            else:
                if (move_to_id != 0 and move_col_tree(tree_from[move_from_id], tree_to[move_to_id])) or (move_to_id == 0 and move_col_tree(tree_from[move_from_id], tree_to[move_to_id], move_to_rtype)):
                    output += """<b><span class="info">Moved collection %s collection '%s' to the %s collection '%s'.</span></b></br></br>
                    """ % ((move_from_rtype=="r" and 'primary' or 'virtual'), col_dict[tree_from[move_from_id][0]], (move_to_rtype=="r" and 'primary' or 'virtual'), col_dict[tree_to[move_to_id][0]])
                else:
                    output += """<b><span class="info">Could not move collection %s collection '%s' to the %s collection '%s'.</span></b></br></br>
                    """ % ((move_from_rtype=="r" and 'primary' or 'virtual'), col_dict[tree_from[move_from_id][0]], (move_to_rtype=="r" and 'primary' or 'virtual'), col_dict[tree_to[move_to_id][0]])
            move_from = ''
            move_to = ''
        else:
            output += """</br></br>
            """
    except StandardError, e:
        return """<b><span class="info">An error occured.</span></b>
        """
 
    output += """<table border ="0" width="100%">
    <tr><td width="50%">
    <b>Narrow by collection:</b>
    </td><td width="50%">
    <b>Focus on...:</b>
    </td></tr><tr><td valign="top">
    """
    tree = get_col_tree(colID, 'r')
    output += create_colltree(tree, col_dict, colID, ln, move_from, move_to, 'r', "yes")
    output += """</td><td valign="top">
    """
    tree = get_col_tree(colID, 'v')
    output += create_colltree(tree, col_dict, colID, ln, move_from, move_to, 'v', "yes")
    output += """</td>
    </tr>
    </table>
    """

    try:
        body = [output, extra]
    except NameError:
        body = [output]

    if callback:
        return perform_index(colID, ln, mtype="perform_modifycollectiontree", content=addadminbox(subtitle, body))
    else:
        return addadminbox(subtitle, body)

def perform_addportalbox(colID, ln=cdslang, title='', body='', callback='yes', confirm=-1):
    """form to add a new rank method with these values:
    """

    col_dict = dict(get_current_name('', ln, get_col_nametypes()[0][0], "collection"))
    colID = int(colID)
    subtitle = """<a name="5.1"></a>Create new portalbox"""
    text = """
    <span class="adminlabel">Title</span>
    <input class="admin_wvar" type="text" name="title" value="%s" /></br>
    <span class="adminlabel">Body</span>
    <textarea cols="50" rows="10" class="admin_wvar" type="text" name="body">%s</textarea></br>
    """ % (title, body)
    output = createhiddenform(action="addportalbox#5.1",
                              text=text,
                              button="Add",
                              colID=colID,
                              ln=ln,
                              confirm=0)
    
    if title and body:
        if confirm in [0, "0"]:
            text ="""<b>Do you want to add the portalbox '%s'.</b>
            """ % title
            output += createhiddenform(action="%s/admin/websearch/websearchadmin.py/addportalbox#5.1" % weburl,
                                       text=text,
                                       button="Confirm",
                                       colID=colID,
                                       title=title,
                                       body=body,                                     
                                       ln=ln,
                                       confirm=1)
        elif confirm in [1, "1"]:
            res = add_pbx(title, body)
            if res:
                output += """<b><span class="info">Added the portalbox '%s'. To add the portalbox to the collection, go <a href="addexistingportalbox?colID=%s&amp;ln=%s&amp;pbxID=%s#5">here</a>.</span></b>""" % (title, colID, ln, res[0][0])
            else:
                output += """<b><span class="info">Cannot add the portalbox '%s'.</span></b>
                """ % title
    elif confirm in [0, "0"]:
        output  += """<b><span class="info">All fields must be filled.</span></b>
        """
        
                
    try:
        body = [output, extra]
    except NameError:
        body = [output]

    return perform_showportalboxes(colID, ln, content=addadminbox(subtitle, body))

def perform_addexistingportalbox(colID, ln=cdslang, pbxID=-1, score=0, position='', sel_ln='', callback='yes', confirm=-1):
    """form to add a new rank method with these values:
    """
 
    subtitle = """<a name="5.2"></a>Add existing portalbox to collection"""
    output  = ""

    colID = int(colID)
    res = get_pbx()
    pos = get_pbx_pos()
    lang = dict(get_languages())
    col_dict = dict(get_current_name('', ln, get_col_nametypes()[0][0], "collection"))
    pbx_dict = dict(map(lambda x: (x[0], x[1]), res))

    col_pbx = get_col_pbx(colID)
    col_pbx = dict(map(lambda x: (x[0], x[5]), col_pbx))
    if len(res) > 0:
        text  = """
        <span class="adminlabel">Portalbox</span>
        <select name="pbxID" class="admin_w200">
        <option value="-1">- Select portalbox -</option>
        """
        for (id, t_title, t_body) in res:
            if not col_pbx.has_key(id):
                text += """<option value="%s" %s>%s - %s</option>
                """ % (id, id  == int(pbxID) and 'selected="selected"' or '', t_title, cgi.escape(t_body[0:10]))
        text += """</select></br>
        <span class="adminlabel">Language</span>
        <select name="sel_ln" class="admin_w200">
        <option value="">- Select language -</option>
        """
        listlang = lang.items()
        listlang.sort()
        for (key, name) in listlang:
            text += """<option value="%s" %s>%s</option>
            """ % (key, key == sel_ln and 'selected="selected"' or '', name)
        text += """</select></br>
        <span class="adminlabel">Position</span>
        <select name="position" class="admin_w200">
        <option value="">- Select position -</option>
        """
        listpos = pos.items()
        listpos.sort()
        for (key, name) in listpos:
            text += """<option value="%s" %s>%s</option>""" % (key, key==position and 'selected="selected"' or '', name)
        text += """</select></br>
        <span class="adminlabel">Score</span>
        <input class="admin_wvar" type="text" name="score" value="%s" /></br>
        """ % score
        
        output += createhiddenform(action="addexistingportalbox#5.2",
                                   text=text,
                                   button="Add",
                                   colID=colID,
                                   ln=ln,
                                   confirm=0)
    else:
        output  = """No existing portalboxes to add, please create a new one.
        """
        
    if pbxID > -1 and score and position and sel_ln:
        pbxID = int(pbxID)
        if confirm in [0, "0"]:
            text = """<b>Do you want to add the portalbox '%s' to the collection '%s'.</b>
            """ % (pbx_dict[pbxID], col_dict[colID])
            output += createhiddenform(action="%s/admin/websearch/websearchadmin.py/addexistingportalbox#5.2" % weburl,
                                       text=text,
                                       button="Confirm",
                                       colID=colID,
                                       pbxID=pbxID,
                                       sel_ln=sel_ln,                                     
                                       score=score,
                                       position=position,
                                       ln=ln,
                                       confirm=1)
        elif confirm in [1, "1"]:
            res = add_col_pbx(colID, pbxID, sel_ln, score, position)
            if res:
                output += """<b><span class="info">Added the portalbox '%s' to the collection '%s'.</span></b>
                """ % (pbx_dict[pbxID], col_dict[colID])
            else:
                output += """<b><span class="info">Cannot add the portalbox '%s' to the collection '%s'.</span></b>
                """ % (pbx_dict[pbxID], col_dict[colID])
    elif pbxID > -1:
        output  += """<b><span class="info">All fields must be filled.</span></b>
        """

    try:
        body = [output, extra]
    except NameError:
        body = [output]

    output = "</br>" + addadminbox(subtitle, body)
    return perform_showportalboxes(colID, ln, content=output)

def perform_deleteportalbox(colID, ln=cdslang, pbxID=-1, callback='yes', confirm=-1):
    """form to add a new rank method with these values:
    """
 
    subtitle = """<a name="5.3"></a>Delete an unused portalbox"""
    output  = ""

    colID = int(colID)
    if pbxID not in [-1," -1"] and confirm in [1, "1"]:
        ares = get_pbx()
        pbx_dict = dict(map(lambda x: (x[0], x[1]), ares))
        pname = pbx_dict[int(pbxID)]
        ares = delete_pbx(int(pbxID))
                
    res = get_pbx()
    col_dict = dict(get_current_name('', ln, get_col_nametypes()[0][0], "collection"))
    pbx_dict = dict(map(lambda x: (x[0], x[1]), res))
    col_pbx = get_col_pbx()
    col_pbx = dict(map(lambda x: (x[0], x[5]), col_pbx))

    if len(res) > 0:
        text  = """
        <span class="adminlabel">Portalbox</span>
        <select name="pbxID" class="admin_w200">
        """
        text += """<option value="-1">- Select portalbox -"""
        for (id, t_title, t_body) in res:
            if not col_pbx.has_key(id):
                text += """<option value="%s" %s>%s - %s""" % (id, id  == int(pbxID) and 'selected="selected"' or '', t_title, cgi.escape(t_body[0:10]))
            text += "</option>"
        text += """</select></br>"""

        output += createhiddenform(action="deleteportalbox#5.3",
                                   text=text,
                                   button="Delete",
                                   colID=colID,
                                   ln=ln,
                                   confirm=0)
        
    if pbxID not in [-1,"-1"]:
        pbxID = int(pbxID)
        if confirm in [0, "0"]:
            text = """<b>Do you want to delete the portalbox '%s'.</b>
            """ % pbx_dict[pbxID]
            output += createhiddenform(action="deleteportalbox#5.3",
                                       text=text,
                                       button="Confirm",
                                       colID=colID,
                                       pbxID=pbxID,
                                       ln=ln,
                                       confirm=1)
                    
        elif confirm in [1, "1"]:
            if ares:
                output += """<b><span class="info">Deleted the portalbox '%s'.</span></b>
                """ % pname
            else:
                output += """<b><span class="info">Cannot delete the portalbox.</span></b>
                """
    elif confirm in [0, "0"]:
        output  += """<b><span class="info">Choose a portalbox to delete.</span></b>
        """

    try:
        body = [output, extra]
    except NameError:
        body = [output]

    output = "</br>" + addadminbox(subtitle, body)
    return perform_showportalboxes(colID, ln, content=output)

def perform_modifyportalbox(colID, ln=cdslang, pbxID=-1, score='', position='', sel_ln='', title='', body='', callback='yes', confirm=-1):
    """form to add a new rank method with these values:
    """

    subtitle  = ""
    output  = ""

    colID = int(colID)
    res = get_pbx()
    pos = get_pbx_pos()
    lang = dict(get_languages())
    col_dict = dict(get_current_name('', ln, get_col_nametypes()[0][0], "collection"))
    pbx_dict = dict(map(lambda x: (x[0], x[1]), res))
    col_pbx = get_col_pbx(colID)
    col_pbx = dict(map(lambda x: (x[0], x[5]), col_pbx))

    if pbxID not in [-1, "-1"]:
        pbxID = int(pbxID)
        subtitle = """<a name="5.4"></a>Modify portalbox '%s' for this collection""" % pbx_dict[pbxID]
        col_pbx = get_col_pbx(colID)
        if not (score and position) and not (body and title):
            for (id_pbx, id_collection, tln, score, position, title, body) in col_pbx:
                if id_pbx == pbxID:
                    break

        output += """Collection (presentation) specific values (Changes implies only to this collection.)</br>"""
        text = """
        <span class="adminlabel">Position</span>
        <select name="position" class="admin_w200">
        """
        listpos = pos.items()
        listpos.sort()
        for (key, name) in listpos:
            text += """<option value="%s" %s>%s""" % (key, key==position and 'selected="selected"' or '', name)
            text += "</option>"
        text += """</select></br>"""

        text += """
        <span class="adminlabel">Score</span>
        <input class="admin_wvar" type="text" name="score" value="%s" /></br>
        """ % score

        output += createhiddenform(action="modifyportalbox#5.4",
                                   text=text,
                                   button="Modify",
                                   colID=colID,
                                   pbxID=pbxID,
                                   title=title,
                                   body=cgi.escape(body, 1),
                                   sel_ln=sel_ln,
                                   ln=ln,
                                   confirm=1)

        if pbxID > -1 and score and position:
            pbxID = int(pbxID)
            if confirm in [1, "1"]:
                text = """<b>Do you want to modify the portalbox '%s' in this collection.</b>
                """ % pbx_dict[pbxID]
                output += createhiddenform(action="modifyportalbox#5.4",
                                           text=text,
                                           button="Confirm",
                                           colID=colID,
                                           pbxID=pbxID,
                                           sel_ln=sel_ln,                                     
                                           score=score,
                                           position=position,
                                           title=title,
                                           body=cgi.escape(body, 1),
                                           ln=ln,
                                           confirm=3)
            elif confirm in [3, "3"]:
                res = modify_pbx(colID, pbxID, sel_ln, score, position, '', '')
                res2 = get_pbx()
                pbx_dict = dict(map(lambda x: (x[0], x[1]), res2))
                if res:
                    output += """<b><span class="info">Modified the presentation of the portalbox '%s' in this collection.</span></b></br></br>
                    """ % pbx_dict[pbxID]
                else:
                    output += """<b><span class="info">Cannot modify the portalbox '%s'.</span></b></br></br>
                    """ % pbx_dict[pbxID]

        output += """Portalbox (content) specific values (any changes appears everywhere the portalbox is used.)"""
        text = """
        <span class="adminlabel">Title</span>
        <input class="admin_wvar" type="text" name="title" value="%s" /></br>
        """ % title
        
        text += """
        <span class="adminlabel">Body</span>
        <textarea cols="50" rows="10" class="admin_wvar" type="text" name="body">%s</textarea></br>
        """ % body
        
        output += createhiddenform(action="modifyportalbox#5.4",
                                   text=text,
                                   button="Modify",
                                   colID=colID,
                                   pbxID=pbxID,
                                   sel_ln=sel_ln,
                                   score=score,
                                   position=position,
                                   ln=ln,
                                   confirm=2)

        if pbxID > -1 and title:
            pbxID = int(pbxID)
            if confirm in [2, "2"]:
                text = """<b>Do you want to modify the portalbox '%s' for all collections using it.</b>
                """ % pbx_dict[pbxID]
                output += createhiddenform(action="modifyportalbox#5.4",
                                           text=text,
                                           button="Confirm",
                                           colID=colID,
                                           pbxID=pbxID,
                                           sel_ln=sel_ln,                                     
                                           score=score,
                                           position=position,
                                           title=title,
                                           body=cgi.escape(body, 1),
                                           ln=ln,
                                           confirm=4)
            elif confirm in [4, "4"]:
                res = modify_pbx(colID, pbxID, sel_ln, '', '', title, body)
                res2 = get_pbx()
                pbx_dict = dict(map(lambda x: (x[0], x[1]), res2))
                if res:
                    output += """<b><span class="info">Modified the content of the portalbox '%s' for all occurences of it.</span></b>
                    """ % pbx_dict[pbxID]
                else:
                    output += """<b><span class="info">Cannot modify the portalbox '%s'.</span></b>
                    """ % pbx_dict[pbxID]
    else:
        output  = """No portalbox to modify.
        """

    try:
        body = [output, extra]
    except NameError:
        body = [output]

    output = "</br>" + addadminbox(subtitle, body)
    return perform_showportalboxes(colID, ln, content=output)

def perform_showportalboxes(colID, ln=cdslang, callback='yes', content='', confirm=-1):
    """form to add a new rank method with these values:
    """
    colID = int(colID)
    col_dict = dict(get_current_name('', ln, get_col_nametypes()[0][0], "collection"))
    
    subtitle = """<a name="5">5. Modify portalboxes for collection '%s'</a>""" % col_dict[colID]
    output  = ""
    res = get_col_pbx(colID)
    pos = get_pbx_pos()


    output = """<dl>
     <dt>Portal actions (not related to this collection)
     <dd><a href="addportalbox?colID=%s&amp;ln=%s#5.1">Create new portalbox</a></dd>
     <dd><a href="deleteportalbox?colID=%s&amp;ln=%s#5.3">Delete a unused portalbox.</a></dd>
     <dt>Collection specific actions
     <dd><a href="addexistingportalbox?colID=%s&amp;ln=%s#5.2">Add existing portalbox to collection</a></dd>
    </dl>
    """  % (colID, ln, colID, ln, colID, ln)
  
    header = ['Position', 'Language', 'Score', 'Title', 'Actions']
    actions = []
    cdslang = get_languages()
    lang = dict(cdslang)

    for (pbxID, colID_pbx, tln, score, position, title, body) in res:  
        actions.append([pos[position], lang[tln], score, title])
        for col in [(('Modify', 'modifyportalbox'), ('Remove', 'removeportalbox'),)]:
            actions[-1].append('<a href="%s/admin/websearch/websearchadmin.py/%s?colID=%s&amp;ln=%s&amp;pbxID=%s&amp;sel_ln=%s#5.4">%s</a>' % (weburl, col[0][1], colID, ln, pbxID, tln, col[0][0]))
            for (str, function) in col[1:]:
                actions[-1][-1] += ' / <a href="%s/admin/websearch/websearchadmin.py/%s?colID=%s&amp;ln=%s&amp;pbxID=%s&amp;sel_ln=%s#5.5">%s</a>' % (weburl, function, colID, ln, pbxID, tln, str)        

    output += tupletotable(header=header, tuple=actions)
    if len(res) == 0:
        output += """No portalboxes exists for this collection"""
        
    output += content
    try:
        body = [output, extra]
    except NameError:
        body = [output]

    if callback:
        return perform_editcollection(colID, ln, "perform_showportalboxes", addadminbox(subtitle, body))
    else:
        return addadminbox(subtitle, body)

def perform_removeportalbox(colID, ln=cdslang, pbxID='', sel_ln='', callback='yes', confirm=0):
    """form to add a new rank method with these values:
    """
 
    subtitle = """<a name="5.5"></a>Remove portalbox"""
    output  = ""

    col_dict = dict(get_current_name('', ln, get_col_nametypes()[0][0], "collection"))
    res = get_pbx()
    pbx_dict = dict(map(lambda x: (x[0], x[1]), res))
    
    if colID and pbxID and sel_ln:
        colID = int(colID)
        pbxID = int(pbxID)

        if confirm in ["0", 0]:
            text = """Do you want to remove the portalbox '%s' from the collection '%s'.""" % (pbx_dict[pbxID], col_dict[colID])
            output += createhiddenform(action="removeportalbox#5.5",
                                       text=text,
                                       button="Confirm",
                                       colID=colID,
                                       pbxID=pbxID,
                                       sel_ln=sel_ln,
                                       confirm=1)
        elif confirm in ["1", 1]:
            res = remove_pbx(colID, pbxID, sel_ln)
            if res:
                output += """<b><span class="info">Removed the portalbox '%s' from the collection '%s'.</span></b>
                """ % (pbx_dict[pbxID], col_dict[colID])
            else:
                output += """<b><span class="info">Cannot remove the portalbox from the collection '%s'.</span></b>
                """ % (pbxID, col_dict[colID])
 
    try:
        body = [output, extra]
    except NameError:
        body = [output]

    output = "</br>" + addadminbox(subtitle, body)
    return perform_showportalboxes(colID, ln, content=output)

def perform_switchscore(colID, type, id_1, id_2, ln=cdslang):
    fmt_dict = dict(get_current_name('', ln, get_fmt_nametypes()[0][0], "format"))
    
    if switch_score(colID, id_1, id_2, type):
        output = """</br><b><span class="info">'%s' changed position with '%s'</span></b>
        """ % (fmt_dict[int(id_1)], fmt_dict[int(id_2)])
    else:
        output = """</br><b><span class="info">Could not complete the operation.</span></b>"""

    return perform_showoutputformats(colID, ln, content=output)

def perform_showoutputformats(colID, ln=cdslang, callback='yes', content='', confirm=-1):
    """form to add a new rank method with these values:
    """
    colID = int(colID)
    col_dict = dict(get_current_name('', ln, get_col_nametypes()[0][0], "collection"))

    subtitle = """<a name="10">10. Modify output formats for collection '%s'</a>""" % col_dict[colID]
    output = """
    <dl>
     <dt>Output format actions (not specific to the chosen collection)
     <dd><a href="addoutputformat?colID=%s&amp;ln=%s#10.1">Create new output format</a></dd>
     <dd><a href="deleteoutputformat?colID=%s&amp;ln=%s#10.3">Delete an unused output format</a></dd>
     <dd><a href="modifyoutputformat?colID=%s&amp;ln=%s#10.4">Modify the translations of an output format</a></dd>
     <dt>Collection specific actions
     <dd><a href="addexistingoutputformat?colID=%s&amp;ln=%s#10.2">Add existing output format to collection</a></dd>
    </dl>
    """  % (colID, ln, colID, ln, colID, ln, colID, ln)
    
    header = ['Code', 'Output format', 'Move', 'Actions']
    actions = []
    
    col_fmt = get_col_fmt(colID)
    fmt_dict = dict(get_current_name('', ln, get_fmt_nametypes()[0][0], "format"))

    i = 0
    for (id_format, colID_pbx, code, score) in col_fmt:
        actions.append([code, fmt_dict[int(id_format)]])
        if i != 0:
            actions[-1].append("""<a href="%s/admin/websearch/websearchadmin.py/switchscore?colID=%s&amp;ln=%s&amp;type=format&amp;id_1=%s&amp;id_2=%s#10"><img border="0" src="%s/img/arrow_up.gif" title="Move format up"></a>""" % (weburl, colID, ln, id_format, col_fmt[i - 1][0], weburl))
        else:
            actions[-1].append("&nbsp;&nbsp;&nbsp;")
        i += 1
        if i != len(col_fmt):
            actions[-1][-1] += '<a href="%s/admin/websearch/websearchadmin.py/switchscore?colID=%s&amp;ln=%s&amp;type=format&amp;id_1=%s&amp;id_2=%s#10"><img border="0" src="%s/img/%s" title="Move format down"></a>' % (weburl, colID, ln, id_format, col_fmt[i][0], weburl, ('arrow_down.gif'))
        
        for col in [(('Remove', 'removeoutputformat'),)]:
            actions[-1].append('<a href="%s/admin/websearch/websearchadmin.py/%s?colID=%s&amp;ln=%s&amp;fmtID=%s#10">%s</a>' % (weburl, col[0][1], colID, ln, id_format, col[0][0]))
            for (str, function) in col[1:]:
                actions[-1][-1] += ' / <a href="%s/admin/websearch/websearchadmin.py/%s?colID=%s&amp;ln=%s&amp;fmtID=%s#10">%s</a>' % (weburl, function, colID, ln, id_format, str)        
    output += tupletotable(header=header, tuple=actions)

    if len(col_fmt) == 0:
        output += """No output formats exists for this collection"""
    output += content
    try:
        body = [output, extra]
    except NameError:
        body = [output]

    if callback:
        return perform_editcollection(colID, ln, "perform_showoutputformats", addadminbox(subtitle, body))
    else:
        return addadminbox(subtitle, body)

def perform_addoutputformat(colID, ln=cdslang, code='', name='', callback='trans', confirm=-1):
    """form to add a new rank method with these values:
    """

    colID = int(colID)
    subtitle = """<a name="10.1"></a>Create new output format"""
    text = """
    <span class="adminlabel">Code</span>
    <input class="admin_wvar" type="text" name="code" maxlength="6" value="%s" /></br>
    <span class="adminlabel">Name</span>
    <input class="admin_wvar" type="text" name="name" value="%s" /></br>
    """ % (code, name)
    output = createhiddenform(action="addoutputformat#10.1",
                              text=text,
                              button="Add",
                              colID=colID,
                              ln=ln,
                              confirm=0)

    if code and name:
        if confirm in [0, "0"]:
            text ="""<b>Do you want to add the output format '%s'.</b>
            """ % name
            output += createhiddenform(action="%s/admin/websearch/websearchadmin.py/addoutputformat#10.1" % weburl,
                                       text=text,
                                       button="Confirm",
                                       colID=colID,
                                       code=code,
                                       name=name,                                     
                                       ln=ln,
                                       confirm=1)
        elif confirm in [1, "1"]:
            res = add_fmt(code, name, get_fmt_nametypes()[0][0])
            if res:
                output += """<b><span class="info">Added the output format '%s'. To add the output format to the collection, go <a href="addexistingoutputformat?colID=%s&amp;ln=%s&amp;fmtID=%s#10">here</a>.</span></b>
                """ % (name, colID, ln, res[0][0])
            else:
                output += """<b><span class="info">Cannot add the output format '%s'.</span></b>
                """ % name
    elif confirm in [0, "0"]:
        output  += """<b><span class="info">All fields must be filled.</span></b>
        """
        
                
    try:
        body = [output, extra]
    except NameError:
        body = [output]

    return perform_showoutputformats(colID, ln, content=addadminbox(subtitle, body))

def perform_addexistingoutputformat(colID, ln=cdslang, fmtID=-1, callback='yes', confirm=-1):
    """form to add a new rank method with these values:
    """
 
    subtitle = """<a name="10.2"></a>Add existing output format to collection"""
    output  = ""

    colID = int(colID)
    res = get_current_name('', ln, get_fmt_nametypes()[0][0], "format")
    fmt_dict = dict(res)
    col_dict = dict(get_current_name('', ln, get_col_nametypes()[0][0], "collection"))
    col_fmt = get_col_fmt(colID)
    col_fmt = dict(map(lambda x: (x[0], x[2]), col_fmt))

    if len(res) > 0:
        text  = """
        <span class="adminlabel">Output format</span>
        <select name="fmtID" class="admin_w200">
        <option value="-1">- Select output format -</option>
        """
        for (id, name) in res:
            if not col_fmt.has_key(id):
                text += """<option value="%s" %s>%s</option>
                """ % (id, id  == int(fmtID) and 'selected="selected"' or '', name)
        text += """</select></br>
        """
        output += createhiddenform(action="addexistingoutputformat#10.2",
                                   text=text,
                                   button="Add",
                                   colID=colID,
                                   ln=ln,
                                   confirm=0)
    else:
        output  = """No existing output formats to add, please create a new one.
        """

    if fmtID not in [-1, "-1"]:
        fmtID = int(fmtID)
        if confirm in [0, "0"]:
            text = """<b>Do you want to add the output format '%s' to the collection '%s'.</b>
            """ % (fmt_dict[fmtID], col_dict[colID])
            output += createhiddenform(action="%s/admin/websearch/websearchadmin.py/addexistingoutputformat#10.2" % weburl,
                                       text=text,
                                       button="Confirm",
                                       colID=colID,
                                       fmtID=fmtID,
                                       ln=ln,
                                       confirm=1)
        elif confirm in [1, "1"]:
            res = add_col_fmt(colID, fmtID)
            if res:
                output += """<b><span class="info">Added the output format '%s' to the collection '%s'.</span></b>
                """ % (fmt_dict[fmtID], col_dict[colID])
            else:
                output += """<b><span class="info">Cannot add the output format '%s' to the collection '%s'.</span></b>
                """ % (fmt_dict[fmtID], col_dict[colID])
    elif fmtID in [-1, "-1"] and confirm in [0, "0"]:
        output  += """<b><span class="info">Please select output format.</span></b>
        """
    try:
        body = [output, extra]
    except NameError:
        body = [output]

    output = "</br>" + addadminbox(subtitle, body)
    return perform_showoutputformats(colID, ln, content=output)

def perform_deleteoutputformat(colID, ln=cdslang, fmtID=-1, callback='yes', confirm=-1):
    """form to add a new rank method with these values:
    """
 
    subtitle = """<a name="10.3"></a>Delete an unused output format"""
    output  = """
    <dl>
     <dd>Deleting an output format will also delete the translations associated.</dd>
    </dl>
    """

    colID = int(colID)
    if fmtID not in [-1," -1"] and confirm in [1, "1"]:
        fmt_dict = dict(get_current_name('', ln, get_fmt_nametypes()[0][0], "format"))
        old_colNAME = fmt_dict[int(fmtID)]
        ares = delete_fmt(int(fmtID))

    res = get_current_name('', ln, get_fmt_nametypes()[0][0], "format")
    fmt_dict = dict(res)
    col_dict = dict(get_current_name('', ln, get_col_nametypes()[0][0], "collection"))
    col_fmt = get_col_fmt()
    col_fmt = dict(map(lambda x: (x[0], x[2]), col_fmt))
    
    if len(res) > 0:
        text  = """
        <span class="adminlabel">Output format</span>
        <select name="fmtID" class="admin_w200">
        """
        text += """<option value="-1">- Select output format -"""
        for (id, name) in res:
            if not col_fmt.has_key(id):
                text += """<option value="%s" %s>%s""" % (id, id  == int(fmtID) and 'selected="selected"' or '', name)
            text += "</option>"
        text += """</select></br>"""

        output += createhiddenform(action="deleteoutputformat#10.3",
                                   text=text,
                                   button="Delete",
                                   colID=colID,
                                   ln=ln,
                                   confirm=0)
        
    if fmtID not in [-1,"-1"]:
        fmtID = int(fmtID)
        if confirm in [0, "0"]:
            text = """<b>Do you want to delete the output format '%s'.</b>
            """ % fmt_dict[fmtID]
            output += createhiddenform(action="deleteoutputformat#10.3",
                                       text=text,
                                       button="Confirm",
                                       colID=colID,
                                       fmtID=fmtID,
                                       ln=ln,
                                       confirm=1)
                    
        elif confirm in [1, "1"]:
            if ares:
                output += """<b><span class="info">Deleted the output format '%s'.</span></b>
                """ % old_colNAME
            else:
                output += """<b><span class="info">Cannot delete the output format.</span></b>
                """
    elif confirm in [0, "0"]:
        output  += """<b><span class="info">Choose a output format to delete.</span></b>
        """

    try:
        body = [output, extra]
    except NameError:
        body = [output]

    output = "</br>" + addadminbox(subtitle, body)
    return perform_showoutputformats(colID, ln, content=output)

def perform_removeoutputformat(colID, ln=cdslang, fmtID='', callback='yes', confirm=0):
    """form to add a new rank method with these values:
    """
 
    subtitle = """<a name="10.5"></a>Remove output format"""
    output  = ""

    col_dict = dict(get_current_name('', ln, get_col_nametypes()[0][0], "collection"))
    fmt_dict = dict(get_current_name('', ln, get_fmt_nametypes()[0][0], "format"))
    
    if colID and fmtID:
        colID = int(colID)
        fmtID = int(fmtID)

        if confirm in ["0", 0]:
            text = """Do you want to remove the output format '%s' from the collection '%s'.""" % (fmt_dict[fmtID], col_dict[colID])
            output += createhiddenform(action="removeoutputformat#10.5",
                                       text=text,
                                       button="Confirm",
                                       colID=colID,
                                       fmtID=fmtID,
                                       confirm=1)
        elif confirm in ["1", 1]:
            res = remove_fmt(colID, fmtID)
            if res:
                output += """<b><span class="info">Removed the output format '%s' from the collection '%s'.</span></b>
                """ % (fmt_dict[fmtID], col_dict[colID])
            else:
                output += """<b><span class="info">Cannot remove the portalbox from the collection '%s'.</span></b>
                """ % (col_dict[colID])
 
    try:
        body = [output, extra]
    except NameError:
        body = [output]

    output = "</br>" + addadminbox(subtitle, body)
    return perform_showoutputformats(colID, ln, content=output)

def perform_modifyoutputformat(colID, ln=cdslang, fmtID=-1, sel_type='', trans=[], confirm=-1):
    """Modify the translations of a collection"""
    
    output = ''
    subtitle = 'Modify translations for output format'
    cdslangs = get_languages()
        
    if confirm in ["2", 2] and fmtID:
        finresult = modify_translations(fmtID, cdslangs, sel_type, trans, "format")
            
    res = get_current_name('', ln, get_fmt_nametypes()[0][0], "format")
    fmt_dict = dict(res)

    text  = """
    <span class="adminlabel">Output formats</span>
    <select name="fmtID" class="admin_w200">
    <option value ="-1">- select output format -</output>
    """
    for (key, value) in res:
        text += """<option value="%s" %s>%s""" % (key, key == int(fmtID) and 'selected="selected"' or '', value)
        text += "</option>"
    text += """</select>"""

    output = createhiddenform(action="modifyoutputformat#10.4",
                              text=text,
                              button="Select",
                              colID=colID,
                              ln=ln,
                              confirm=0)

    
    if fmtID not in [-1, "-1"] and fmt_dict.has_key(int(fmtID)):
        fmtID = int(fmtID)
        subtitle = """<a name="10.4">Modify translations for output format '%s'</a></br>""" % fmt_dict[fmtID]
        
        if type(trans) is str:
            trans = [trans]
        if sel_type == '':
            sel_type = get_fmt_nametypes()[0][0]
            
        header = ['Language', 'Translation']
        actions = []
                        
        text  = """
        <span class="adminlabel">Name type</span>
        <select name="sel_type" class="admin_w200">
        """
        
        types = get_fmt_nametypes()
        if len(types) > 1:
            for (key, value) in types:
                text += """<option value="%s" %s>%s""" % (key, key == sel_type and 'selected="selected"' or '', value)
                trans_names = get_name(fmtID, ln, key, "format")
                if trans_names and trans_names[0][0]:
                    text += ": %s" % trans_names[0][0]
                text += "</option>"
            text += """</select>"""
        
            output += createhiddenform(action="modifyoutputformat#10.4",
                                       text=text,
                                       button="Select",
                                       colID=colID,
                                       fmtID=fmtID,
                                       ln=ln,
                                       confirm=0)

        if confirm in [0, "0"]:
            trans = []
            for key, value in cdslangs:
                try:
                    trans_names = get_name(fmtID, key, sel_type, "format")
                    trans.append(trans_names[0][0])
                except StandardError, e:
                    trans.append('')

        for nr in range(0,len(cdslangs)):
            actions.append([cdslangs[nr][1]])
            actions[-1].append('<input type="text" name="trans" size="30" value="%s"/>' % trans[nr])
        
        text = tupletotable(header=header, tuple=actions)
        output += createhiddenform(action="modifyoutputformat#10.4",
                                   text=text,
                                   button="Modify",
                                   colID=colID,
                                   fmtID=fmtID,
                                   sel_type=sel_type,
                                   ln=ln,
                                   confirm=1)

        if sel_type and len(trans):
            if confirm in ["1", 1]:
                text = """<b>Please confirm modification of translations for collection '%s'.</b>""" % (fmt_dict[fmtID])
                output += createhiddenform(action="modifyoutputformat#10.4",
                                           text=text,
                                           button="Confirm",
                                           colID=colID,
                                           fmtID=fmtID,
                                           sel_type=sel_type,
                                           trans=trans,
                                           ln=ln,
                                           confirm=2)

            elif confirm in ["2", 2]:
                if finresult:
                    output += """<b><span class="info">Translations modified for output format '%s'.</span></b>""" % (fmt_dict[fmtID])
                else:
                    output += """<b><span class="info">Sorry, could not modify translations for output format '%s'.</span></b>""" % (fmt_dict[fmtID])
    elif fmtID in [-1, "-1"] and confirm in ["0", 0]:
        output += """<b><span class="info">Please chose a output format.</span></b>""" 
        
    try:
        body = [output, extra]
    except NameError:
        body = [output]
        
    output = "</br>" + addadminbox(subtitle, body)
    return perform_showoutputformats(colID, ln, content=output)
        
def perform_index(colID=1, ln=cdslang, mtype='', content='', confirm=0):
    subtitle = "Overview"
    colID = int(colID)
    col_dict = dict(get_current_name('', ln, get_col_nametypes()[0][0], "collection"))

    fin_output = ""
    output = ""
 
    if mtype == "perform_addcollection":
        fin_output += content
    else:
        fin_output += perform_addcollection(colID=colID, ln=ln, callback='')
    fin_output += """
    </br>
    """

    if mtype == "perform_addcollectiontotree":
        fin_output += content
    else:
        fin_output += perform_addcollectiontotree(colID=colID, ln=ln, callback='')
    fin_output += """
    </br>
    """

    if mtype == "perform_modifycollectiontree":
        fin_output += content
    else:
        fin_output += perform_modifycollectiontree(colID=colID, ln=ln, callback='')
    fin_output += """
    </br>
    """

    extra = """<dl>
     <dt><b>Help:</b></dt>
     <dd>For documentation, take a look at the <a href="%s/admin/websearch/guide.html">Websearch Admin Guide</a>.</dd>
    </dl>
    """ % weburl
    
    tree = get_col_tree(colID)
    in_tree = {}
    for (id, up, down, dad, reltype) in tree:
        in_tree[id] = 1
        in_tree[dad] = 1
    res = run_sql("SELECT id from collection")
    if len(res) != len(in_tree):
        extra += """<dt><b>Collections not in tree:</b></dt>
        """
        for id in res:
            if not in_tree.has_key(id[0]):
                extra += """<dd><a href="%s/admin/websearch/websearchadmin.py/editcollection?colID=%s&amp;ln=%s" title="Edit collection">%s</a></dd>
                """ % (weburl, id[0], ln, col_dict[id[0]])
        extra += """</dl>
        """
    return addadminbox(subtitle, [fin_output, extra])

def create_colltree(tree, col_dict, colID, ln, move_from='', move_to='', rtype='', edit=''):
    tables = 0
    tstack = []
    i = 0

    text = """
    <table border ="0" cellspacing="0" cellpadding="0">"""
    for i in range(0, len(tree)):
        id_son = tree[i][0]
        up = tree[i][1]
        down = tree[i][2]
        dad = tree[i][3]
        reltype = tree[i][4]
        tmove_from = ""
        
        text += """<tr><td>
        """
        j = i
        while j > 0:
            j = j - 1
            try:
                if tstack[j][1] == dad:
                    table = tstack[j][2]
                    for k in range(0, tables - table):
                        tables = tables - 1
                        text += """</table></td></tr>
                        """
                    break
            except StandardError, e:
                pass
        text += """<tr><td>
        """
        
        if i > 0 and tree[i][1] == 0:
            tables = tables + 1
            text += """</td><td></td><td></td><td></td><td><table border="0" cellspacing="0" cellpadding="0"><tr><td>
            """

        if i == 0:
            tstack.append((id_son, dad, 1))
        else:
            tstack.append((id_son, dad, tables))
       
        if up == 1 and edit:
            text += """<a href="%s/admin/websearch/websearchadmin.py/modifycollectiontree?colID=%s&amp;ln=%s&amp;move_up=%s&amp;rtype=%s#tree"><img border="0" src="%s/img/arrow_up.gif" title="Move collection up"></a>""" % (weburl, colID, ln, i, rtype, weburl)
        elif i != 0:
            text += """<img border="0" src="%s/img/white_field.gif">
            """ % weburl

        text += """</td><td>
        """

        if down == 1 and edit:
            text += """<a href="%s/admin/websearch/websearchadmin.py/modifycollectiontree?colID=%s&amp;ln=%s&amp;move_down=%s&amp;rtype=%s#tree"><img border="0" src="%s/img/arrow_down.gif" title="Move collection down"></a>""" % (weburl, colID, ln, i, rtype, weburl)
        elif i != 0:
            text += """<img border="0" src="%s/img/white_field.gif">
            """ % weburl 
        text += """</td><td>
        """

        if edit:
            if move_from and move_to:
                tmove_from = move_from
                move_from = ''
            if not (move_from == "" and i == 0) and not (move_from != "" and int(move_from[1:len(move_from)]) == i and rtype == move_from[0]):
                check = "true"
                if move_from:
                    move_from_rtype = move_from[0]
                    move_from_id = int(move_from[1:len(move_from)])
                    tree_from = get_col_tree(colID, move_from_rtype)
                    tree_to = get_col_tree(colID, rtype)
                    if tree_from[move_from_id][0] == tree_to[i][0] or not check_col(tree_to[i][0], tree_from[move_from_id][0]):
                        check = ''
                    elif not check_col(tree_to[i][0], tree_from[move_from_id][0]):
                        check = ''
                    if not check and (tree_to[i][0] == 1 and tree_from[move_from_id][3] == tree_to[i][0] and move_from_rtype != rtype):
                        check = "true"
                    if check:
                        text += """<a href="%s/admin/websearch/websearchadmin.py/modifycollectiontree?colID=%s&amp;ln=%s&amp;move_from=%s&amp;move_to=%s%s&amp;rtype=%s#tree"><img border="0" src="%s/img/move_to.gif" title="Move '%s' to '%s'"></a>
                """ % (weburl, colID, ln, move_from, rtype, i, rtype, weburl,  col_dict[tree_from[int(move_from[1:len(move_from)])][0]], col_dict[tree_to[i][0]])
                else:
                    text += """<a href="%s/admin/websearch/websearchadmin.py/modifycollectiontree?colID=%s&amp;ln=%s&amp;move_from=%s%s&amp;rtype=%s#tree"><img border="0" src="%s/img/move_from.gif" title="Move '%s' from this location."></a>
                """ % (weburl, colID, ln, rtype, i, rtype, weburl, col_dict[tree[i][0]])
            else:
                text += """<img border="0" src="%s/img/white_field.gif">
                """ % weburl
        else:
            text += """<img border="0" src="%s/img/white_field.gif">
                """ % weburl

        text += """
        </td>
        <td>"""

        if edit:
            text += """<a href="%s/admin/websearch/websearchadmin.py/modifycollectiontree?colID=%s&amp;ln=%s&amp;delete=%s&amp;rtype=%s#tree"><img border="0" src="%s/img/iconcross.gif" title="Remove colletion from tree"></a>
        """ % (weburl, colID, ln, i, rtype, weburl)
        elif i != 0:
            text += """<img border="0" src="%s/img/white_field.gif">
        """ % weburl

        text += """</td><td>
        """

        if tmove_from:
            move_from = tmove_from

        text += """<a name="tree"></a>%s<a href="%s/admin/websearch/websearchadmin.py/editcollection?colID=%s&amp;ln=%s" title="Edit collection">%s</a>%s%s%s
        """ % ((reltype=="v" and '<i>' or ''), weburl, tree[i][0], ln, col_dict[id_son], (move_to=="%s%s" %(rtype,i) and '&nbsp;<img border="0" src="%s/img/move_to.gif">' % weburl or ''), (move_from=="%s%s" % (rtype,i) and '&nbsp;<img border="0" src="%s/img/move_from.gif">' % weburl or ''), (reltype=="v" and '</i>' or ''))
        
        text += """</td><tr>
        """
        
    while tables > 0:
        text += """</table></td></tr>
        """
        tables = tables - 1
    text += """</table>
        """
    return text

def perform_editcollection(colID=1, ln=cdslang, mtype='', content=''):
    """form to modify a collection

    colID - id of the collection
    """

    colID = int(colID)
    col_dict = dict(get_current_name('', ln, get_col_nametypes()[0][0], "collection"))
    if not col_dict.has_key(colID):
        return """<b><span class="info">Collection deleted.</span></b>
        """
    
    fin_output = """
    <table>
    <tr>
    <td><b>Menu</b></td>
    </tr>
    <tr>
    <td>0.&nbsp;<a href="editcollection?colID=%s&amp;ln=%s">Show all</a></td>
    <td>1.&nbsp;<a href="editcollection?colID=%s&amp;ln=%s&amp;mtype=perform_modifydbquery">Modify DBquery</a></td>
    <td>2.&nbsp;<a href="editcollection?colID=%s&amp;ln=%s&amp;mtype=perform_modifyrestricted">Modify access restrictions</a></td>
    <td>3.&nbsp;<a href="editcollection?colID=%s&amp;ln=%s&amp;mtype=perform_modifytranslations">Modify translations</a></td>
    </tr>
    <tr>
    <td>4.&nbsp;<a href="editcollection?colID=%s&amp;ln=%s&amp;mtype=perform_deletecollection">Delete collection</a></td>
    <td>5.&nbsp;<a href="editcollection?colID=%s&amp;ln=%s&amp;mtype=perform_showportalboxes">Modify portalboxes</a></td>
    <td>6.&nbsp;<a href="editcollection?colID=%s&amp;ln=%s&amp;mtype=perform_modifysearchfields#6">Modify search fields</a></td>
    <td>7.&nbsp;<a href="editcollection?colID=%s&amp;ln=%s&amp;mtype=perform_modifysearchoptions#7">Modify search options</a></td>
    </tr>
    <tr>
    <td>8.&nbsp;<a href="editcollection?colID=%s&amp;ln=%s&amp;mtype=perform_modifysortoptions#8">Modify sort options</a></td>
    <td>9.&nbsp;<a href="editcollection?colID=%s&amp;ln=%s&amp;mtype=perform_modifyrankmethods">Modify rank options</a></td>
    <td>10.<a href="editcollection?colID=%s&amp;ln=%s&amp;mtype=perform_showoutputformats#10">Modify output formats</a></td>
    </tr>
    </table>
    """ % (colID, ln, colID, ln, colID, ln, colID, ln, colID, ln, colID, ln, colID, ln, colID, ln, colID, ln, colID, ln, colID, ln)
    
    if mtype == "perform_modifydbquery" and content:
        fin_output += content
    elif mtype == "perform_modifydbquery" or not mtype:
        fin_output += perform_modifydbquery(colID, ln, callback='')

    if mtype == "perform_modifyrestricted" and content:
        fin_output += content
    elif mtype == "perform_modifyrestricted" or not mtype:
        fin_output += perform_modifyrestricted(colID, ln, callback='')

    if mtype == "perform_modifytranslations" and content:
        fin_output += content
    elif mtype == "perform_modifytranslations" or not mtype:
        fin_output += perform_modifytranslations(colID, ln, callback='')

    if mtype == "perform_deletecollection" and content: 
        fin_output += content
    elif mtype == "perform_deletecollection" or not mtype:
        fin_output += perform_deletecollection(colID, ln, callback='')

    if mtype == "perform_showportalboxes" and content:
        fin_output += content
    elif mtype == "perform_showportalboxes" or not mtype:
        fin_output += perform_showportalboxes(colID, ln, callback='')

    if mtype == "perform_modifysearchfields" and content:
        fin_output += content
    elif mtype == "perform_modifysearchfields" or not mtype:
        subtitle = """6. Modify search fields for collection '%s'""" % col_dict[colID]
        text = "Not yet implemented"
        fin_output += addadminbox(subtitle, [text])

    if mtype == "perform_modifysearchoptions" and content:
        fin_output += content
    elif mtype == "perform_modifysearchoptions" or not mtype:
        subtitle = """7. Modify search options for collection '%s'""" % col_dict[colID]
        text = "Not yet implemented"
        fin_output += addadminbox(subtitle, [text])

    if mtype == "perform_modifysortoptions" and content:
        fin_output += content
    elif mtype == "perform_modifysortoptions" or not mtype:
        subtitle = """8. Modify sort options for collection '%s'""" % col_dict[colID]
        text = "Not yet implemented"
        fin_output += addadminbox(subtitle, [text])
    
    if mtype == "perform_modifyrankmethods" and content:
        fin_output += content
    elif  mtype == "perform_modifyrankmethods" or not mtype:
        fin_output += perform_modifyrankmethods(colID, ln, callback='')

    if mtype == "perform_showoutputformats" and content:
        fin_output += content
    elif mtype == "perform_showoutputformats" or not mtype:
        fin_output += perform_showoutputformats(colID, ln, callback='')
    
    return addadminbox("Overview of edit options for collection '%s'" % col_dict[colID],  [fin_output])

def perform_deletecollection(colID, ln=cdslang, confirm=-1, callback='yes'):
    """form to delete a collection
    """
    subtitle =''
    output  = """
    <span class="warning">
    <strong>
    <dl>
     <dt>WARNING:</dt>
     <dd>When deleting a collection, you also deletes all data related to the collection like translations, relations to other collections and information about which rank methods to use.
     </br>For more information, please go to the <a href="%s/admin/websearch/guide.html">WebSearch guide</a> and read the section regarding deleting a collection.</dd>
    </dl>
    </strong>
    </span>
    """ % weburl

    col_dict = dict(get_current_name('', ln, get_col_nametypes()[0][0], "collection"))
    if colID and col_dict.has_key(int(colID)):
        colID = int(colID)
        subtitle = """<a name="4">4. Delete collection '%s'</a></br>""" % col_dict[colID]
        res = run_sql("SELECT * from collection_collection WHERE id_dad=%s" % colID)
        res2 = run_sql("SELECT * from collection_collection WHERE id_son=%s" % colID)
                
        if not res and not res2:
            if confirm in ["-1", -1]:
                text = """Do you want to delete this collection."""
                output += createhiddenform(action="deletecollection#4",
                                           text=text,
                                           colID=colID,
                                           confirm=0)
            elif confirm in ["0", 0]:
                text = """Are you sure you want to delete this collection."""
                output += createhiddenform(action="deletecollection#4",
                                           text=text,
                                           colID=colID,
                                           confirm=1)
            elif confirm in ["1", 1]:
                result = delete_col(colID)
                if not result:
                    raise StandardException
        else:
            output = """<b><span class="info">Can not delete a collection that is a part of the collection tree, remove collection from the tree and try again.</span></b>"""
            
    try:
        body = [output, extra]
    except NameError:
        body = [output]

    if callback:
        return perform_editcollection(colID, ln, "perform_deletecollection", addadminbox(subtitle, body))
    else:
        return addadminbox(subtitle, body)
        
def get_col_tree(colID, rtype=''):    
    try:
        colID = int(colID)
        stack = [colID]
        ssize = 0
        tree = [(colID, 0, 0, colID, 'r')]
        while len(stack) > 0:
            ccolID = stack.pop()
            if ccolID == colID and rtype:
                res = run_sql("SELECT id_son, score, type FROM collection_collection WHERE id_dad=%s AND type='%s' ORDER BY score ASC,id_son" % (ccolID,rtype))
            else:
                res = run_sql("SELECT id_son, score, type FROM collection_collection WHERE id_dad=%s ORDER BY score ASC,id_son" % ccolID)
            ssize += 1
            ntree = []
            for i in range(0,len(res)):
                id_son = res[i][0]
                score = res[i][1]
                rtype = res[i][2]
                stack.append(id_son)
                if i == (len(res) - 1):   
                    up = 0
                else:
                    up = 1
                if i == 0:   
                    down = 0
                else:
                    down = 1
                ntree.insert(0, (id_son, up, down, ccolID, rtype))
            tree = tree[0:ssize] + ntree + tree[ssize:len(tree)]
        return tree
    except StandardError, e:
        return ()

def remove_col_subcol(id_son, id_dad):
    tree = get_col_tree(id_son)
    try:
        res = run_sql("DELETE FROM collection_collection WHERE id_son=%s and id_dad=%s" % (id_son, id_dad))
        if not run_sql("SELECT * from collection_collection WHERE id_son=%s" % id_son):
            for (id, up, down, dad, rtype) in tree:
                res = run_sql("DELETE FROM collection_collection WHERE id_son=%s and id_dad=%s" % (id, dad))
        return "true"
    except StandardError, e:
        return ()

def check_col(add_dad, add_son):
    try:
        stack = [add_dad]
        res = run_sql("SELECT id_dad FROM collection_collection WHERE id_dad=%s AND id_son=%s" % (add_dad,add_son))
        if res:
            raise StandardError
        while len(stack) > 0:
            colID = stack.pop()
            res = run_sql("SELECT id_dad FROM collection_collection WHERE id_son=%s" % colID)
            for id in res:
                if int(id[0]) == int(add_son):
                    raise StandardError
                else:
                    stack.append(id[0])
        return "true"
    except StandardError, e:
        return ""

def add_col_dad_son(add_dad, add_son, rtype):
    try:
        res = run_sql("SELECT score FROM collection_collection WHERE id_dad=%s ORDER BY score ASC" % add_dad)
        highscore = 0
        for score in res:
            if int(score[0]) > highscore:
                highscore = int(score[0])
        highscore += 1
        res = run_sql("INSERT INTO collection_collection(id_dad,id_son,score,type) values(%s,%s,%s,'%s')" % (add_dad, add_son, highscore, rtype))
        return highscore
    except StandardError, e:
        return ()
        
def switch_col_treescore(col_1, col_2):
    try:
        res1 = run_sql("SELECT score FROM collection_collection WHERE id_dad=%s and id_son=%s" % (col_1[3], col_1[0]))
        res2 = run_sql("SELECT score FROM collection_collection WHERE id_dad=%s and id_son=%s" % (col_2[3], col_2[0]))
        res = run_sql("UPDATE collection_collection SET score=%s WHERE id_dad=%s and id_son=%s" % (res2[0][0], col_1[3], col_1[0]))
        res = run_sql("UPDATE collection_collection SET score=%s WHERE id_dad=%s and id_son=%s" % (res1[0][0], col_2[3], col_2[0]))
        return "true"
    except StandardError, e:
        return ()

def move_col_tree(col_from, col_to, move_to_rtype=''):
    try:
        res = run_sql("SELECT score FROM collection_collection WHERE id_dad=%s ORDER BY score asc" % col_to[0])
        highscore = 0
        for score in res:
            if int(score[0]) > highscore:
                highscore = int(score[0])
        highscore += 1
        if not move_to_rtype:
            move_to_rtype = col_from[4] 
        res = run_sql("DELETE FROM collection_collection WHERE id_son=%s and id_dad=%s" % (col_from[0], col_from[3]))
        res = run_sql("INSERT INTO collection_collection(id_dad,id_son,score,type) values(%s,%s,%s,'%s')" % (col_to[0], col_from[0], highscore, move_to_rtype))
        return "true"
    except StandardError, e:
        return ()

def compare_on_val(first, second):
    return cmp(first[1], second[1])

def get_col_pbx(colID=-1, ln=''):
    try:
        if colID > -1:
            if ln:
                res = run_sql("SELECT id_portalbox, id_collection, ln, score, position, title, body FROM collection_portalbox, portalbox WHERE id_portalbox = portalbox.id AND ln='%s' AND id_collection='%s' ORDER BY position, ln, score desc" % (ln, colID))
            else:
                res = run_sql("SELECT id_portalbox, id_collection, ln, score, position, title, body FROM collection_portalbox, portalbox WHERE id_portalbox = portalbox.id AND id_collection=%s ORDER BY position, ln, score desc" % colID)
        else:
            if ln:
                res = run_sql("SELECT id_portalbox, id_collection, ln, score, position, title, body FROM collection_portalbox, portalbox WHERE id_portalbox = portalbox.id AND ln='%s' ORDER BY position, ln, score desc" % ln)
            else:
                res = run_sql("SELECT id_portalbox, id_collection, ln, score, position, title, body FROM collection_portalbox, portalbox WHERE id_portalbox = portalbox.id ORDER BY position, ln, score desc")
        return res
    except StandardError, e:
        return ""

def get_col_fmt(colID=-1):
    try:
        if colID not in [-1, "-1"]:
            res = run_sql("SELECT id_format, id_collection, code, score FROM collection_format, format WHERE id_format = format.id AND id_collection=%s ORDER BY score desc" % colID)
        else:
            res = run_sql("SELECT id_format, id_collection, code, score FROM collection_format, format WHERE id_format = format.id ORDER BY score desc")
        return res
    except StandardError, e:
        return ""

def get_col_rnk(colID, ln=cdslang):
    """ Returns a list of the rank methods the given collection is attached to
    colID - id from collection"""
    
    try:
        res1 = dict(run_sql("SELECT id_rnkMETHOD, '' FROM collection_rnkMETHOD WHERE id_collection=%s" % colID))
        res2 = get_current_name('', ln, get_rnk_nametypes()[0][0], "rnkMETHOD")
        result = filter(lambda x: res1.has_key(x[0]), res2)
        return result
    except StandardError, e:
        return ()
    
def get_pbx():
    try:
        res = run_sql("SELECT id, title, body FROM portalbox")
        return res
    except StandardError, e:
        return ""

def get_pbx_pos():
    position = {}
    position["rt"] = "Right Top"
    position["lt"] = "Left Top"
    position["te"] = "Title Epilog"
    position["tp"] = "Title Prolog"
    position["ne"] = "Narrow by coll epilog"
    position["np"] = "Narrow by coll prolog"
    return position

def get_fmt_nametypes():
    """Return a list of the various translationnames for the rank methods"""
    type = []
    type.append(('ln', 'Long name'))
    return type

def get_col_nametypes():
    """Return a list of the various translationnames for the rank methods"""
    type = []
    type.append(('ln', 'Long name'))
    return type

def find_last(tree, start_son):
    id_dad = tree[start_son][3]
    while start_son > 0:
        start_son -= 1
        if tree[start_son][3] == id_dad:
            return start_son

def find_next(tree, start_son):
    id_dad = tree[start_son][3]
    while start_son < len(tree):
        start_son += 1
        if tree[start_son][3] == id_dad:
            return start_son
        
def attach_rnk_col(colID, rnkID):
    """attach rank method to collection
    rnkID - id from rnkMETHOD table
    colID - id of collection, as in collection table """
    
    try:
        res = run_sql("INSERT INTO collection_rnkMETHOD(id_collection, id_rnkMETHOD) values (%s,%s)" % (colID, rnkID))
        return "true"
    except StandardError, e:
        return ""
    
def detach_rnk_col(colID, rnkID):
    """detach rank method from collection
    rnkID - id from rnkMETHOD table
    colID - id of collection, as in collection table """
    
    try:
        res = run_sql("DELETE FROM collection_rnkMETHOD WHERE id_collection=%s AND id_rnkMETHOD=%s" % (colID, rnkID))
    except StandardError, e:
        return ""
    return "true"

def remove_pbx(colID, pbxID, ln):
    try:
        res = run_sql("DELETE FROM collection_portalbox WHERE id_collection=%s AND id_portalbox=%s AND ln='%s'" % (colID, pbxID, ln))
        return "true"
    except StandardError, e:
        return ""

def remove_fmt(colID,fmtID):
    try:
        res = run_sql("DELETE FROM collection_format WHERE id_collection=%s AND id_format=%s" % (colID, fmtID))
        return "true"
    except StandardError, e:
        return ""
    
def delete_pbx(pbxID):
    try:
        res = run_sql("DELETE FROM portalbox WHERE id=%s" % pbxID)
        return "true"
    except StandardError, e:
        return ""
    
def delete_fmt(fmtID):
    try:
        res = run_sql("DELETE FROM format WHERE id=%s" % fmtID)
        res = run_sql("DELETE FROM formatname WHERE id_format=%s" % fmtID)
        return "true"
    except StandardError, e:
        return ""
    
def delete_col(colID):
    """Deletes all data for the given collection
    colID - delete all data in the tables associated with collection and this id """
    
    try:
        res = run_sql("DELETE FROM collection WHERE id=%s" % colID)
        res = run_sql("DELETE FROM collectionname WHERE id_collection=%s" % colID)
        res = run_sql("DELETE FROM collection_rnkMETHOD WHERE id_collection=%s" % colID)
        res = run_sql("DELETE FROM collection_collection WHERE id_dad=%s" % colID)
        res = run_sql("DELETE FROM collection_collection WHERE id_son=%s" % colID)
        return "true"
    except StandardError, e:
        return ""
    
def add_fmt(code, name, rtype):
    try:
        res = run_sql("INSERT INTO format (code, name) values ('%s','%s')" % (MySQLdb.escape_string(code), MySQLdb.escape_string(name)))
        colID = run_sql("SELECT id FROM format WHERE code='%s'" % MySQLdb.escape_string(code))
        res = run_sql("INSERT INTO formatname(id_format, type, ln, value) VALUES (%s,'%s','%s','%s')" % (colID[0][0], rtype, cdslang, MySQLdb.escape_string(name)))
        return colID
    except StandardError, e:
        return ""
    
def add_pbx(title, body):
    try:
        res = run_sql("INSERT INTO portalbox (title, body) values ('%s','%s')" % (MySQLdb.escape_string(title), MySQLdb.escape_string(body)))
        res = run_sql("SELECT id FROM portalbox WHERE title='%s' AND body='%s'" % (MySQLdb.escape_string(title), MySQLdb.escape_string(body)))
        return res
    except StandardError, e:
        return ""

def add_col(colNAME, dbquery, rest):
    """Adds a new collection to collection table
    colNAME - the default name for the collection, saved to collection and collectionname
    dbquery - query related to the collection
    rest - name of apache user allowed to access collection"""
    
    try:
        rtype = get_col_nametypes()[0][0]
        res = run_sql("INSERT INTO collection(name,dbquery,restricted) VALUES('%s','%s','%s')" % (MySQLdb.escape_string(colNAME),MySQLdb.escape_string(dbquery),MySQLdb.escape_string(rest)))
        colID = run_sql("SELECT id FROM collection WHERE name='%s'" % MySQLdb.escape_string(colNAME))
        res = run_sql("INSERT INTO collectionname(id_collection, type, ln, value) VALUES (%s,'%s','%s','%s')" % (colID[0][0], rtype, cdslang, MySQLdb.escape_string(colNAME)))
        return colID
    except StandardError, e:
        return ""

def add_col_pbx(colID, pbxID, ln, score, position):
    try:
        res = run_sql("INSERT INTO collection_portalbox(id_portalbox, id_collection, ln, score, position) values (%s,%s,'%s',%s,'%s')" % (pbxID, colID, ln, score, position))
        return "true"
    except StandardError, e:
        return ""

def add_col_fmt(colID, fmtID, score=''):
    try:
        if score:
            res = run_sql("INSERT INTO collection_format(id_format, id_collection, score) values (%s,%s,%s)" % (fmtID, colID, score))
        else:
            res = run_sql("SELECT score FROM collection_format WHERE id_collection=%s ORDER BY score desc" % colID)
            maxscore = int(res[0][0])
            res = run_sql("INSERT INTO collection_format(id_format, id_collection, score) values (%s,%s,%s)" % (fmtID, colID, (maxscore + 1)))
        return "true"
    except StandardError, e:
        return ""

def modify_restricted(colID, rest):
    try:
        res = run_sql("UPDATE collection SET restricted='%s' WHERE id=%s" % (MySQLdb.escape_string(rest), colID))
        return "true"
    except StandardError, e:
        return ""
        
def modify_dbquery(colID, dbquery):
    try:
        res = run_sql("UPDATE collection SET dbquery='%s' WHERE id=%s" % (MySQLdb.escape_string(dbquery), colID))
        return "true"
    except StandardError, e:
        return ""

def modify_pbx(colID, pbxID, sel_ln, score='', position='', title='', body=''):
    try:
        if title:
            res = run_sql("UPDATE portalbox SET title='%s' WHERE id=%s" % (MySQLdb.escape_string(title), pbxID))
        if body:
            res = run_sql("UPDATE portalbox SET body='%s' WHERE id=%s" % (MySQLdb.escape_string(body), pbxID))
        if score:
            res = run_sql("UPDATE collection_portalbox SET score='%s' WHERE id_collection=%s and id_portalbox=%s and ln='%s'" % (score, colID, pbxID, sel_ln))
        if position:
            res = run_sql("UPDATE collection_portalbox SET position='%s' WHERE id_collection=%s and id_portalbox=%s and ln='%s'" % (position, colID, pbxID, sel_ln))
        return "true"
    except StandardError, e:
        return ""

def switch_score(colID, id_1, id_2, table):
    try:
        res1 = run_sql("SELECT score FROM collection_%s WHERE id_collection=%s and id_%s=%s" % (table, colID, table, id_1))
        res2 = run_sql("SELECT score FROM collection_%s WHERE id_collection=%s and id_%s=%s" % (table, colID, table, id_2))
        res = run_sql("UPDATE collection_%s SET score=%s WHERE id_collection=%s and id_%s=%s" % (table, res2[0][0], colID, table, id_1))
        res = run_sql("UPDATE collection_%s SET score=%s WHERE id_collection=%s and id_%s=%s" % (table, res1[0][0], colID, table, id_2))
        return "true"
    except StandardError, e:
        return ()
