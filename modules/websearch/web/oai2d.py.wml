## $Id$
## OAI interface for CDSware/MySQL written in Python compliant with OAI-PMH2.0

## This file is part of the CERN Document Server Software (CDSware).
## Copyright (C) 2002 CERN.
##
## The CDSware is free software; you can redistribute it and/or
## modify it under the terms of the GNU General Public License as
## published by the Free Software Foundation; either version 2 of the
## License, or (at your option) any later version.
##
## The CDSware is distributed in the hope that it will be useful, but
## WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
## General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with CDSware; if not, write to the Free Software Foundation, Inc.,
## 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

## read config variables:
#include "config.wml"
#include "configbis.wml"

<protect>#!</protect><PYTHON>
<protect>## $Id$</protect>
<protect>## DO NOT EDIT THIS FILE!  IT WAS AUTOMATICALLY GENERATED FROM CDSware WML SOURCES.</protect>
"""OAI interface for CDSware/MySQL written in Python compliant with OAI-PMH2.0"""

__lastupdated__ = """<: print `date +"%d %b %Y %H:%M:%S %Z"`; :>"""
__version__ = "$Id$"


## fill config variables:
pylibdir = "<LIBDIR>/python" 

## OAI config variables
oaiidprefix            =   "<OAIIDPREFIX>"
oaisampleidentifier    =   "<OAISAMPLEIDENTIFIER>"
oaiidentifydescription = """<OAIIDENTIFYDESCRIPTION>"""
oaiidfield             =   "909COo"
oaisetfield            =   "909COp"

try:
    import sys
    import cgi
    sys.path.append('%s' % pylibdir)
    from cdsware.config import *
    from cdsware.dbquery import run_sql
    from cdsware import oai_repository
except ImportError, e:
    import sys
    sys.stderr.write("Error: %s" % e)
    sys.exit(1)
 

def index (req):
    "OAI repository interface"

## parse input parameters passed via GET/POST method

    if req.method == "GET":
        arguments = req.args

    elif req.method == "POST":
        len = int(req.headers_in["content-length"])
        if len > 0:
            arguments = req.read(len)
        else:
            arguments = "verb=Identify"


    arg = oai_repository.parse_args(arguments)
 
## check OAI compliancy

    oai_error = oai_repository.check_args(arg)

## run for compliant input

    if oai_error == "":
  
        if arg['verb']   == "Identify":
            req.write(oai_repository.OAIIdentify(arguments))
        elif arg['verb'] == "ListSets":
            req.write(oai_repository.OAIListSets(arguments, arg['resumptionToken']))
        elif arg['verb'] == "ListIdentifiers":
            req.write(oai_repository.OAIListIdentifiers(arguments, arg['metadataPrefix'], arg['from'], arg['until'], arg['set'], arg['resumptionToken']))
        elif arg['verb'] == "ListRecords": 
            req.write(oai_repository.OAIListRecords(arguments, arg['metadataPrefix'], arg['from'], arg['until'], arg['set'], arg['resumptionToken']))
        elif arg['verb'] == "GetRecord":
            req.write(oai_repository.OAIGetRecord(arguments, arg['identifier'], arg['metadataPrefix']))
        elif arg['verb'] == "ListMetadataFormats":
            req.write(oai_repository.OAIListMetadataFormats(arguments, arg['identifier'], arg['resumptionToken']))
        else:
            req.write(oai_repository.oai_error("badVerb","Illegal OAI verb"))
    else:
        req.write(oai_repository.oai_header(arguments,""))
        req.write(oai_error)
        req.write(oai_repository.oai_footer(""))

    return "\n" 