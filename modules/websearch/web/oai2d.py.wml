## $Id$
## OAI interface for CDSware/MySQL written in Python compliant with OAI-PMH2.0

## This file is part of the CERN Document Server Software (CDSware).
## Copyright (C) 2002 CERN.
##
## The CDSware is free software; you can redistribute it and/or
## modify it under the terms of the GNU General Public License as
## published by the Free Software Foundation; either version 2 of the
## License, or (at your option) any later version.
##
## The CDSware is distributed in the hope that it will be useful, but
## WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
## General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with CDSware; if not, write to the Free Software Foundation, Inc.,
## 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

## read config variables:
#include "config.wml"
#include "configbis.wml"

## start Python:
<protect>#!</protect><PYTHON>
<protect>## $Id$</protect>
<protect>## DO NOT EDIT THIS FILE!  IT WAS AUTOMATICALLY GENERATED FROM CDSware WML SOURCES.</protect>
"""OAI interface for CDSware/MySQL written in Python compliant with OAI-PMH2.0"""

## fill config variables:
pylibdir = "<LIBDIR>/python"

## fill config variables:
cdsname                = """<CDSNAME>"""
supportemail           = """<SUPPORTEMAIL>"""
runtimelogdir          = """<LOGDIR>"""
cgibinurl              = """<CGIBINURL>"""

## OAI config variables
oaiidprefix            = """<OAIIDPREFIX>"""
oaisampleidentifier    = """<OAISAMPLEIDENTIFIER>"""
oaiidentifydescription = """<OAIIDENTIFYDESCRIPTION>"""
oaiidfield             = "909COo"
oaisetfield            = "909COp"

lastmodified           = """<: print `date +"%d %b %Y %H:%M:%S %Z"`; :>"""

<protect>

## okay, rest of the Python code goes below
#######

__version__ = "$Id$"

## import interesting modules:
try:
    import cPickle
    import string
    from string import split
    import os
    import re
    import sys
    import time
    import md5
except ImportError, e:
    import sys
    sys.stderr.write("Error: %s" % e)
    sys.exit(1)

try:
    sys.path.append('%s' % pylibdir)
    from cdsware.config import *
    from cdsware.dbquery import run_sql
except ImportError, e:
    import sys
    sys.stderr.write("Error: %s" % e)
    sys.exit(1)


def encode_for_xml(s):
    "Encode special chars in string so that it would be XML-compliant."

    s = string.replace(s, '&', '&amp;')
    s = string.replace(s, '<', '&lt;')
    return s

def encode_for_url(s):
    "Encode special chars in string so that it would be URL-compliant."

    s = string.replace(s, ' ', '%20')
#    s = string.replace(s, '/', '%2F')
    s = string.replace(s, '?', '%3F')
    s = string.replace(s, '#', '%23')
    s = string.replace(s, '=', '%3D')
    s = string.replace(s, '&', '%26')
#    s = string.replace(s, ':', '%3A')
#    s = string.replace(s, ';', '%3B')
    s = string.replace(s, '%', '%25')
#    s = string.replace(s, '+', '%2B')

    return s

def print_oai_header(verb):
    "Print OAI header"

    out_stream = "Content-type: text/xml\n\n"
    out_stream = out_stream + "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "\n"
    out_stream = out_stream + "<OAI-PMH xmlns=\"http://www.openarchives.org/OAI/2.0/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.openarchives.org/OAI/2.0/ http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd\">\n"

    out_stream = out_stream + " <responseDate>" + OAIGetResponseDate() + "</responseDate>\n"

    if verb:
        out_stream = out_stream + " <request verb=\"%s\">%s</request>\n" % (verb,OAIGetRequestURL())
        out_stream = out_stream + " <%s>\n" % verb
    else:
        out_stream = out_stream + " <request>%s</request>\n" % (OAIGetRequestURL())

    return out_stream

def print_oai_footer(verb):
    "Print OAI footer"

    out_stream = ""

    if verb:
        out_stream = "%s </%s>\n" % (out_stream, verb)
    out_stream = out_stream + "</OAI-PMH>\n"

    return out_stream

def get_field(sysno, field):
    "Gets list of field 'field' for the record with 'sysno' system number."

    out   = []
    digit = field[0:2]

    bx    = "bib%sx" % digit
    bibx  = "bibrec_bib%sx" % digit
    query = "SELECT bx.value FROM %s AS bx, %s AS bibx WHERE bibx.id_bibrec='%s' AND bx.id=bibx.id_bibxxx AND bx.tag='%s'" % (bx, bibx, sysno, field)

    res = run_sql(query)

    for row in res:

        out.append(row[0])

    return out

def UTC_to_localtime(date):
    "Convert UTC to localtime"

    ldate = date.split("T")[0]
    ltime = date.split("T")[1]

    lhour   = ltime.split(":")[0]
    lminute = ltime.split(":")[1]
    lsec    = ltime.split(":")[2]

    lyear   = ldate.split("-")[0]
    lmonth  = ldate.split("-")[1]
    lday    = ldate.split("-")[2]
    
    timetoconvert = time.strftime("%Y-%m-%d %H:%M:%S",time.localtime(time.mktime((string.atoi(lyear),string.atoi(lmonth),string.atoi(lday),string.atoi(lhour),string.atoi(lminute),string.atoi(lsec[:-1]),0,0,-1)) - time.timezone + (time.daylight)*3600))

    return timetoconvert

def localtime_to_UTC(date):
    "Convert localtime to UTC"

    ldate = date.split(" ")[0]
    ltime = date.split(" ")[1]

    lhour   = ltime.split(":")[0]
    lminute = ltime.split(":")[1]
    lsec    = ltime.split(":")[2]

    lyear   = ldate.split("-")[0]
    lmonth  = ldate.split("-")[1]
    lday    = ldate.split("-")[2]

    timetoconvert = time.strftime("%Y-%m-%dT%H:%M:%SZ",time.gmtime(time.mktime((string.atoi(lyear),string.atoi(lmonth),string.atoi(lday),string.atoi(lhour),string.atoi(lminute),string.atoi(lsec),0,0,-1))))

    return timetoconvert


def get_creation_date(sysno):
    "Returns the creation date of the record 'sysno'."

    out   = ""

    query = "SELECT DATE_FORMAT(creation_date,'%%Y-%%m-%%d %%H:%%i:%%s') FROM bibrec WHERE id='%s'" % (sysno)

    res = run_sql(query)
    for row in res:
        out = row[0]
    return localtime_to_UTC(out)

def get_modification_date(sysno):
    "Returns the date of last modification for the record 'sysno'."

    out = ""

    query = "SELECT DATE_FORMAT(modification_date,'%%Y-%%m-%%d %%H:%%i:%%s') FROM bibrec WHERE id='%s'" % (sysno)

    res = run_sql(query)
    for row in res:
        out = row[0]
    return localtime_to_UTC(out)

def check_date(date, time):
    "Check if the date has a correct format"

    if(re.sub("[0123456789\-:TZ]","",date) == ""):
        if len(date) == 10:
            date = date + time
        date = UTC_to_localtime(date)
    else:
        date = ""
    
    return date

def record_exists(sysno):
    "Returns 1 if record with SYSNO 'sysno' exists.  Returns 0 otherwise."

    out = 0
    query = "SELECT id FROM bibrec WHERE id='%s'" % (sysno)
 
    res = run_sql(query)

    if res[0][0] != "":
        out = 1
    return out


def print_record(sysno, format='marcxml'):
    "Prints record 'sysno' formatted accoding to 'format'."

    out_stream = ""

    # sanity check:
    if not record_exists(sysno):
        return

    if (format == "dc") or (format == "oai_dc"):
        format = "xd"

    # print record opening tags:
    
    out_stream = out_stream + "  <record>\n"
    out_stream = out_stream + "   <header>\n"
    for id in get_field(sysno,oaiidfield):
        out_stream = "%s    <identifier>%s</identifier>\n" % (out_stream, encode_for_url(id))
    out_stream = "%s    <datestamp>%s</datestamp>\n" % (out_stream, get_modification_date(sysno))
    for set in get_field(sysno,oaisetfield):
        out_stream = "%s    <setSpec>%s</setSpec>\n" % (out_stream, set)
    out_stream = out_stream + "   </header>\n"
    out_stream = out_stream + "   <metadata>\n"


    if format == "marcxml":
        out_stream = out_stream + "    <record xmlns=\"http://www.loc.gov/MARC21/slim\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.loc.gov/MARC21/slim http://www.loc.gov/standards/marcxml/schema/MARC21slim.xsd\" type=\"Bibliographic\">"
        out_stream = out_stream + "     <leader>00000coc  2200000uu 4500</leader>"
       ## MARC21 and XML formats, possibley OAI -- they are not in "bibfmt" table; so fetch all the data from "bibXXx" tables:

        if format == "marcxml":

            out_stream = "%s     <controlfield tag=\"001\">%d</controlfield>\n" % (out_stream, int(sysno))

        for digit1 in range(0,10):
            for digit2 in range(0,10):
                bx = "bib%d%dx" % (digit1, digit2)
                bibx = "bibrec_bib%d%dx" % (digit1, digit2)
                query = "SELECT b.tag,b.value,bb.field_number FROM %s AS b, %s AS bb "\
                        "WHERE bb.id_bibrec='%s' AND b.id=bb.id_bibxxx AND b.tag LIKE '%s%%' "\
                        "ORDER BY bb.field_number, b.tag ASC" % (bx, bibx, sysno, str(digit1)+str(digit2))
                res = run_sql(query)
                field_number_old = -999
                field_old = ""
                for row in res:
                    field, value, field_number = row[0], row[1], row[2]
                    ind1, ind2 = field[3], field[4]
                    if ind1 == "_":
                        ind1 = " "
                    if ind2 == "_":
                        ind2 = " "                        
                    # print field tag
                    if field_number != field_number_old or field[:-1] != field_old[:-1]:
                        if format == "marcxml":

                            fieldid = encode_for_xml(field[0:3])

                            if field_number_old != -999:
                                out_stream = out_stream + "     </datafield>\n"

                            out_stream = "%s     <datafield tag=\"%s\" ind1=\"%s\" ind2=\"%s\">\n" % (out_stream, encode_for_xml(field[0:3]), encode_for_xml(ind1).lower(), encode_for_xml(ind2).lower())

                        field_number_old = field_number
                        field_old = field
                    # print subfield value
                    if format == "marcxml":
                        value = encode_for_xml(value)
                        out_stream = "%s      <subfield code=\"%s\">%s</subfield>\n" % (out_stream, encode_for_xml(field[-1:]), value)
   
                    # fetch next subfield
                # all fields/subfields printed in this run, so close the tag:
                if (format == "marcxml") and field_number_old != -999:
                    out_stream = out_stream + "     </datafield>\n"
        out_stream = out_stream + "    </record>\n"

    elif format == "xd":
        # XML Dublin Core format, possibly OAI -- select only some bibXXx fields:
        out_stream = out_stream + "       <oaidc:dc xmlns=\"http://purl.org/dc/elements/1.1/\" xmlns:oaidc=\"http://www.openarchives.org/OAI/2.0/oai_dc/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd\">\n"

        for f in get_field(sysno, "041__a"):
            out_stream =  "%s         <language>%s</language>\n" % (out_stream, f)

        for f in get_field(sysno, "100__a"):
            out_stream =  "%s         <creator>%s</creator>\n" % (out_stream, encode_for_xml(f))

        for f in get_field(sysno, "700__a"):
            out_stream =  "%s         <creator>%s</creator>\n" % (out_stream, encode_for_xml(f))

        for f in get_field(sysno, "245__a"):
            out_stream =  "%s         <title>%s</title>\n" % (out_stream, encode_for_xml(f))

        for f in get_field(sysno, "65017a"):
            out_stream =  "%s         <subject>%s</subject>\n" % (out_stream, encode_for_xml(f))

        for f in get_field(sysno, "8564_u"):
            out_stream =  "%s         <identifier>%s</identifier>\n" % (out_stream, encode_for_xml(encode_for_url(f)))
        
        for f in get_field(sysno, "520__a"):
            out_stream = "%s         <description>%s</description>\n" % (out_stream, encode_for_xml(f))            

        date = get_creation_date(sysno)

        out_stream = "%s         <date>%s</date>\n" % (out_stream, date)
        out_stream = out_stream + "    </oaidc:dc>\n"

    # print record closing tags:
    
    out_stream = out_stream + "   </metadata>\n"
    out_stream = out_stream + "  </record>\n"

    return out_stream


def OAIListMetadataFormats(identifier="",resumptionToken=""):
    "Generates response to OAIListMetadataFormats verb."

</protect>

    oai_rt_expire = <OAIEXPIRE> 
    nb_formats_in_resume = <OAILOAD>

<protect>

    out_stream = ""

    flag = 1 # list or not depending on identifier

    if identifier:

        flag = 0

        sysno = OAIGetSysno(identifier)

        if record_exists(sysno):

            flag = 1

        else:

            out_stream = out_stream + oai_error("badArgument","invalid record Identifier")
            return out_stream

    out_stream = out_stream + print_oai_header("ListMetadataFormats")

    if flag:
        out_stream = out_stream + "   <metadataFormat>\n"
        out_stream = out_stream + "    <metadataPrefix>oai_dc</metadataPrefix>\n"
        out_stream = out_stream + "    <schema>http://www.openarchives.org/OAI/1.1/dc.xsd</schema>\n"
        out_stream = out_stream + "    <metadataNamespace>http://purl.org/dc/elements/1.1/</metadataNamespace>\n"
        out_stream = out_stream + "   </metadataFormat>\n"
        out_stream = out_stream + "   <metadataFormat>\n"
        out_stream = out_stream + "    <metadataPrefix>marcxml</metadataPrefix>\n"
        out_stream = out_stream + "    <schema>http://www.loc.gov/standards/marcxml/schema/MARC21slim.xsd</schema>\n"
        out_stream = out_stream + "    <metadataNamespace>http://www.loc.gov/MARC21/slim</metadataNamespace>\n"
        out_stream = out_stream + "   </metadataFormat>\n"

    out_stream = out_stream + print_oai_footer("ListMetadataFormats")

    return out_stream

def OAIListRecords(metadataPrefix, fromDate, untilDate, set, resumptionToken):
    "Generates response to OAIListRecords verb."

</protect>

    oai_rt_expire = <OAIEXPIRE> 
    nb_records_in_resume = <OAILOAD>

<protect>

    out_stream = ""

    sysnos = []
    sysno  = []

    # check if the resumptionToken did not expire
    if resumptionToken:
        filename = "%s/RTdata/%s" % (runtimelogdir, resumptionToken)
        if os.path.exists(filename) == 0:
             out_stream = oai_error("badResumptionToken","ResumptionToken expired")
             return out_stream

    if resumptionToken:
        sysnos = OAICacheOut(resumptionToken)
        metadataPrefix = sysnos.pop()
    else:
        sysnos = OAIGetSysnoList(set, fromDate, untilDate)

    if len(sysnos) == 0: # noRecordsMatch error
        
        out_stream = out_stream + oai_error("noRecordsMatch","no records correspond to the request")
        return out_stream

    out_stream = out_stream + print_oai_header("ListRecords")

    i = 0
    for s in sysnos:
        if s:
            i = i + 1
            if i > nb_records_in_resume:           # cache or write?
                if i == nb_records_in_resume + 1: # resumptionToken?
                    resumptionToken = OAIGenResumptionToken()
                    extdate = OAIGetResponseDate(oai_rt_expire)
                    if extdate:
                        out_stream = "%s <resumptionToken expirationDate=\"%s\">%s</resumptionToken>\n" % (out_stream,extdate,resumptionToken)
                    else:
                        out_stream = "%s <resumptionToken>%s</resumptionToken>\n" % (out_stream, resumptionToken)
                sysno.append(s)
            else:
                done = 0
                for f in get_field(s, "245__a"):
                    if done == 0:
                        out_stream = out_stream + print_record(s, metadataPrefix)

    out_stream = out_stream + print_oai_footer("ListRecords")

    if i > nb_records_in_resume:
        OAICacheClean()
        sysno.append(metadataPrefix)
        OAICacheIn(resumptionToken,sysno)

    return out_stream


def OAIListSets(resumptionToken=""):
    "Lists available sets for OAI metadata harvesting."

</protect>
    oai_rt_expire = <OAIEXPIRE> 
    nb_sets_in_resume = <OAILOAD>
<protect>

    out_stream = ""

    # note: no flow control in ListSets
    
    out_stream = out_stream + print_oai_header("ListSets")

    sets = get_sets()

    for s in sets:

        out_stream = out_stream + "  <set>\n"
        out_stream = "%s    <setSpec>%s</setSpec>\n" % (out_stream, s[0])
        out_stream = "%s    <setName>%s</setName>\n" % (out_stream, s[1])
        if s[2]:
            out_stream = "%s    <setDescription>%s</setDescription>\n" % (out_stream, s[2])
        out_stream = out_stream + "   </set>\n"

    out_stream = out_stream + print_oai_footer("ListSets")

    return out_stream

    
def OAIGetRecord(identifier, metadataPrefix):
    """Returns record 'identifier' according to 'metadataPrefix' format for OAI metadata harvesting."""
    
    out_stream = ""

    sysno = OAIGetSysno(identifier)

    if record_exists(sysno):       
        datestamp = get_modification_date(sysno)
    else:
        out_stream = out_stream + oai_error("badArgument","invalid record Identifier")

    out_stream = out_stream + print_oai_header("GetRecord")
    out_stream = out_stream + print_record(sysno, metadataPrefix)
    out_stream = out_stream + print_oai_footer("GetRecord")

    return out_stream

def OAIListIdentifiers(metadataPrefix, fromDate,untilDate,set,resumptionToken):
    "Prints OAI response to the ListIdentifiers verb."

</protect>
    oai_rt_expire = <OAIEXPIRE>
    nb_identifiers_in_resume = <OAILOAD>
<protect>

    out_stream = ""

    sysno  = []
    sysnos = []

    if resumptionToken:
        filename = "%s/RTdata/%s" % (runtimelogdir, resumptionToken)
        if os.path.exists(filename) == 0:
             out_stream = out_stream + oai_error("badResumptionToken","ResumptionToken expired")
             return out_stream

    if resumptionToken:
        sysnos = OAICacheOut(resumptionToken)
    else:
        sysnos = OAIGetSysnoList(set, fromDate, untilDate)

    if len(sysnos) == 0: # noRecordsMatch error
        out_stream = out_stream + oai_error("noRecordsMatch","no records correspond to the request")

    out_stream = out_stream + print_oai_header("ListIdentifiers")

    i = 0
    for s in sysnos:
        if s:
            i = i + 1
            if i > nb_identifiers_in_resume:           # cache or write?
                if i ==  nb_identifiers_in_resume + 1: # resumptionToken?
                    resumptionToken = OAIGenResumptionToken()
                    extdate = OAIGetResponseDate(oai_rt_expire)
                    if extdate:
                        out_stream = "%s  <resumptionToken expirationDate=\"%s\">%s</resumptionToken>\n" % (out_stream, extdate,resumptionToken)
                    else:
                        out_stream = "%s  <resumptionToken>%s</resumptionToken>\n" % (out_stream, resumptionToken)
                sysno.append(s)
            else:
                done = 0
                for f in get_field(s, "245__a"):
                    if done == 0:
                        for id in get_field(s,oaiidfield):
                            out_stream = out_stream + "    <header>\n"
                            out_stream = "%s      <identifier>%s</identifier>\n" % (out_stream, encode_for_url(id))
                            out_stream = "%s      <datestamp>%s</datestamp>\n" % (out_stream, get_modification_date(OAIGetSysno(id)))
                            for set in get_field(s,oaisetfield):
                                out_stream = "%s      <setSpec>%s</setSpec>\n" % (out_stream, set)
                            out_stream = out_stream + "    </header>\n"
                        done = 1

    if i > nb_identifiers_in_resume:
        OAICacheClean() # clean cache from expired resumptionTokens
        OAICacheIn(resumptionToken,sysno)

    out_stream = out_stream + print_oai_footer("ListIdentifiers")

    return out_stream


def OAIIdentify():
    "Generates response to OAIIdentify verb."
        
    responseDate          = OAIGetResponseDate()
    requestURL            = OAIGetRequestURL()
    repositoryName        = "  <repositoryName>" + cdsname + "</repositoryName>\n"
    baseURL               = "  <baseURL>%soai2d.py/</baseURL>\n" % cgibinurl
    protocolVersion       = "  <protocolVersion>2.0</protocolVersion>\n"
    adminEmail            = "  <adminEmail>mailto:%s</adminEmail>\n" % supportemail
#    earliestDST		  = "  <earliestDatestamp>%s</earliestDatestamp>\n" % get_earliest_datestamp()               
    repositoryIdentifier  = "%s" % oaiidprefix
    sampleIdentifier      = oaisampleidentifier
    identifyDescription   = oaiidentifydescription + "\n"

    out_stream = print_oai_header("Identify")

    out_stream = out_stream + repositoryName
    out_stream = out_stream + baseURL
    out_stream = out_stream + protocolVersion
    out_stream = out_stream + adminEmail
#    out_stream = out_stream + earliest
    out_stream = out_stream + "  <deletedRecord>no</deletedRecord>\n"
    out_stream = out_stream + "  <granularity>YYYY-MM-DDThh:mm:ssZ</granularity>\n"
    #    print "  <compression></compression>\n"
    out_stream = out_stream + oaiidentifydescription

    out_stream = out_stream + print_oai_footer("Identify")

    return out_stream

     
def OAIGetRequestURL():
    "Generates requestURL tag for OAI."

    re_amp = re.compile('&')

    if os.environ.has_key('SERVER_NAME'):
        server_name = os.environ['SERVER_NAME']
    else:
        server_name = ""
    if os.environ.has_key('QUERY_STRING'):
        query_string = os.environ['QUERY_STRING']
    else:
        query_string = ""
    if os.environ.has_key('SCRIPT_NAME'):
        script_name = os.environ['SCRIPT_NAME']
    else:
        script_name = ""

    requestURL = "http://" + server_name + script_name 
    if query_string:
        requestURL = requestURL + "?"  + re_amp.sub("&amp;", query_string)

    return requestURL

def OAIGetResponseDate(delay=0):
    "Generates responseDate tag for OAI."
    
    return time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime(time.time() + delay))


def oai_error(code, msg):
    "OAI error occured"

    out_stream = print_oai_header("")
    out_stream = "%s <error code=\"%s\">%s</error>\n" % (out_stream, code, msg)
    out_stream = out_stream + print_oai_footer("")
    return out_stream


def OAIGetSysno(identifier):
    "Returns the first MySQL BIB ID for the OAI identifier 'identifier', if it exists."
    sysno = None
    if identifier:
        query = "SELECT DISTINCT(bb.id_bibrec) FROM bib90x AS bx, bibrec_bib90x AS bb WHERE bx.tag='%s' AND bb.id_bibxxx=bx.id AND bx.value='%s'" % (oaiidfield,identifier)
        res = run_sql(query)
        for row in res:
            sysno = row[0]
    return sysno


def OAIGetSysnoList(set, fromDate, untilDate):
    "Returns list of system numbers for the OAI set 'set', modified from 'date_from' until 'date_until'."

    out_dict = {} # dict to hold list of out sysnos as its keys

    if set:
        query = "SELECT DISTINCT bibx.id_bibrec FROM bib90x AS bx LEFT JOIN bibrec_bib90x AS bibx ON bx.id=bibx.id_bibxxx LEFT JOIN bibrec AS b ON b.id=bibx.id_bibrec WHERE bx.tag='%s' AND bx.value='%s'" % (oaisetfield,set)
    else:
        query = "SELECT DISTINCT bibx.id_bibrec FROM bib90x AS bx LEFT JOIN bibrec_bib90x AS bibx ON bx.id=bibx.id_bibxxx LEFT JOIN bibrec AS b ON b.id=bibx.id_bibrec WHERE bx.tag='%s'" % (oaiidfield)

    if untilDate:
        query = query + " AND b.modification_date <= '%s'" % untilDate
    if fromDate:
        query = query + " AND b.modification_date >= '%s'" % fromDate

    res = run_sql(query)

    for row in res: 
        out_dict[row[0]] = 1
         
    return out_dict.keys()


def OAIGenResumptionToken():
    "Generates unique ID for resumption token management."

    return md5.new(str(time.time())).hexdigest()


def OAICacheIn(resumptionToken, sysnos):
    "Stores or adds sysnos in cache.  Input is a string of sysnos separated by commas."

    filename = "%s/RTdata/%s" % (runtimelogdir, resumptionToken)

    fil = open(filename,"w")
    cPickle.dump(sysnos,fil)
    fil.close()
    return 1


def OAICacheOut(resumptionToken):
    "Restores string of comma-separated system numbers from cache."
    
    sysnos = []

    filename = "%s/RTdata/%s" % (runtimelogdir, resumptionToken)

    if OAICacheStatus(resumptionToken):
        fil = open(filename,"r")
        sysnos = cPickle.load(fil)
        fil.close()
    else:
        return 0
    return sysnos


def OAICacheClean():
    "Removes cached resumptionTokens older than specified"
    
    directory = "%s/RTdata" % runtimelogdir

    files = os.listdir(directory)

    for f in files:
        filename = directory + "/" + f
        # cache entry expires when not modified during a specified period of time
        if ((time.time() - os.path.getmtime(filename)) > oai_rt_expire):
            os.remove(filename)

    return 1


def OAICacheStatus(resumptionToken):
    "Checks cache status.  Returns 0 for empty, 1 for full."
    
    filename = "%s/RTdata/%s" % (runtimelogdir, resumptionToken)
    
    if os.path.exists(filename):
        if os.path.getsize(filename) > 0:
            return 1
        else:
            return 0
    else:
        return 0


def get_earliest_datestamp():
    "Returns earliest datestamp"

    out = ""

    query = "SELECT MIN(creation_date) FROM bibrec"

    res = run_sql(query)

    row = res[0][0]
  
    out = "%s 00:00:00" % row[0][:10]

    return localtime_to_UTC(out)


def get_sets():
    "Returns list of sets."

    out = []
    row = ['','']

    query = "SELECT setSpec,setName,setDescription FROM oaiset"
    res = run_sql (query)
    for row in res:
        row_bis = [row[0],row[1],row[2]]
        out.append(row_bis)
            
    return out


def parse_args(args=""):
    "Parse input args"

    out_args = {}

    list_of_arguments = args.split('&')

    for item in list_of_arguments:
        key, value = item.split('=')
        out_args[key] = value

    return out_args

def check_args(arguments):
    "Check OAI arguments, OK=''"

    out_stream = ""


## principal argument required
#
    if arguments.has_key('verb'):
        pass
    else:
        out_stream = out_stream + oai_error("badArgument","Missing OAI verb.")

## resumptionToken exclusive
#    
    if ((arguments.has_key('from') or arguments.has_key('until') or arguments.has_key('metadataPrefix') or arguments.has_key('identifier') or arguments.has_key('set')) and arguments.has_key('resumptionToken')):

        out_stream = out_stream + oai_error("badArgument","The request includes illegal arguments")

## datestamp formats
#
    if arguments.has_key('from'):
        from_length = len(arguments['from'])
        if check_date(arguments['from'],"T23:59:59Z") == "": 
            out_stream = out_stream + oai_error("badArgument","Bad datestamp format")
    else:
        from_length = 0

    if arguments.has_key('until'):
        until_length = len(arguments['until'])
        if check_date(arguments['until'],"T23:59:59Z") == "":
            out_stream = out_stream + oai_error("badArgument","Bad datestamp format")
    else:
        until_length = 0 

    if from_length <> 0:
        if until_length <> 0:
            if from_length <> until_length:
                out_stream = out_stream + oai_error("badArgument","Bad datestamp format")

## Identify exclusive
#
    if (arguments['verb']=="Identify" and (arguments.has_key('metadataPrefix') or arguments.has_key('identifier') or arguments.has_key('set') or arguments.has_key('from') or arguments.has_key('until') or arguments.has_key('resumptionToken'))):
        out_stream = out_stream + oai_error("badArgument","The request includes illegal arguments")

## identifier for GetRecords 
#
    if arguments['verb']=="GetRecords" and arguments['identifier'] == "":
        out_stream = out_stream + oai_error("badArgument","Record identifier missing")

    return out_stream

def index (req, verb="", metadataPrefix="", set="", identifier="", restmptionToken=""):
    "OAI repository interface"

    arguments = parse_args(req.args)
 
    if arguments.has_key('from'):
        fromDate = arguments['from']
    else:
        fromDate = ""
    if arguments.has_key('until'):
        untilDate = arguments['until']
    else:
        untilDate = ""
    if arguments.has_key('resumptionToken'):
        resumptionToken = arguments['resumptionToken']
    else:
        resumptionToken = ""
    if arguments.has_key('identifier'):
        identifier = arguments['identifier']
    else:
        identifier = ""
    if arguments.has_key('metadataPrefix'): 
        metadataPrefix = arguments['metadataPrefix']
    else:
        metadataPrefix = ""
    if arguments.has_key('set'):
        set = arguments['set']
    else:
        set = ""

    oai_check = check_args(arguments)

    if oai_check == "":
 
        if verb   == "Identify":
            req.write(OAIIdentify())
        elif verb == "ListSets":
            req.write(OAIListSets(resumptionToken))
        elif verb == "ListIdentifiers":
            if metadataPrefix == "":
                req.write(oai_error("badArgument","metadataPrefix missing."))
            elif fromDate > untilDate:
                req.write(oai_error("badArgument","Wrong date"))
            else:
                req.write(OAIListIdentifiers(metadataPrefix, fromDate, untilDate, set, resumptionToken))
        elif verb == "ListRecords":
            if metadataPrefix == "":
                req.write(oai_error("badArgument","metadataPrefix missing."))
            elif fromDate > untilDate:
                req.write(oai_error("badArgument","Wrong date"))
            req.write(OAIListRecords(metadataPrefix, fromDate, untilDate, set, resumptionToken))
        elif verb == "GetRecord":
            req.write(OAIGetRecord(identifier, metadataPrefix))
        elif verb == "ListMetadataFormats":
            req.write(OAIListMetadataFormats(identifier, resumptionToken))
        else:
            req.write(oai_error("badVerb","Illegal OAI verb"))
    else:
        req.write(oai_check)
                
    return "\n"

</protect>